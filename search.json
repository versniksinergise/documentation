[
  {
    "objectID": "Support.html",
    "href": "Support.html",
    "title": "COPERNICUS DATA SPACE ECOSYSTEM DOCUMENTATION PORTAL",
    "section": "",
    "text": "If the documentation portal does not provide the solution to your questions related to the use of the Copernicus Data Space Ecosystem, this page describes how to ask for support.\n\n\nImportant to know is that only users with a Copernicus Data Space Ecosystem account can ask for support. If you don’t have one yet, you can register here. If you have an issue with registering or you want to deregister, please contact us directly.\n\n\n\nNavigate to the following website. You should see the following form:\n\n\nIn the section Use OAuth Login click Copernicus Data Space Ecosystems. You will now get the Copernicus Data Space Ecosystems login form:\n\n\nEnter the username and e-mail to your account and click LOG IN.\n\n\n\nOnce you have logged in you should see this window:\n\n\nClick Technical support. The form used to create tickets should now appear:\n\n\nProvide a short summary of the ticket in the text field Summary. Describe your problem in detail in the text field Description. You can also add upload attachments such as screenshots in the Attachments section. Once you’ve finished, click Create. Your ticket should now be submitted:\n\n\nYou can see its status here. You can also post additional comments and replies.\n\n\n\nAfter logging in (as described in Step 1), you can see the status of your tickets. Click the Requests button in the upper right corner of the website:\n\n\nYou will now see the following menu:\n\n\nClick My requests or All requests depending on your needs. You should now see the place in which you can access your tickets:\n\n\nIf you can’t see your ticket here, make sure that the option Any status from the first drop-down menu is selected:\n\n\nYou should now see your ticket:\n\n\nThis system is the initial setup of the support desk of the Copernicus Data Space Ecosystem. From April 2023 onwards, we will provide much more integrated support functionalities such as answer suggestions and a user forum."
  },
  {
    "objectID": "Applications.html",
    "href": "Applications.html",
    "title": "COPERNICUS DATA SPACE ECOSYSTEM DOCUMENTATION PORTAL",
    "section": "",
    "text": "This section provides an overview of the EO Applications available from Copernicus Data Space Ecosystem."
  },
  {
    "objectID": "APIs.html",
    "href": "APIs.html",
    "title": "COPERNICUS DATA SPACE ECOSYSTEM DOCUMENTATION PORTAL",
    "section": "",
    "text": "This section gives an overview on the APIs provided by Copernicus Data Space Ecosystem."
  },
  {
    "objectID": "Data/Sentinel3.html",
    "href": "Data/Sentinel3.html",
    "title": "COPERNICUS DATA SPACE ECOSYSTEM DOCUMENTATION PORTAL",
    "section": "",
    "text": "SENTINEL-3 is an European Earth Observation satellite mission developed to support Copernicus ocean, land, atmospheric, emergency, security and cryospheric applications.\nThe main objective of the SENTINEL-3 mission is to measure sea surface topography, sea and land surface temperature, and ocean and land surface colour with high accuracy and reliability to support ocean forecasting systems, environmental monitoring and climate monitoring. The mission definition is driven by the need for continuity in provision of ERS, ENVISAT and SPOT vegetation data, with improvements in instrument performance and coverage.\nThe table below indicates for each type of user level product, the access type (IAD or DAD), the spatial and temporal extent of the offer and from when the data will be available in the Copernicus Data Space Ecosystem. The table includes as well an overview of the planned Sentinel engineering data availability.\n\n\n\n\n\n\nProduct Type\nFile Description\nData Access Type\nSpatial Extent\nTemporal Extent\nMore Information\nAvailable from\n\n\n\n\nOLCI Level-1 NTC (Non Time Critical)\npacked or unpacked\nIAD (Immediately available data)\nWorld\nMar-16 - Present\nDetails\nJan-23\n\n\nOLCI Level-1 NRT (Near Real Time)\npacked or unpacked\nIAD\nWorld\nLast 1 year\nDetails\nJan-23\n\n\nOLCI Level-2 NTC\npacked or unpacked\nIAD\nWorld\nMar-16 - Present\nDetails\nJan-23\n\n\nOLCI Level-2 NRT\npacked or unpacked\nIAD\nWorld\nLast 1 year\nDetails\nJan-23\n\n\nOLCI Level-0(*)\npacked\nDAD (Deferred available data)\nWorld\nFeb-16 - Present\nDetails\nJul-23\n\n\nSLSTR Level-1 NTC\npacked or unpacked\nIAD\nWorld\nMar-16 - Present\nDetails\nJan-23\n\n\nSLSTR Level-1 NRT\npacked or unpacked\nIAD\nWorld\nLast 1 year\nDetails\nJan-23\n\n\nSLSTR Level-2 NTC\npacked or unpacked\nIAD\nWorld\nMar-16 - Present\nDetails\nJan-23\n\n\nSLSTR Level-2 NRT\npacked or unpacked\nIAD\nWorld\nLast 1 year\nDetails\nJan-23\n\n\nSLSTR Level-0(*)\npacked\nDAD\nWorld\nFeb-16 - Present\nDetails\nJul-23\n\n\nSRAL Level-1 NTC\npacked or unpacked\nIAD\nWorld\nMar-16 - Present\nDetails\nJan-23\n\n\nSRAL Level-1 STC (Short Time Critical)\npacked or unpacked\nIAD\nWorld\nLast 1 month\nDetails\nJan-23\n\n\nSRAL Level-1 NRT\npacked or unpacked\nIAD\nWorld\nLast 1 year\nDetails\nJan-23\n\n\nSRAL Level-2 NTC\npacked or unpacked\nIAD\nWorld\nMar-16 - Present\nDetails\nJan-23\n\n\nSRAL Level-2 STC\npacked or unpacked\nIAD\nWorld\nLast 1 month\nDetails\nJan-23\n\n\nSRAL Level-2 NRT\npacked or unpacked\nIAD\nWorld\nLast 1 year\nDetails\nJan-23\n\n\nSRAL Level-0(*)\npacked\nDAD\nWorld\nFeb-16 - Present\nDetails\nJul-23\n\n\nSYN Level-2 NTC\npacked or unpacked\nIAD\nWorld\nMar-16 - Present\nDetails\nJan-23\n\n\nSYN Level-2 STC\npacked or unpacked\nIAD\nWorld\nLast 1 month\nDetails\nJan-23\n\n\n\n(*) Access restrictions may apply"
  },
  {
    "objectID": "Data/Sentinel1.html",
    "href": "Data/Sentinel1.html",
    "title": "COPERNICUS DATA SPACE ECOSYSTEM DOCUMENTATION PORTAL",
    "section": "",
    "text": "The Sentinel-1 radar imaging mission is composed of a constellation of two polar-orbiting satellites providing continous all-weather, day and night imagery for Land and Maritime Monitoring. C-band synthentic aperture radar imaging has the advantage of operating at wavelenghts that are not obstructed by clouds or lack of illumination and therefore can acquire data during day or night under all weather conditions. With 6 days repeat cycle on the entire world and daily acquistions of sea ice zones and Europe’s major shipping routes, Sentinel-1 ensures reliable data availability to support emergency services and applications requiring time series observations.\nThe end of mission of the Sentinel-1B satellite has been declared in July 2022 On 23 December 2021, Copernicus Sentinel-1B experienced an anomaly related to the instrument electronics power supply provided by the satellite platform, leaving it unable to deliver radar data. Despite all investigations and recovery attempts, ESA and the European Commission had to announce that it is the end of the mission for Sentinel-1B. Copernicus Sentinel-1A remains fully operational. More information about the end of the mission for the Sentinel-1B satellite can be found on the webpage Mission ends for Copernicus Sentinel-1B satellite. In response to the loss of Sentinel-1B, the mission observation scenario of Sentinel-1A was adjusted, affecting the nominal global coverage frequency. An up-to-date overview of the observation scenario in place can be consulted on the webpage Sentinel-1 Observation Scenario. Some regions are currently not observed by Sentinel-1. All regions that are still observed now have a repeat cycle of 12 under a one-satellite constellation scenario, which affects possible interferometric analyses.\nSentinel data products are made available systematically and free of charge to all data users including the general public, scientific and commercial users.\nData products are available in single polarisation for Wave mode and dual polarisation or single polarisation for SM, IW and EW modes.\nThe table below indicates for each type of user level product, the format in which the data will be available, the access type (IAD or DAD), the spatial and temporal extent of the offer and from when the data will be available in the Copernicus Data Space Ecosystem. The data offer will gradually extend starting from January 2023 (an “*” indicates a temporary offer that will change when the target service offer becomes available within July 2023).\n\n\n\n\n\n\n\n\nProduct Type\nFile Description\nData Access Type\nSpatial Extent\nTemporal Extent\nMore Information\nAvailable from\n\n\n\n\nGRD\npacked or unpacked\nIAD (Immediately available data)\nWorld\nOct-14 - Present\nDetails\nJan-23(*)\n\n\nOCN\npacked or unpacked\nIAD\nWorld\nDec-14 - Present\nDetails\nJan-23(*)\n\n\nSLC\npacked or unpacked\nIAD\nEurope\nOct-14 - Present\nDetails\nJan-23(*)\n\n\nSLC\npacked or unpacked\nIAD\nRoW (World with exception of Europe)\nFeb-21 - Present\nDetails\nJan-23(*)\n\n\nL0 (RAW)\npacked or unpacked\nIAD\nWorld\nJan-21 - Present\nDetails\nJan-23(*)\n\n\nL0 (RAW)\npacked\nDAD\nWorld\nOct-14 - Present\nDetails\nJan-23(*)\n\n\n\n(*) temporary offer available until the target service offer becomes available in July 2023.\n\n\n\n\n\n\nProduct Type\nFile Description\nData Access Type\nSpatial Extent\nTemporal Extent\nMore Information\nAvailable from\n\n\n\n\nGRD\npacked or unpacked, SAFE with Cloud Optimized GeoTIFF\nIAD (Immediately available data)\nWorld\nOct-14 - Present\nDetails\nJul-23\n\n\nGRD\npacked, original SAFE\nIAD\nWorld\nLast 1 year\nDetails\nJul-23\n\n\nGRD\npacked, original SAFE\nDAD (Deferred available data)\nWorld\nOct-14 - Present-1 year\nDetails\nJul-23\n\n\nOCN\npacked or unpacked\nIAD\nWorld\nDec-14 - Present\nDetails\nJan-23\n\n\nSLC\npacked or unpacked\nIAD\nWorld\nOct-14 - Present\nDetails\nJul-23\n\n\nL0 (RAW)\npacked or unpacked\nIAD\nEurope\nOct-14 - Present\nDetails\nJul-23\n\n\nL0 (RAW)\npacked or unpacked\nIAD\nRoW\nLast 1 year\nDetails\nJul-23\n\n\nL0 (RAW)\npacked\nDAD\nWorld\nOct-14 - Present-1 year\nDetails\nJan-23(*)"
  },
  {
    "objectID": "Data/Sentinel2.html",
    "href": "Data/Sentinel2.html",
    "title": "COPERNICUS DATA SPACE ECOSYSTEM DOCUMENTATION PORTAL",
    "section": "",
    "text": "The Copernicus Sentinel-2 mission comprises a land monitoring constellation of two polar-orbiting satellites placed in the same sun-synchronous orbit, phased at 180° to each other. It aims at monitoring variability in land surface conditions, and its wide swath width (290 km) and high revisit time (10 days at the equator with one satellite, and 5 days with 2 satellites under cloud-free conditions which results in 2-3 days at mid-latitudes) will support monitoring of Earth’s surface changes.\nThe Sentinel-2 products are a compilation of elementary granules of fixed size, along with a single orbit. A granule is the minimum indivisible partition of a product (containing all possible spectral bands).\nFor Level-1C and Level-2A, the granules, also called tiles, are 100x100 km2 ortho-images in UTM/WGS84 projection. Download the Sentinel-2 tiling grid kml.\nThe UTM (Universal Transverse Mercator) system divides the Earth’s surface into 60 zones. Each UTM zone has a vertical width of 6° of longitude and horizontal width of 8° of latitude.\n\n\nNote: The initial offer as from 01/2023 includes IAD access to the original Sentinel-2 Level-2A products generated by the ESA Copernicus Ground Segment for data acquired since December 2021.\nFor Sentinel-2 data acquired before December 2021 : the initial offer in IAD includes Sentinel-2 Level-2A products generated by ESA Copernicus Ground Segment and also Level-2A products generated by the CREODIAS using the Sentinel-2 Toolbox – identified by baseline 99.99 (“N9999” included in the product ID).  These products slightly differ from the products generated by the ESA Copernicus Ground Segment and are not visualized in the Browser. The products are compatible and can be downloaded for further processing or analysis.\n\nIn addition: IAD access to the new Sentinel-2 Collection-1 products (Level-1C and Level-2A) generated by the ESA Copernicus Ground Segment is available for data starting from December 2021 and proceeding in reverse chronological order of sensing time. These data are gradually made available as they are being generated as a part of the Sentinel-2 reprocessing campaign. More information about the campaign can be found on the dedicated webpage. In order to search for the Sentinel-2 Collection-1 products in the Browser users have to select the “Sentinel-2” tick box and type “N0500” in the “Search criteria”\n\n\n\n\n\n\n\n\nProduct Type\nFile Description\nData Access Type\nSpatial Extent\nTemporal Extent\nMore Information\nAvailable from\n\n\n\n\nL1C\npacked or unpacked\nIAD (Immediately available data)\nWorld\nJul-15 - Present\nDetails\nJan-23\n\n\nL2A(*)\npacked or unpacked (original ESA product)\nIAD\nEurope\nMar-17 - Present\nDetails\nJan-23\n\n\nL2A\npacked or unpacked (original ESA product)\nIAD\nRoW (World with exception of Europe)\nDec-21 - Present\nDetails\nJan-23\n\n\n\n(*) For period 01/2020 – 11/2021 the data repository holds original ESA products and products generated using Sentinel-2 Toolbox (sen2cor). See note above.\n\n\n\n\n\n\nProduct Type\nFile Description\nData Access Type\nSpatial Extent\nTemporal Extent\nMore Information\nAvailable from\n\n\n\n\nL1C\npacked or unpacked\nIAD (Immediately available data)\nWorld\nJul-15 - Present\nDetails\nJan-23\n\n\nL2A\npacked or unpacked (original ESA product)\nIAD\nWorld\nJul-15 - Present\nDetails\nJul-23\n\n\nL2A\npacked (original ESA products)\nDAD (Deferred available data)\nWorld\nJul-15 - Present\nDetails\nJul-23\n\n\nL0(*)\npacked\nDAD\nWorld\nJul-15 - Present\nDetails\nJul-23\n\n\n\n(*) Access restrictions may apply.\n\n\n\n\n\n\nProduct Type\nFile Description\nData Access Type\nSpatial Extent\nTemporal Extent\nMore Information\nAvailable from\n\n\n\n\nL1B(*)\nEUP\nIAD\nWorld\nLast 2 weeks\nDetails\nOct-23\n\n\nL1B(*)\nEUP\nDAD\nWorld\nFull archive\nDetails\nOct-23\n\n\n\n(*) Access restrictions may apply."
  },
  {
    "objectID": "Data/Sentinel5P.html",
    "href": "Data/Sentinel5P.html",
    "title": "COPERNICUS DATA SPACE ECOSYSTEM DOCUMENTATION PORTAL",
    "section": "",
    "text": "The Copernicus Sentinel-5 Precursor mission is the first Copernicus mission dedicated to monitoring our atmosphere.\nThe main objective of the Copernicus Sentinel-5P mission is to perform atmospheric measurements with high spatio-temporal resolution, to be used for air quality, ozone & UV radiation, and climate monitoring & forecasting.\nThere are different data products associated with the three levels of TROPOMI processing: Level-0, Level-1B and Level-2.   The table below indicates for each type of user level product, the access type (IAD or DAD), the spatial and temporal extent of the offer and from when the data will be available in the Copernicus Data Space Ecosystem. The table includes as well an overview of the planned Sentinel engineering data availability.\n\n\n\n\n\n\nProduct Type\nFile Description\nData Access Type\nSpatial Extent\nTemporal Extent\nMore Information\nAvailable from\n\n\n\n\nLevel-1B NTC (Non Time Critical)\npacked or unpacked\nIAD (Immediately available data)\nWorld\nApr-18 - Present\nDetails\nJan-23\n\n\nLevel-2 NTC\npacked or unpacked\nIAD\nWorld\nApr-18 - Present\nDetails\nJan-23\n\n\nLevel-2 NRT(Near real Time)\npacked or unpacked\nIAD\nWorld\nLast 1 month\nDetails\nJan-23\n\n\nLevel-0(*)\npacked\nDAD\nWorld\nApr-18 - Present\nDetails\nJul-23\n\n\n\n(*) Access restrictions may apply."
  },
  {
    "objectID": "Applications/Browser.html",
    "href": "Applications/Browser.html",
    "title": "COPERNICUS DATA SPACE ECOSYSTEM DOCUMENTATION PORTAL",
    "section": "",
    "text": "The Browser is a web browser application that allows you to easily search, visualize, modify and download imagery from the Sentinel satellites. You can access the Browser at:\nhttps://dataspace.copernicus.eu/browser/\nCurrently you need a free account to use the Browser. To register for a free account, click here to the browser. A new window will open where you can click on New user? Click here to create an account and access the data. Once you have created the account, you will automatically be logged in to the Browser. Remember to save your login credentials for the next time you want to log in to the Browser.\n\n\n\nFigure 1: Browser start screen\n\n\nThe Browser window is divided into three parts:\n\nThe sidebar on the left side of the screen. Here you can set the parameters to search for, visualize and download data.\nThe map in the middle of the screen. Here you can zoom in and out and move around to find the place you are interest in. In this area you will see visualized satellite imagery or geometries of the products, that are the result of your search.\nThe toolbar on the right side of the screen. Here you find various tools (e.g., for measuring or downloading images) with which you can work with the data displayed on the map."
  },
  {
    "objectID": "Applications/Browser.html#visualizing-data",
    "href": "Applications/Browser.html#visualizing-data",
    "title": "COPERNICUS DATA SPACE ECOSYSTEM DOCUMENTATION PORTAL",
    "section": "Visualizing data",
    "text": "Visualizing data\nYou can find the VISUALIZE tab in the upper left corner of the sidebar (selected by default). The VISUALIZE tab will allow you to easily visualize satellite imagery on the map. Change or modify your visualization with just a few clicks.\n\nVisualizing data\nIn order to visualize data on the map, you need to zoom in to your area of interest. You can do this either with the mouse wheel or with the location search in the upper right corner.\nLet’s try to visualize the latest Sentinel-2 L2A imagery over Italy.\n\nEither zoom to Italy with the mouse wheel or type Italy in the search box in the upper right corner.\nIn the sidebar, a maximum cloud coverage of 30% and the product type Sentinel-2 L2A are already preselected. To visualize the latest available data with cloud coverage below 30% click on the Show latest date button. \n\n\n\nFigure 2: VISUALIZE tab with show latest date button and Sentinel-2 L2A collection highlighted\n\n\nFig 2: VISUALIZE tab with show latest date button and Sentinel-2 L2A collection highlighted\n\nYou can now see the latest data over Italy on the map. Depending on the latest data available you will see data from one or more orbits (stripes of images on the map).\n\nModifying and Changing a Visualization\nIf you want to improve how the data is displayed on the map, you can modify the visualization by clicking on Show effects and advanced options at the bottom of the sidebar. Change the Gain/Gamma values, the values of the R/G/B colour channels, specify which sampling method is used for the visualization (Layer default, Bilinear, Bicubic, Nearest) or click on Reset to reset all changes made. To return to the visualization layers overview, click on Show visualizations.\nTo visualize different Sentinel-2 band combinations, either use one of the prepared options from the list of layers (e.g., NDVI for the Normalized Difference Vegetation Index using the Sentinel bands B4 and B8) or click Custom at the bottom of the layers list.\n\nFig 3: Custom Layers option with Composite Index and Custom script highlighted\nHere you can create a custom R/G/B composite or Index (band ratio, normalized difference index) by dragging and dropping the Sentinel-2 bands into the appropriate circles or use the Custom script functionality to insert a piece of JavaScript code.\n\n\nComparing Visualizations\nTo compare two (or more) visualizations you must add them to the compare panel. You can add a visualization to the compare panel by clicking on the Add to compare button in each visualization layer (see Fig. 4). When you have added all the layers you want to compare to the compare panel, you can switch to it by clicking on the compare icon (  ). In the compare panel you can choose between a Split and an Opacity mode. With the Split mode you can compare two images side by side. With the Opacity mode you can compare two (or more) visualizations on top of each other.\n\nFig 4: Add to compare and compare icon\n\n\n\nProduct Search for Current Visualization\nWhen you are visualizing data (chapter Visualizing data), you can easily find the products associated with the data you see on the map. The product allows you to inspect the full metadata and easily download the raw data. To find connected products, just click the Find products for current view button in the sidebar (under the Show latest date button).\n\nFig 5: Add to compare and compare icon"
  },
  {
    "objectID": "Applications/Browser.html#product-search",
    "href": "Applications/Browser.html#product-search",
    "title": "COPERNICUS DATA SPACE ECOSYSTEM DOCUMENTATION PORTAL",
    "section": "Product Search",
    "text": "Product Search\nWith the product search you can find products from four Sentinel missions (Sentinel-1, Sentinel-2, Sentinel-3, Sentinel-5p) and the sensors on board these satellites (C-SAR, MSI, OLCI, SRAL, SLSTR, SYNERGY). You can explore the metadata for each of those products, download the raw data or visualize the data on the map (currently only Sentinel-2 L1C and L2A are supported, but more data sources will be supported here in the future).\nThe SEARCH tab is located in the sidebar next to the VISUALIZE tab (see Fig. 6).\n\nFig 6: SEARCH tab with different Data Sources, Time range and Search button\n\nHow to find a Product\nTo find products you can either use the keyword search (text input) or select one or more data sources using the checkboxes. To find products for a specific time range only, set the from/to date in the date input boxes. For example, let us find the latest Sentinel-2 L2A image over Italy for the beginning of 2023.\n\nZoom in on Italy on the map with the scroll wheel of your mouse.\nSelect Sentinel-2 > MSI (selected by default) > L2A.\nSet the Time Range to reflect two weeks (e.g., 2023-01-02, 2023-01-16)\n\n\nFig. 7: SEARCH tab with L2A collection selected and map centred on Rome (Italy)\n\nPress the Search button\n\nYou will now see the first 50 search results for your search settings (Sentinel L2A data over Italy for a time range of 2 weeks) in the sidebar and on the map. To load the next 50 results, click on the Load more button at the end of the list in the sidebar. You can view the metadata of a product in the sidebar or by selecting a product on the map. In both cases you can:\n\nDirectly view the basic metadata (preview image (available for most Sentinel-2 L1C, L2A, Sentinel-3 SLSTR and Sentinel-3 OLCI products), name, mission, instrument, acquisition time)\nView the full metadata by clicking on the product info button ( ) in the results (full metadata)\n\n\n\nHow to download a Product\nWhen you have found a product (see How to find a Product) that you would like to download, you can do so by clicking click on the download icon (  ) for the desired product in the results (in the sidebar or in the results panel on the map after selecting a product). After you click the button, a progress bar will appear below the product to indicate the status of your download. If you have started a download by mistake, you can cancel it by clicking on the “x” below the download button.\nYou can continue to use the app as normal while a product is being downloaded.\n\nFig. 8: Product download (in progress) with Download product and cancel button highlighted"
  },
  {
    "objectID": "Applications/Browser.html#tools",
    "href": "Applications/Browser.html#tools",
    "title": "COPERNICUS DATA SPACE ECOSYSTEM DOCUMENTATION PORTAL",
    "section": "Tools",
    "text": "Tools\nThe Browser has several tools to help you better understand the data on the map and prepare it for sharing with others. These tools can be found in the upper right corner of the Browser. They can help you select the Area of Interest, measure, download the image, create a timelapse if you want to observe the area over a longer period of time, or analyse the statistics of an index (e.g., the NDVI).\n\nArea/Point of Interest\nUse the Area of Interest (AOI) tool to draw a rectangular or polygonal area of interest by clicking on the  icon in the upper right corner of the browser. You can also upload a KML/KMZ, GPX, WKT (in EPSG:4326) or GEOJSON/JSON file to create an area of interest.\nUse the  icon to mark a location and re-centre to the Point of Interest(PoI)\n\n\nMeasure\nYou can use the Measure tool by clicking on the  icon to get the distance and area measurements. To measure the distance between two points, simply click on the start and end points on the map, to measure the area, draw a polygon (areas can also be measured using the AOI drawing, as described in Area/Point of Interest).\n\n\nImage Download\nThere are three different download options. You can switch between the options using the tabs at the top of the pop-up window. Each option contains a preview of the data at the bottom. When you are satisfied with your download settings, you will find the  button below the preview:\n\nBasic\n\nYou can use the Show Captions toggle switch to add data source, date, zoom scale and branding information to the exported images.\nYou can also use the Add Map Overlays toggle switch to add place labels, streets and political boundaries to the image or the Show Legend toggle switch to add the legend data.\nYou can use the Crop to AOI toggle switch to crop the image to the bounds of area of interest, if drawn previously.\nIf you want to download the entire image but highlight the AOI, it can be done by enabling the Draw AOI Geometry.\nUse the textbox to add a short description to the exported image.\nChoose between two image formats (JPG, PNG).\nA preview of the image that will be downloaded is displayed under Preview. Previews are available only when you zoom in enough.\n\nAnalytical\n\nAfter preparing the data for download, click the  button to download the image in JPG, PNG, KMZ or GeoTIFF format.\nChoose between different image formats, resolutions and coordinate systems before downloading the image. You can also attach a logo.\nIn the Analytical panel, you can select multiple layers (Visualized/Raw) and download them all in a single ZIP file.\n\nHigh-res print\n\nPrepare the selected visual for high-resolution printing by manually selecting a format, size and DPI. Add captions, legends and descriptions as needed.\n\n\n\n\nTimelapse\n\nYou can create a Timelapse Animation by clicking the  icon.\nSelect the Area of Interest by zooming in or out. When you are satisfied with the scene, click on the play button in the middle of the screen for more options.\nSelect the time span in the upper left corner of the pop-up window. Alternatively, you can select only certain months in a year using the filter by months option. You can also select the interval between images. Click on Search to see all the results.\nYou can filter the images by two methods: Minimum tile coverage and Maximum Cloud coverage. You can select the percentage of cover for each of those filters by adjusting the slider.\nYou can either select all the images or choose the images manually. Once you have the list of images you want to display in the timelapse, select the speed, and transition to prepare your timelapse.\nDownload the video by clicking on the Download button.\n\n\nHistogram\nWith the Histogram tool you can display statistical data (the distribution of values) for specific layers by clicking on the  icon. The histogram is calculated for the data within your AOI, if defined or otherwise for the whole screen. This tool currently only works for index layers (e.g., the NDVI)."
  },
  {
    "objectID": "Data.html",
    "href": "Data.html",
    "title": "COPERNICUS DATA SPACE ECOSYSTEM DOCUMENTATION PORTAL",
    "section": "",
    "text": "This section provides an overview of the EO data available from Copernicus Data Space Ecosystem.\nThe data offer will gradually extend starting from January 2023"
  },
  {
    "objectID": "APIs/SentinelHub/Evalscript/Functions.html",
    "href": "APIs/SentinelHub/Evalscript/Functions.html",
    "title": "Utility Functions",
    "section": "",
    "text": "Visualizers are JavaScript classes with a method process which evaluates the representation value for a pixel from pixel’s band values.\n\n\nSets the color from a discrete color map.\n\n\n\nvalColPairs Array<[number, number]>\n\n\n\n\nconst map = [\n  [200, 0xff0000],\n  [300, 0x0000ff ],\n];\n\nconst visualizer = new ColorMapVisualizer(map);\nvisualizer.process(199); // returns [ 1, 0, 0 ]\nvisualizer.process(200); // returns [ 1, 0, 0 ]\nvisualizer.process(250); // returns [ 1, 0, 0 ]\nvisualizer.process(299); // returns [ 1, 0, 0 ]\nvisualizer.process(300); // returns [ 0, 0, 1 ]\n\n\n\nReturns interpolated color for value.\n\n\n\nval number\n\nReturns [number, number, number] normalized RGB triplet.\n\n\n\n\nCreates ColorMapVisualizer with following valColPairs\n[\n  [-1.0, 0x000000],\n  [-0.2, 0xff0000],\n  [-0.1, 0x9a0000],\n  [0.0, 0x660000],\n  [0.1, 0xffff33],\n  [0.2, 0xcccc33],\n  [0.3, 0x666600],\n  [0.4, 0x33ffff],\n  [0.5, 0x33cccc],\n  [0.6, 0x006666],\n  [0.7, 0x33ff33],\n  [0.8, 0x33cc33],\n  [0.9, 0x006600]\n]\n\n\n\n\nInterpolates a color based on interval.\n\n\n\nvalColPairs Array<[number, number]>\nminVal number (optional, default 0.0)\nmaxVal number (optional, default 1.0)\n\n\n\n\nReturns interpolated color for value.\n\n\n\nval number\n\nReturns [number, number, number] normalized RGB triplet.\n\n\n\n\nCreates ColorGradientVisualizer with valColPairs redTemperature\n\n\n\nminVal number min value of interval\nmaxVal number max value of interval\n\n\n\n\nconst visualizer = ColorGradientVisualizer.createRedTemperature(0.0, 1.0);\nvisualizer.process(0.0); // returns [ 0, 0, 0 ]\nvisualizer.process(0.3); // returns [ 0.43137254901960786, 0, 0 ]\nvisualizer.process(0.5); // returns [ 0.7176470588235294, 0.047058823529411764, 0 ]\nvisualizer.process(0.8); // returns [ 1, 0.6196078431372549, 0.2 ]\nvisualizer.process(1.0); // returns [ 1, 1, 1 ]\nReturns ColorGradientVisualizer\n\n\n\n\nCreates ColorGradientVisualizer with valColPairs greenWhite\n\n\n\nminVal number min value of interval\nmaxVal number max value of interval\n\n\n\n\nconst visualizer = ColorGradientVisualizer.createWhiteGreen(0.0, 1.0);\nvisualizer.process(0.0); // returns [ 0, 0, 0 ]\nvisualizer.process(0.3); // returns [ 0, 0.2980392156862745, 0 ]\nvisualizer.process(0.5); // returns [ 0.16862745098039217, 0.5019607843137255, 0 ]\nvisualizer.process(0.8); // returns [ 0.6666666666666666, 0.8, 0.3333333333333333 ]\nvisualizer.process(1.0); // returns [ 1, 1, 1 ]\nReturns ColorGradientVisualizer\n\n\n\n\nCreates ColorGradientVisualizer with valColPairs blueRed\n\n\n\nminVal number min value of interval\nmaxVal number max value of interval\n\n\n\n\nconst visualizer = ColorGradientVisualizer.createBlueRed(0.0, 1.0);\nvisualizer.process(0.0); // returns [ 0, 0, 0.5019607843137255 ]\nvisualizer.process(0.3); // returns [ 0, 0.7019607843137254, 1 ]\nvisualizer.process(0.5); // returns [ 0.5019607843137255, 1, 0.5019607843137255 ]\nvisualizer.process(0.8); // returns [ 1, 0.2980392156862745, 0 ]\nvisualizer.process(1.0); // returns [ 0.5019607843137255, 0, 0 ]\nReturns ColorGradientVisualizer\n\n\n\n\n\nInterpolates a color based on the given color ramps.\n\n\n\nramps Array<[number, number]> Array of color ramps, which are defined as a pair of numbers - the ramp start and the ramp starting color.\n\n\n\n\nconst ramps = [\n  [200, 0xff0000],\n  [300, 0x0000ff ],\n];\n\nconst visualizer = new ColorRampVisualizer(ramps);\nvisualizer.process(199); // [ 1, 0, 0 ]\nvisualizer.process(200); // [ 1, 0, 0 ]\nvisualizer.process(250); // [ 0.5019607843137255, 0, 0.5019607843137255 ]\nvisualizer.process(299); // [ 0.011764705882352941, 0, 0.9882352941176471 ]\nvisualizer.process(300); // [ 0, 1, 0 ]\n\n\n\nReturns interpolated color for value.\n\n\n\nvalue number\n\nReturns [number, number, number] normalized RGB triplet.\n\n\n\n\n\nThis is a piecewise linear function which compresses highlights. The minValue and maxValue will be mapped inside the interval [ 0, 1 ]. However, if maxValue lies in (0, 1) a second function which increases much more slowly will be used to further map the values which are mapped to 0.92 and above (see the figure below). This increases the visualized dynamic range while keeping most of the interval of interest linear. Useful, for example, for true color, with a maxValue of 0.4 to still keep some detail in clouds.\n\n\n\n\n\nPiecewise linear function which compresses highlights\n\n\n\n\n\nminValue number the value which will be mapped to 0. All values smaller than minValue will also be mapped to 0. (optional, default 0.0)\nmaxValue number the value which controls the position of the boundary point between both linear functions. It will be mapped to approx. 0.9259, while values greater than or equal to (2*maxValue - minValue) will be mapped to 1 (see the figure above). (optional, default 1.0)\ngain (optional, default 1.0)\noffset (optional, default 0.0)\ngamma (optional, default 1.0)\n\n\n\n\nconst visualizer = new HighlightCompressVisualizer(0.1, 0.4)\n\nvisualizer.process(0); // will return 0\nvisualizer.process(0.1); // will return 0\nvisualizer.process(0.25); // will return 0.5\nvisualizer.process(0.376); // will return 0.92. Note: 0.376 = minValue + 0.92*(maxValue - minValue)\nvisualizer.process(0.4); // will return 0.9259\nvisualizer.process(0.7); // will return 1 Note: 0.7 is the smallest value mapped to 1.\nvisualizer.process(1.1); // will return 1\n\n\n\nReturns mapped value.\n\n\n\nval number the input value to be mapped.\ni number the index of val. This is EO Browser specific.\n\nReturns [number] mapped value."
  },
  {
    "objectID": "APIs/SentinelHub/Evalscript/Functions.html#helper-functions",
    "href": "APIs/SentinelHub/Evalscript/Functions.html#helper-functions",
    "title": "Utility Functions",
    "section": "Helper functions",
    "text": "Helper functions\nHelper functions that can be used in custom scripts.\n\nint2rgb\nTransforms a color as integer into RGB triplet.\n\nParameters\n\ncolor number as integer\n\n\n\nExamples\nint2rgb(255);    // returns [ 0, 0, 255 ]\nint2rgb(256);    // returns [ 0, 1, 0 ]\nint2rgb(65537);  // returns [ 1, 0, 1 ]\nReturns [number, number, number]\n\n\n\nrgb2int\nInverse of the int2rgb function. Transforms a RGB triplet into integer.\n\nParameters\n\ncolor [number, number, number] as RGB triplet\n\n\n\nExamples\nrgb2int([0, 0, 255]);  // returns 255\nrgb2int([0, 1, 0]);    // returns 256\nrgb2int([1, 0, 1]);    // returns 65537\nReturns number\n\n\n\ncombine\nCombines two colors.\n\nParameters\n\ncolor1 number The first color defined as an array of values.\ncolor2 number The second color defined as an array of values.\nalpha number A share of the first color defined as a floating point between 0 and\n\n\n\n\n\n\nExamples\ncombine([100, 0, 0], [0, 100, 0], 1);   // returns [ 100, 0, 0 ]\ncombine([100, 0, 0], [0, 100, 0], 0);   // returns [ 0, 100, 0 ]\ncombine([100, 0, 0], [0, 100, 0], 0.5); // returns [ 50, 50, 0 ]\nReturns number The combined color defined as an array of values.\n\n\n\nindex\nCalculate difference divided by sum\n\nParameters\n\nx number first value\ny number second value\n\n\n\nExamples\nindex(0.6, 0.4); // returns 0.2\nindex(0.5, -0.5); //returns 0.0\nReturns number (x - y) / (x + y), if sum is 0 returns 0\n\n\n\ninverse\nCalculate inverse value\n\nParameters\n\nx number value\n\n\n\nExamples\ninverse(2.0); // returns 0.5\ninverse(5.0); // returns 0.2\ninverse(0); // returns 1.7976931348623157E308\nReturns number inverse of value of x (1 / x), if x is 0 returns JAVA_DOUBLE_MAX_VAL\n\n\n\nvalueMap\nMaps a value to another value bound by an interval (from,to].\nintervals = [-10, -5, 0, 5, 10], values = [-100,-50, 0, 50, 100]\ndefines the following mapping:\n(-inf, -10]  => -100\n(-10, -5] => -50\n(-5,0] => 0\n(0, 5] => 50\n(5, +inf) => 100\n\nParameters\n\nvalue number input value\nintervals [number] array of numbers in ascending order defining intervals\nvalues [number] output value for the given interval\n\n\n\nExamples\nvalueMap(5, [1, 3, 5, 7, 10], [100, 300, 500, 700, 900]); // returns 500\nvalueMap(1, [1, 3, 5, 7, 10], [100, 300, 500, 700, 900]); // returns 100\nvalueMap(2, [1, 3, 5, 7, 10], [100, 300, 500, 700, 900]); // returns 300\nvalueMap(12, [1, 3, 5, 7, 10], [100, 300, 500, 700, 900]); // returns 900\nvalueMap(50); // returns 50\nReturns number\n\n\n\nvalueInterpolate\nInterpolates a value to another value bound by an interval (from,to]. Values at far ends of defined intervals are clamped to min/max value. This function is a replacement for the deprecated colorBlend function.\nintervals = [-10, -5, 0, 5, 10], values = [-1000,-50, 0, 50, 1000]\ndefines the following mapping:\n(-inf, -10]  => -1000\n(-10, -5] => (-1000, -50]\n(-5,0] => (-50,0]\n(0, 5] => (0,50]\n(5, 10] => (50,1000]\n(10, +inf) => 1000\n\nParameters\n\nvalue number input value\nintervals Array<number> array of numbers in ascending order defining intervals\nvalues (Array<number> | Array<Array<number>>) output interval for the given value/interval of the intervals array\n\n\n\nExamples\nvalueInterpolate(0, [-10, -5, 0, 5, 10], [-1000,-50, 0, 50, 1000]); // returns 0\nvalueInterpolate(-10, [-10, -5, 0, 5, 10], [-1000,-50, 0, 50, 1000]); // returns -1000\nvalueInterpolate(9, [-10, -5, 0, 5, 10], [-1000,-50, 0, 50, 1000]); // returns 810\nvalueInterpolate(50); // returns 50\nvalueInterpolate(0.1, [0, 0.2, 0.4, 0.6, 0.8, 1], [\n  [0, 0, 0],\n  [0.1, 0.2, 0.5],\n  [0.25, 0.4, 0.5],\n  [0.4, 0.6, 0.5],\n  [0.75, 0.8, 0.5],\n  [1, 1, 0.5]\n]); // return [0.05, 0.1, 0.25]\nReturns (number | Array<number>)"
  },
  {
    "objectID": "APIs/SentinelHub/Evalscript/Functions.html#constants",
    "href": "APIs/SentinelHub/Evalscript/Functions.html#constants",
    "title": "Utility Functions",
    "section": "Constants",
    "text": "Constants\n\nJAVA_DOUBLE_MAX_VAL\n const JAVA_DOUBLE_MAX_VAL = 1.7976931348623157E308;\nType: number\n\n\nblueRed\nconst blueRed = [\n  [1.000, 0x000080],\n  [0.875, 0x0000FF],\n  [0.625, 0x00FFFF],\n  [0.375, 0xFFFF00],\n  [0.125, 0xFF0000],\n  [0.000, 0x800000]\n]\nType: Array<[number, number]>\n\n\nredTemperature\nconst redTemperature = [\n  [1.000, 0x000000],\n  [0.525, 0xAE0000],\n  [0.300, 0xFF6E00],\n  [0.250, 0xFF8600],\n  [0.000, 0xFFFFFF]\n]\nType: Array<[number, number]>\n\n\ngreenWhite\nconst greenWhite = [\n  [1.000, 0x000000],\n  [0.600, 0x006600],\n  [0.300, 0x80B300],\n  [0.000, 0xFFFFFF]\n]\nType: Array<[number, number]>"
  },
  {
    "objectID": "APIs/SentinelHub/Evalscript/Functions.html#colorblend",
    "href": "APIs/SentinelHub/Evalscript/Functions.html#colorblend",
    "title": "Utility Functions",
    "section": "colorBlend",
    "text": "colorBlend\n\nParameters\n\nvalue number input value\nlimits Array<number> array of numbers in ascending order defining intervals\ncolors (Array<number> | Array<Array<number>>) output interval for the given value/interval of the intervals array\n\nReturns (number | Array<number>)\nMeta\n\ndeprecated: See valueInterpolate"
  },
  {
    "objectID": "APIs/SentinelHub/Evalscript/Functions.html#landsat8c2qabandconditions",
    "href": "APIs/SentinelHub/Evalscript/Functions.html#landsat8c2qabandconditions",
    "title": "Utility Functions",
    "section": "Landsat8C2QaBandConditions",
    "text": "Landsat8C2QaBandConditions\nCloud confidence, cloud shadow confidence, snow ice confidence and cirrus confidence represent levels of confidence that a condition exists:\n\n0 = “Not Determined”\n1 = “Low” = Low confidence.\n2 = “Medium / Reserved” = Medium only for cloud confidence.\n3 = “High” = High confidence.\n\nType: Object\n\nProperties\n\nfill number 0 for image data, 1 for fill data\ndilatedCloud number 0 for cloud is not dilated or no cloud, 1 for cloud dilation\ncirrus number 0 for no confidence level or low confidence, 1 for high confidence cirrus\ncloud number 0 for cloud confidence is not high, 1 for high confidence cloud\ncloudShadow number 0 for cloud shadow confidence is not high, 1 for high confidence cloud shadow\nsnow number 0 for snow/ice confidence is not high, 1 for high confidence snow cover\nclear number 0 if cloud or dilated cloud, or else 1\nwater number 0 for land or cloud, 1 for water\ncloudConfidence number\ncloudShadowConfidence number\nsnowIceConfidence number\ncirrusConfidence number"
  },
  {
    "objectID": "APIs/SentinelHub/Evalscript/Functions.html#decodel8c2qa",
    "href": "APIs/SentinelHub/Evalscript/Functions.html#decodel8c2qa",
    "title": "Utility Functions",
    "section": "decodeL8C2Qa",
    "text": "decodeL8C2Qa\nDecodes Landsat 8 Collection 2 Quality Assessment band conditions.\n\nParameters\n\nvalue integer band pixel (16-bit value)\n\n\n\nExamples\ndecodeL8C2Qa(55052);\n// returns {\n//   cirrus: 1, cirrusConfidence: 3,\n//   clear: 0,\n//   cloud: 1,\n//   cloudConfidence: 3,\n//   cloudShadow: 0,\n//   cloudShadowConfidence: 1,\n//   dilatedCloud: 0,\n//   fill: 0,\n//   snow: 0,\n//   snowIceConfidence: 1,\n//   water: 0\n// }\nReturns Landsat8C2QaBandConditions"
  },
  {
    "objectID": "APIs/SentinelHub/Evalscript/Functions.html#decodes3olciqualityflags",
    "href": "APIs/SentinelHub/Evalscript/Functions.html#decodes3olciqualityflags",
    "title": "Utility Functions",
    "section": "decodeS3OLCIQualityFlags",
    "text": "decodeS3OLCIQualityFlags\nUnpacks bit-packed Sentinel 3 OLCI Quality Flags values.\n\nParameters\n\nvalue integer QUALITY_FLAGS band DN value (32-bit value)\n\nReturns object An object containing the following keys with either 0 or 1 values: land, coastline, fresh_inland_water, tidal_region, bright, straylight_risk, invalid, cosmetic, duplicated, sun_glint_risk, dubious, saturatedBxy (where xy is the band number, e.g. saturatedB01)."
  },
  {
    "objectID": "APIs/SentinelHub/Evalscript/V3.html",
    "href": "APIs/SentinelHub/Evalscript/V3.html",
    "title": "Evalscript V3",
    "section": "",
    "text": "Start your evalscript with //VERSION=3 so the system will interpret it as such.\nFor evalscript V3 you need to specify two functions (described in detail below):\nThis is an example of a simple V3 evalscript which returns a true color image:"
  },
  {
    "objectID": "APIs/SentinelHub/Evalscript/V3.html#setup-function",
    "href": "APIs/SentinelHub/Evalscript/V3.html#setup-function",
    "title": "Evalscript V3",
    "section": "setup function",
    "text": "setup function\nThis function is required as it sets up the input and output settings.\n\nSpecifics\nSetup needs to return a javascript object with the following properties:\n\ninput - an array of strings representing band names or an array of input objects.\noutput - a single output object or an array of output objects.\nmosaicking (optional) -  defines input sample preparation, see mosaicking. Defaults to SIMPLE.\n\n\nInput object properties\n\nbands - an array of strings representing band names\nunits (optional) - a string (all bands will use this unit) or an array of strings listing the units of each band. For a description of units see the documentation of the collection you are querying. Defaults to the default units for each band.\nmetadata (optional) - an array of strings representing properties which can be added to the metadata. Options:\n\n\"bounds\" - specifying this will add dataGeomtery and dataEnvelope to tiles\n\n\n\n\nOutput object properties\n\nid (optional) - any string of your choosing. Must be unique if multiple output objects are defined. Defaults to default.\nbands - the number of bands in this output.\nsampleType (optional) - sets the SampleType constant defining the returned raster sample type. Defaults to AUTO.\nnodataValue (optional) - sets the GDAL nodata metadata tag to the specified value. Only applicable for tiff files.\n\nNote that the number of bands represent the number of components in the output image. JPEG and PNG, for example, can only support 1 or 3 color components (plus an alpha channel for PNG, if set). The sampleType also needs to be compatible with the output raster format.\n\n\nMosaicking\nMosaicking defines how the source data is mosaicked. Not all collections support all these mosaicking types as it depends on how the source data is distributed. See the collection information pages to determine which ones are supported. It is a constant which is specified by a string. To use, for example, set: mosaicking: \"SIMPLE\".\n\nSIMPLE (default) - the simplest method, it flattens the mosaicked image so only a single sample is passed to evaluation. \nORBIT - the mosaicked image is flattened for each orbit so that there is only one sample per pixel per orbit. Multiple samples can therefore be present if there is more than one orbit for the selected time range at the pixel location.\nTILE - this is essentially the unflattened mosaic. It contains all data available for the selected time range. Multiple samples can be present as each sample comes from a single scene. What a scene is is defined by the datasource. \n\n\n\n\n\n\n\nNote\n\n\n\nORBIT mosaicking currently does not work exactly as described but generates a single scene for each day containing satellite data. For most requests this should not be an issue, however high latitude regions may have more than one acquisition per day. For these consider using TILE mosaicking if getting all available data is paramount. This will be corrected in future releases.\n\n\n\n\nSampleType\nSampleType defines the sample type of the output raster. This needs to be compatible with the raster format (e.g. JPEG cannot be FLOAT32). It is a constant which is specified by a string. To use, for example, set: sampleType: \"AUTO\".\n\nINT8 - signed 8-bit integer (values should range from -128 to 127)\nUINT8 - unsigned 8-bit integer (values should range from 0 to 255)\nINT16 - signed 16-bit integer (values should range from -32768 to\n\n\n\nUINT16 - unsigned 16-bit integer (values should range from 0 to\n\n\n\nFLOAT32 - 32-bit floating point (values have effectively no limits)\nAUTO (default) - values should range from 0-1, which will then automatically be stretched from the interval [0, 1] to [0, 255] and written into an UINT8 raster. Values below 0 and above 1 will be clamped to 0 and 255, respectively. This is the default if sampleType is not set in the output object.\n\nHandling SampleType in an Evalscript\nIt is the responsibility of the evalscript to return the values in the interval expected for the chosen sampleType. For integer SampleTypes, any floating point values will be rounded to the nearest integer and clamped to the value range of the SampleType. There is no need to do this yourself. For example, in case of UINT8 output, a value of 40.6 will be saved as 41, and a value of 310 will be saved as 255. If no sampleType is specified, AUTO is selected and the evalscript should return values ranging from 0-1. This is convenient as handling reflectance (e.g. Sentinel-2) data can be more intuitive.\n\n\n\nExamples\nThis simple Sentinel-2 setup() function gets bands B02, B03, B04 and returns (UINT16) 16 bit unsigned raster values.\nfunction setup() {\n  return {\n    input: [{\n      bands: [\"B02\", \"B03\", \"B04\"], // this sets which bands to use\n      units: \"DN\" // here we optionally set the units. All bands will be in this unit (in this case Digital numbers)\n    }],\n    output: { // this defines the output image type\n      bands: 3, // the output of this evalscript will have RGB colors\n      sampleType: \"UINT16\" // raster format will be UINT16\n    }\n  };\n}\nThis Sentinel-2 setup() function gets bands B02, B03, B04 and returns a single raster with 8-bit integer values. To return values in the correct interval for the UINT8 sampleType, the evaluatePixel() function multiplies the reflectance values by 255. A true color image is returned.\nfunction setup() {\n  return {\n    input: [{\n      bands: [\"B02\", \"B03\", \"B04\"], // this sets which bands to use\n    }],\n    output: {\n      bands: 3,\n      sampleType: \"UINT8\" // raster format will be UINT8\n    }\n  };\n}\nfunction evaluatePixel(sample) {\n  return [sample.B04 * 255, sample.B03 * 255, sample.B02 * 255]; // bands need to be multiplied by 255\n}\nIn case of UINT16, the multiplication factor in evaluatePixel() would be 65535 instead of 255.\nThe following example uses bands with different units and produces two rasters:\nfunction setup() {\n    return {\n      input: [{\n          bands: [\"B02\", \"B03\", \"B04\", \"B08\"],\n          units: [\"reflectance\", \"reflectance\", \"reflectance\", \"DN\"] // B08 will be in digital numbers, the rest reflectance\n      }],\n      output: [{ // this is now an array since there are multiple output objects\n          id: \"rgb\"\n          bands: 3\n      }, {\n          id: \"falseColor\"\n          bands: 3\n      }]\n    }\n}"
  },
  {
    "objectID": "APIs/SentinelHub/Evalscript/V3.html#evaluatepixel-function",
    "href": "APIs/SentinelHub/Evalscript/V3.html#evaluatepixel-function",
    "title": "Evalscript V3",
    "section": "evaluatePixel function",
    "text": "evaluatePixel function\nThe evaluatePixel function is a mapping which maps the input bands in their input units to the values in the output raster(s). The function is executed once for each output pixel.\n\nParameters\nThe evaluatePixel function has five positional parameters:\nfunction evaluatePixel(samples, scenes, inputMetadata, customData, outputMetadata)\nThe first two parameters can be objects or arrays depending on requested mosaicking as explained below. They are additionally changed for data fusion requests, which is documented separately here. The remaining parameters are always objects.\n\nsamples\n\nWhen mosaicking is SIMPLE:\n\nsamples - an object containing the band values of the single mosaicked sample, in the specified units, as its properties. The property names equal the names of all the input bands, pixel values of a band can be accessed as e.g. samples.B02.\n\n\n\n\n\n\n\n\nNote\n\n\n\nWhen using mosaicking SIMPLE we usually call this parameter sample in our examples to emphasize that it is an object and not an array.\n\n\n\nWhen mosaicking is TILE or ORBIT:\n\nsamples - an array of samples as defined in the SIMPLE case. None*, one or multiple samples can therefore be present depending on how many orbits/tiles there are for the selected time range and area of interest. Pixel values of a band can be accessed for each sample as an item of the array, e.g. samples[0].B02.\n\n\n*NOTE: In case samples is an empty array, calling samples[0].B02 will raise an error and it is up to users to handle this in their evalscript.\n\n\nscenes\n\nWhen mosaicking is SIMPLE:\n\nscenes object is empty.\n\nWhen mosaicking is ORBIT:\n\nscenes - an object containing a property orbits. scenes.orbits is an array of objects, where each of them contains metadata for one orbit (day). The length of scenes.orbits array is always the same as the length of samples array. A property, for example dateFrom, can be accessed as scenes.orbits[0].dateFrom. Each object's properties include:\n\ndateFrom (string) - ISO date and time in \"YYYY-MM-DDTHH:MM:SSZ\" format. Together with orbits.dateTo it represents the time interval of one day. All tiles acquired on this day are mosaicked into this scene.\ndateTo (string) - ISO date and time in \"YYYY-MM-DDTHH:MM:SSZ\" format. Together with orbits.dateFrom it represents the time interval of one day. All tiles acquired on this day are mosaicked into this scene.\ntiles (array) - an array of metadata for each tile used for mosaicking of this orbit. Each element has the same properties as elements of scenes.tiles (listed just below for mosaicking TILE).\n\n\nWhen mosaicking is TILE:\n\nscenes - an object containing a property tiles. scenes.tiles is an array of objects, where each of them contains metadata for one tile. The length of scenes.tiles array is always the same as the length of samples array. A property, for example cloudCoverage, can be accessed as scenes.tiles[0].cloudCoverage. Which properties are available for each tiles element depends on requested data and is documented in the \"Scenes Object\" chapter for each data collection, e.g. here for Sentinel-2 L1C. All possible properties are:\n\ndate (string) - ISO date and time in \"YYYY-MM-DDTHH:MM:SSZ\" format. It represents a date when the tile was acquired.\ncloudCoverage (number) - Estimated percentage of pixels covered by clouds in the tile. This field is not available for all data collections. A value 2.09 means that 2.09% of pixels in the tile are cloudy.\ndataPath (string) - Path to where the tile is stored on a cloud. For example \"s3://sentinel-s2-l2a/tiles/33/T/VM/2020/9/15/0\".\ntileOriginalId (string) - Original filename of the tile or (in case of Sentinel-3 and -5p) a relative path containing the original filename. For example \"S2A_OPER_MSI_L2A_TL_VGS2_20200915T130644_A027332_T33TVM_N02.14\".\ndataGeometry (geojson - like object, see example) - an optional property, added only when requested. Represents a geometry of data coverage within the tile.\ndataEnvelope (geojson - like object, see example) - an optional property, added only when requested. Represents a bbox of dataGeometry.\nshId (number) - Sentinel Hub internal identifier of the tile. For example 11583048.\n\n\n\nNOTE 1: Objects may contain also fields prefixed by __ (double underscore). Such fields are used internally by Sentinel Hub services. Evalscripts should not make use of them because they can be changed or removed at any time and must never modify or delete such fields. Doing so may cause your request to fail or return incorrect results.\nNOTE 2: In the first implementation, scenes was an array of objects, where each of them contained metadata for one orbit or tile (depending on selected mosaicking). It was possible to access metadata as e.g. scenes[0].date. This approach is now deprecated and we strongly advise to use scenes as described above.\n\n\ninputMetadata\ninputMetadata is an object containing metadata used for processing by Sentinel Hub. Its properties are:\n\nserviceVersion - the version of Sentinel Hub which was used for processing.\nnormalizationFactor - the factor used by Sentinel Hub to convert digital numbers (DN) to reflectance using REFLECTANCE = DN * normalizationFactor. This is useful when requesting bands for which both units - DN and REFLECTANCE - are supported.\n\n\n\ncustomData\ncustomData is an object reserved for possible future use.\n\n\noutputMetadata\noutputMetadata is an object which can be used to output any user defined metadata including passing scenes objects, user defined thresholds or ids of original tiles used for processing. It contains:\n\nuserData - is a property to which you can assign a generic object that can contain any data. This can be pushed to the API response by adding a userdata identified output response object to your API request (see this for details or an example here).\n\n\n\n\nReturns\nThe evaluatePixel function can return:\n\nAn object whose keys are the output ids and its values are arrays of numbers. The length of the array is bound by the output object bands number and the values by sampleType.\nAn array of numbers with the same rules as above. This option can be used only when a single image output is defined.\nNothing; the return statement is not specified. This is useful when only information in outputMetadata.userData is needed.\n\n\nInput Units and Output Values\nThe values of each sample is the units specified in the input object. See the input object documentation for more information. How the output values are written to the output raster depends on the sample type. AUTO will stretch values in the interval [0, 1] to [0, 255] and then write those values into an UINT8 raster. The remaining sample types expect values within the range of the sample format.\n\n\n\nExamples\nExample evaluatePixel script returns a simple True Color image based on bands B04, B03, B02:\nfunction evaluatePixel(sample) {\n  return [2.5 * sample.B04, 2.5 * sample.B03, 2.5 * sample.B02];\n}\nWhen we have multiple outputs in the setup function we can provide them as such:\nfunction evaluatePixel(sample) {\n  return {\n    trueColor: [2.5 * sample.B04, 2.5 * sample.B03, 2.5 * sample.B02],\n    falseColor: [2.5 * sample.B08, 2.5 * sample.B04, 2.5 * sample.B03]\n  };\n}\nCalculate the average value of band B04 when using ORBIT or TILE mosaicking:\nfunction evaluatePixel(samples) {\n  var sum = 0;\n  var nonZeroSamples = 0;\n  for (var i = 0; i < samples.length; i++) {\n    var value = samples[i].B04;\n    if (value != 0) {\n      sum += value;\n      nonZeroSamples++;\n    }\n  }\n  return [sum / nonZeroSamples];\n}"
  },
  {
    "objectID": "APIs/SentinelHub/Evalscript/V3.html#updateoutput-function-optional",
    "href": "APIs/SentinelHub/Evalscript/V3.html#updateoutput-function-optional",
    "title": "Evalscript V3",
    "section": "updateOutput function (optional)",
    "text": "updateOutput function (optional)\nThis function can be used to adjust the number of output bands. This is useful, for example, to request all observations in a given time period as bands of an output file. The function is executed after the setup and preProcessScenes functions but before the evaluatePixel.\n\nParameters\n\noutput - an object containing ids of all outputs and their number of bands as specified in the setup function (Note: This is not the same object as output in the setup function.). The number of bands of each output is stored under output.<output id>.bands where <output id> is equal to values in the setup.output object. For example:\n\n{\n    \"default\": {\n        \"bands\": 2\n    },\n    \"my_output\": {\n        \"bands\": 3\n    }\n}\n\ncollection - an object containing one array per requested data collection. The length of each array equals the number of scenes available for processing. If only one data collection is requested, use collection.scenes.length to get the number of available scenes. For data fusion requests, use collection.<data collection identifier>.scenes.length. Each element in an array has a property:\n\ndate (type Date) - the date when the corresponding scene was acquired.\n\n\n\n\nReturns\nThis function updates the number of output bands and does not return anything.\n\n\nExample\nSuppose we request sentinel-2-l1c data from January 2020 with a maximum of 50% cloud coverage. All of this is specified in the body of a request. We would then like to return all available scenes as bands of an output file. Since we generally do not know how many scenes are available, we can not set the number of output bands directly in a setup function. Using the updateOutput function we can get the number of available scenes from collection and assign it as the value of output.<output id>.bands:\n//VERSION=3\nfunction setup() {\n    return {\n        input: [{\n                bands: [\"B02\"],\n            }\n        ],\n        output: [{\n                id: \"my_output\",\n                bands: 1,\n                sampleType: SampleType.UINT16\n            }\n        ],\n        mosaicking: Mosaicking.ORBIT\n    }\n}\n\nfunction updateOutput(output, collection) {\n    output.my_output.bands = collection.scenes.length\n}\n\nfunction evaluatePixel(samples) {\n    var n_scenes = samples.length\n    let band_b02 = new Array(n_scenes)\n\n    // Arrange values of band B02 in an array\n    for (var i = 0; i < n_scenes; i++){\n        band_b02[i] = samples[i].B02\n    }\n\n    return {\n        my_output: band_b02\n    }\n}"
  },
  {
    "objectID": "APIs/SentinelHub/Evalscript/V3.html#updateoutputmetadata-function-optional",
    "href": "APIs/SentinelHub/Evalscript/V3.html#updateoutputmetadata-function-optional",
    "title": "Evalscript V3",
    "section": "updateOutputMetadata function (optional)",
    "text": "updateOutputMetadata function (optional)\nThis function is optional and if present is called at the end of evalscript evaluation. It provides a convenient way to forward information pertaining to the returned data as a whole (as opposed to evaluatePixel which is run for each pixel) into an output object. Do this by assigning any object you require to the userData property of the outputMetadata parameter.\n\nParameters\nThese are the full parameters of the updateOutputMetadata function:\nfunction updateOutputMetadata(scenes, inputMetadata, outputMetadata)\nSee description of parameters in the \"evaluatePixel function\" chapter:\n\nscenes - scenes\ninputMetadata - inputMetadata\noutputMetadata - outputMetadata"
  },
  {
    "objectID": "APIs/SentinelHub/Evalscript/V3.html#preprocessscenes-function-optional",
    "href": "APIs/SentinelHub/Evalscript/V3.html#preprocessscenes-function-optional",
    "title": "Evalscript V3",
    "section": "preProcessScenes function (optional)",
    "text": "preProcessScenes function (optional)\n\n\n\n\n\n\nNote\n\n\n\nThis function shall be used instead of filterScenes function.\n\n\nThis function is optional, and if present is called at the beginning of the script evaluation before the actual satellite data is processed. Use it when mosaicking is set to ORBIT or TILE. It provides additional filtering functionality for scenes, after the constraints set in the request parameters are already applied. This is useful, for example, to reduce the number of scenes needed, thereby reducing processing time and the number of processing units for the request.\n\nParameters\nThese are the full parameters of the preProcessScenes function:\nfunction preProcessScenes(collections)\n\ncollections\ncollections is an object, which contains different properties depending on which mosaicking option is selected.\n\nIf mosaicking is ORBIT, collections contains:\n\nfrom (type Date) - the value given as timeRange.from in the body of the request, representing the start of the search interval\nto (type Date) - the value given as timeRange.to in the body of the request, representing the end of the search interval\nscenes.orbits - corresponds to scenes.orbits as described for evalautePixel function and mosaicking ORBIT here but it doesn't contain tiles.\n\nIf mosaicking is TILE, collections contains:\n\nscenes.tiles - corresponds to scenes.tiles as described for evalautePixel function and mosaicking TILE here.\n\n\n\n\n\nReturns\nThe preProcessScenes function must return an objects of the same type as collections. Most often, a sub-set of the input collections will be returned, e.g. to keep only the data acquired before 1.2.2019:\nfunction preProcessScenes(collections){\n    collections.scenes.orbits = collections.scenes.orbits.filter(function (scene) {\n        return new Date(scene.dateFrom) < new Date(\"2019-02-01T00:00:00Z\")\n    });\n    return collections\n}\n\n\nExamples\n\nFilter scenes by particular days\nIn this example, we use preProcessScenes function to select images acquired on two particular dates within the requested timeRange. This example was taken (and adopted) from the evalscript for delineation of burned areas, based on the comparison of Sentinel-2 images acquired before (i.e. on \"2017-05-15\") and after (i.e. on \"2017-06-24\") the event.\n\nIf mosaicking is ORBIT:\nfunction preProcessScenes (collections) {\n    var allowedDates = [\"2017-05-15\", \"2017-06-24\"]; //before and after Knysna fires\n    collections.scenes.orbits = collections.scenes.orbits.filter(function (orbit) {\n        var orbitDateFrom = orbit.dateFrom.split(\"T\")[0];\n        return allowedDates.includes(orbitDateFrom);\n    })\n    return collections\n}\n\n\nIf mosaicking is TILE:\nfunction preProcessScenes (collections) {\n    var allowedDates = [\"2017-05-15\", \"2017-06-24\"]; //before and after Knysna fires\n    collections.scenes.tiles = collections.scenes.tiles.filter(function (tile) {\n        var tileDate = tile.date.split(\"T\")[0];\n        return allowedDates.includes(tileDate);\n    })\n    return collections\n}\n\n\n\nFilter scenes by time interval\nHere, we filter out (= remove) all the scenes acquired between the two selected dates, which both fall within the requested time range.\n\nIf mosaicking is ORBIT:\nfunction preProcessScenes (collections) {\n    collections.scenes.orbits = collections.scenes.orbits.filter(function (orbit) {\n        return (new Date(orbit.dateFrom) < new Date(\"2019-01-31T00:00:00Z\")) ||\n               (new Date(orbit.dateFrom) >= new Date(\"2019-06-01T00:00:00Z\"))\n    })\n    return collections\n}\n\n\nIf mosaicking is TILE:\nfunction preProcessScenes (collections) {\n    collections.scenes.tiles = collections.scenes.tiles.filter(function (tile) {\n        return (new Date(tile.date) < new Date(\"2019-01-31T00:00:00Z\")) ||\n               (new Date(tile.date) >= new Date(\"2019-06-01T00:00:00Z\"))\n    })\n    return collections\n}\n\n\n\nSpecify the number of months taken into account\nValues of timeRange.from and timeRange.to parameters as given in the request, are available in the preProcessScenes function as collections.to and collections.from, respectively. Mosaicking must be ORBIT to use these parameters. They can be used to e.g. filter out scenes acquired more than 3 months before the given to date and time.\nfunction preProcessScenes (collections) {\n    collections.scenes.orbits = collections.scenes.orbits.filter(function (orbit) {\n        var orbitDateFrom = new Date(orbit.dateFrom)\n        return orbitDateFrom.getTime() >= (collections.to.getTime()-3*31*24*3600*1000);\n    })\n    return collections\n}\nThe 3*31*24*3600*1000 represents the 3 months converted to milliseconds. This is needed, so that a 3-month time span can be compared to scene.dateFrom and collections.to, which are all returned as milliseconds since 1970-1-1 by the getTime() function. Note: The result is the same as if the timeRange.from parameter in the body of the request is set to 3 months prior to the timeRange.to.\n\n\nSelect one image per month\nIn this example, we filter the available scenes, so that only the first scene acquired in each month is sent to the evaluatePixel function:\n\nIf mosaicking is ORBIT:\nfunction preProcessScenes (collections) {\n    collections.scenes.orbits.sort(function (s1, s2) {\n            var date1 = new Date(s1.dateFrom);\n            var date2 = new Date(s2.dateFrom);\n            return date1 - date2}) // sort the scenes by dateFrom in ascending order\n\n    firstOrbitDate = new Date(collections.scenes.orbits[0].dateFrom)\n    var previousOrbitMonth = firstOrbitDate.getMonth() - 1\n    collections.scenes.orbits = collections.scenes.orbits.filter(function (orbit) {\n        var currentOrbitDate = new Date(orbit.dateFrom)\n        if (currentOrbitDate.getMonth() != previousOrbitMonth){\n            previousOrbitMonth = currentOrbitDate.getMonth();\n            return true;\n        } else return false;\n    })\n    return collections\n}\n\n\nIf mosaicking is TILE:\nfunction preProcessScenes (collections) {\n    collections.scenes.tiles.sort(function (s1, s2) {\n            var date1 = new Date(s1.date);\n            var date2 = new Date(s2.date);\n            return date1 - date2}) // sort the scenes by dateFrom in ascending order\n\n    firstTileDate = new Date(collections.scenes.tiles[0].date)\n    var previousTileMonth = firstTileDate.getMonth() - 1\n    collections.scenes.tiles = collections.scenes.tiles.filter(function (scene) {\n        var currentTileDate = new Date(scene.date)\n        if (currentTileDate.getMonth() != previousTileMonth){\n            previousTileMonth = currentTileDate.getMonth();\n            return true;\n        } else return false;\n    })\n    return collections\n}"
  },
  {
    "objectID": "APIs/SentinelHub/Evalscript/V3.html#ogc-services-specifics",
    "href": "APIs/SentinelHub/Evalscript/V3.html#ogc-services-specifics",
    "title": "Evalscript V3",
    "section": "OGC services specifics",
    "text": "OGC services specifics\nThere are some specifics when using evalscript V3 with WMS, WTS, WCS services:\n\nThese services return only the default output. Only one image can be returned with each request and it is not possible to request metadata in JSON format.\nTRANSPARENCY and BGCOLOR parameters are ignored. You can use dataMask band in evalscript V3 to handle transparency, as described here.\nBit depth, which is given as the part of a FORMAT parameter (e.g. FORMAT=image/tiff;depth=8) is ignored. You can use sampleType in evalscript V3 to request the bit depth of your choice."
  },
  {
    "objectID": "APIs/SentinelHub/Evalscript.html",
    "href": "APIs/SentinelHub/Evalscript.html",
    "title": "Evalscript (custom script)",
    "section": "",
    "text": "An evalscript (or \"custom script\") is a piece of Javascript code which defines how the satellite data shall be processed by Sentinel Hub and what values the service shall return. It is a required part of any process, batch processing or OGC request.\nEvalscripts can use any JavaScript function or language structures, along with certain utility functions we provide for your convenience. For running evalscripts we use the Chrome V8 JavaScript engine.\nIn the Evalscript V3 section you will find a technical documentation with detailed explanations of parameters and functions you can use in your evalscripts.\n\nExamples\nExamples of various evalscritps can be found on our Custom Scripts Repository.\n\n\nTutorials and Other Related Materials\n\nA PDF tutorial on writing simple evalscripts for beginners: Custom scripts tutorial\nA webinar on writing evalscripts for beginners: Custom Scripts, September 28, 2020\nA webinar on multi-temporal scripts and data fusion: Multi-temporal Scripts and Data Fusion, March 3, 2021\nA blog on good scripting practices: Custom Scripts: Faster, Cheaper, Better!, November 18, 2019\nA blog post on color maps: PUCK - Perceptually Uniform Color Maps in Satellite Imagery, January 28, 2021\nA blog post on sampleType: SampleType: what’s all the fuss about?, February 15, 2022\nMore blog posts and useful links can be found on our Sentinel Hub website."
  },
  {
    "objectID": "APIs/SentinelHub/UserGuides/Datamask.html",
    "href": "APIs/SentinelHub/UserGuides/Datamask.html",
    "title": "Data Mask",
    "section": "",
    "text": "With evalscript v3 we are now providing full control to you over what is to be returned for image parts (pixels) where there is “no data”. In the setup function, you can request dataMask as an element of the input array and then use it in the evaluatePixel function in the same manner as any other input band.\n\n\ndataMask has value 0 for “no data” pixels and 1 elsewhere.\nBy “no data” pixels we mean:\n\nAll pixels which lay outside of the requested polygon (if specified).\nAll pixels for which no source data was found.\nAll pixels for which source data was found and is explicitly “no data”.\n\nThings to note:\n\nAll “no data” pixels as defined above have a dataMask value of 0. All band values for these pixels are also 0, except for Landsat data collections, where band values for no data pixels are NaN.\n\"No data\" pixels are treated like any other in the evalscript. Their value, namely zero (or NaN in case of Landsat data collections), is applied to your evalscript just like any other other pixel. E.g. return [sample.B04*sample.B03] will return 0 for “no data” pixels, while return [sample.B04/sample.B03] would return \"Infinity\" (if requested sampleType is FLOAT32) due to division by zero (or \"NaN\" for Landsat data collection where the division would be by \"NaN\"). To treat \"no data\" pixels differently, explicitly handle them in your evalscript. See the examples below.\n\n\n\n\n\n\n//VERSION=3\n\nfunction setup() {\n  return {\n    input: [\"B02\", \"B03\", \"B04\", \"dataMask\"],\n    output: { bands: 3 }\n  }\n}\n\nfunction evaluatePixel(sample) {\n  if (sample.dataMask == 1)  {\n    return [2.5 * sample.B04, 2.5 * sample.B03, 2.5 * sample.B02]\n  } else {\n    return [99, 99, 99]\n  }\n}\n\n\n\n//VERSION=3\nif (dataMask == 1)  {\n  return [2.5 * B04, 2.5 * B03, 2.5 * B02]\n} else {\n  return [99/255, 99/255, 99/255] //normalized with 255 for visualization in EO Browser\n}\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf you'd like to use this example, you must set the output.responses.format.type parameter of your process API request to image/png or image/tiff. The png format will automatically interpret the fourth band as transparency.\n\n\n\n\n//VERSION=3\n\nfunction setup() {\n  return {\n    input: [\"B02\", \"B03\", \"B04\", \"dataMask\"],\n    output: { bands: 4 }\n  }\n}\n\nfunction evaluatePixel(sample) {\n    return [2.5 * sample.B04, 2.5 * sample.B03, 2.5 * sample.B02, sample.dataMask]\n}\n\n\n\n//VERSION=3\nreturn [2.5 * B04, 2.5 * B03, 2.5 * B02, dataMask]"
  },
  {
    "objectID": "APIs/SentinelHub/UserGuides/Transparency.html",
    "href": "APIs/SentinelHub/UserGuides/Transparency.html",
    "title": "Transparency",
    "section": "",
    "text": "Parts of the image can be made transparent by including the fourth output channel, also known as the alpha channel. The value 0 makes a pixel fully transparent, while the maximum value makes it fully opaque (not transparent).\n\n\n\n\n\n\nNote\n\n\n\nmaximum value depends on sampleType as described above: 1 in case of AUTO or FLOAT32, 255 in case of UINT8, and 65535 in case of UINT16.\n\n\nAn alternative approach of marking pixels is to use a background color, or to combine transparency and background color. Note that the JPEG format does not support alpha channel and thus only background color can be used for JPEG outputs.\n\n\nIn many collections no-data pixels are marked by the value 0 in the dataMask. Thus we can simply use this band as the fourth channel in the function evaluatePixel(samples, scenes) in order to return the no-data pixels as transparent. The dataMask band should be added to the input:bands and four bands should be output in output:bands of the function setup(). In the following example, Sentinel-2 L2A was used, returning a true color image.\n//VERSION=3\nfunction setup () {\n    return {\n        input: [\"B04\", \"B03\", \"B02\", \"dataMask\"],\n        output: {bands: 4}\n    }\n}\nfunction evaluatePixel(samples, scenes) {\n  return [samples.B04 * 3.5, samples.B03 * 3.5, samples.B02 * 3.5, samples.dataMask]\n}\nExamine in EO Browser\n\n\n\nTo use some other condition for turning pixels transparent, simply return the condition in the fourth channel, while also outputting four bands in the function setup(). In the example below, we are returning the Sentinel-2 L1C NDVI index larger than 0.6 as transparent. We also leave the no-data pixels non-transparent and thus do not need to use the the dataMask input band.\n//VERSION=3\nfunction setup () {\n  return {\n    input: [\"B02\", \"B03\", \"B04\", \"B08\"],\n    output: {bands: 4}\n  }\n}\nfunction evaluatePixel(samples, scenes) {\n  var NDVI = (samples.B08 - samples.B04) / (samples.B08 + samples.B04)\n  return [samples.B04 * 2.5, samples.B03 * 2.5, samples.B02 * 2.5, NDVI < 0.6]\n}\nExamine in EO Browser\nTransparency with other sampleTypes\nFor sampleType other than AUTO and FLOAT32, the fourth channel has to be scaled as well. The above example, if using UINT8, would thus be:\n//VERSION=3\nfunction setup () {\n  return {\n    input: [\"B02\", \"B03\", \"B04\", \"B08\"],\n    output: {\n      bands: 4,\n      sampleType: UINT8\n    }\n  }\n}\nfunction evaluatePixel(samples, scenes) {\n  var NDVI = (samples.B08 - samples.B04) / (samples.B08 + samples.B04)\n  return [samples.B04 * 2.5 * 255, samples.B03 * 2.5 * 255, samples.B02 * 2.5 * 255, (NDVI < 0.6) * 255]\n}\n\n\n\nIn the following example, we have returned Sentinel-3 OLCI pixels with OTCI index values larger than 1 as transparent, rendering most marine pixels transparent. Additionally, we have also multiplied the condition for the transparent pixels with data in the fourth channel with dataMask, making no-data values transparent as well.\n//VERSION=3\nfunction setup () {\n    return {\n        input: [\"B04\", \"B06\", \"B08\", \"B10\", \"B11\", \"B12\", \"dataMask\"],\n        output: {bands: 4}\n    }\n}\nfunction evaluatePixel(samples, scenes) {\n  var OTCI = (samples.B12 - samples.B11) / (samples.B11 - samples.B10)\n  return [samples.B08 * 2.5, samples.B06 * 2.5, samples.B04 * 2.5, OTCI > 1 * samples.dataMask]\n}\nExamine in EO Browser\n\n\n\nTo show no-data pixels as a chosen background color instead of transparent, evaluatePixel simply returns the background color if the condition is met. In this example we are using Sentinel-1, creating an RGB output of VV, VH * 5, VH * 5, but return the no-data pixels as blue.\n//VERSION=3\nfunction setup () {\n    return {\n        input: [\"VV\", \"VH\", \"dataMask\"],\n        output: {bands: 3}\n    }\n}\nfunction evaluatePixel(samples, scenes) {\n  if (samples.dataMask == 0) {\n    return [0, 0, 0.3]\n  }\n  else {\n    return [samples.VV, samples.VH * 5, samples.VH * 5]\n  }\n}\nExamine in EO Browser\n\n\n\nIn this example we want to return no-data pixels as grey and the Sentinel-1 VH polarization pixels lower than 0.01 as transparent. To do this, we set up a condition to return grey color if dataMask is equal to 0, while for pixels with data we return the transparency condition in the fourth channel. Since we are producing a four-band output, the grey color returned for no-data pixels also has to have four channels and the value of the fourth channel must be 1.\n//VERSION=3\nfunction setup () {\n    return {\n        input: [\"VV\", \"VH\", \"dataMask\"],\n        output: {bands: 4}\n    }\n}\nfunction evaluatePixel(samples, scenes) {\n  if (samples.dataMask == 0) {\n    return [0.5, 0.5, 0.5, 1]\n  }\n  else {\n    return [samples.VV, samples.VH * 5, samples.VH * 5, samples.VH > 0.01]\n  }\n}\nExamine in EO Browser\n\n\n\nThe easy way to control which parts are transparent is to use either 1 (not transparent) or 0 (transparent) in the fourth channel. In the example using Landsat 8 below, we have separated the pixel evaluation into 3 parts: the first 'if' statement includes all the NDMI index > 0.5 pixels, the second 'if' statement includes the no-data pixels (those with the value 0 in the dataMask band). The final return produces true color bands for all the other pixels. Currently, all of them have 1 in the fourth channel, making them visible.\n//VERSION=3\nfunction setup () {\n    return {\n        input: [\"B02\", \"B03\", \"B04\", \"B05\", \"B06\", \"dataMask\"],\n        output: {bands: 4}\n    }\n}\nfunction evaluatePixel(samples, scenes) {\n  if ((index(samples.B05, samples.B06)) > 0.5) {\n    return [0, 0.5, 1, 1]\n  }\n  if (samples.dataMask == 0) {\n    return [0.5, 0.5, 0.5, 1]\n  }\n  return [samples.B04 * 2.5, samples.B03 * 2.5, samples.B02 * 0.5, 1]\n}\nExamine in EO Browser\nWe can turn any one of them instantly transparent by changing 1 in the fourth channel to 0. In the example below, we left the NDMI > 0.5 pixels as blue and no-data pixels as grey, while returning all other pixels transparent, by simply changing the fourth channel to 0.\n//VERSION=3\nfunction setup () {\n    return {\n        input: [\"B02\", \"B03\", \"B04\", \"B05\", \"B06\", \"dataMask\"],\n        output: {bands: 4}\n    }\n}\nfunction evaluatePixel(samples, scenes) {\n  if ((index(samples.B05, samples.B06)) > 0.5) {\n    return [0, 0.5, 1, 1]\n  }\n  if (samples.dataMask == 0) {\n    return [0.5, 0.5, 0.5, 1]\n  }\n  return [samples.B04 * 2.5, samples.B03 * 2.5, samples.B02 * 0.5, 0]\n}\nExamine in EO Browser\n\n\n\nTransparency can be used with all the available EO collections, including the commercial Planet and Pleiades data. Planet values needs to be scaled to transform them to reflectance values (we don't have to convert no-data pixels). To learn more, visit our documentation on Planet.\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"B1\", \"B2\", \"B3\", \"dataMask\"],\n    output: { bands: 4}\n  }\n}\nfunction evaluatePixel(sample) {\n  return [sample.B3 / 3000,\n          sample.B2 / 3000,\n          sample.B1 / 3000,\n          sample.dataMask]\n}\n\n\n\nThis Pleiades example looks into how to handle commercial data with transparency and custom sampleType formats. First, Pleiades data requires us to divide the values by a scaling factor to bring them to reflectance values. To learn more, visit our Pleiades documentation. Note that no-data pixels don't need this scaling. To return an image in UINT16 format, we need to additionally multiply the values by 65535 to bring them to 16-bit range and this also applies to no-data values. Learn more on sampleType formats and conversions here.\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"B0\", \"B1\", \"B2\", \"dataMask\"],\n    output: { bands: 4,\n      sampleType: \"UINT16\" }\n  }\n}\nfunction evaluatePixel(sample) {\n  return [sample.B2 / 3000 * 65535,\n          sample.B1 / 3000 * 65535,\n          sample.B0 / 3000 * 65535,\n          sample.dataMask * 65535]\n}"
  },
  {
    "objectID": "APIs/SentinelHub/Overview.html",
    "href": "APIs/SentinelHub/Overview.html",
    "title": "API Overview",
    "section": "",
    "text": "The Sentinel Hub API is a RESTful API interface to various satellite imagery archives. It provides access to raw satellite data, rendered images, statistical analysis and much more.\nThe Sentinel Hub API is annotated via OpenAPI. You can browse reference docs here:\n\nWeb preview\nYAML"
  },
  {
    "objectID": "APIs/SentinelHub/Catalog/Examples.html",
    "href": "APIs/SentinelHub/Catalog/Examples.html",
    "title": "Catalog API examples",
    "section": "",
    "text": "To request data using any of the request below, you will need to replace the string <your access token> with your Sentinel Hub access token. Sentinel Hub access token will look something like this:\nayJhbGciOiJSUzI1NiJ9.ayJzdWIiOiI0MmYwODZjCy1kMzI3LTRlOTMtYWMxNS00ODAwOGFiZjI0YjIiLCJhdWQiOiJlY2I1MGM1Zi1i\nMWM1LTQ3ZTgtYWE4NC0zZTU4NzJlM2I2MTEiLCJqdGkiOiI5MzYxMWE4ODEyNTM4Y2M0MmU0NDJjYjUyMTY0YmJlNyIsImV4cCI6MTU1N\nTQyMzk3MiwibmFtZSI6ImFuamEudnJlY2tvQHNpbmVyZ2lzZS5jb20iLCJlbWFpbCI6ImFuamEudnJlY2tvQHNpbmVyZ2lzZS5jb20iLC\nJzaWQiOiIzZjVjZDVkNS04MjRiLTQ3ZjYtODgwNy0wNDMyNWY4ODQxZmQifQ.U7FPOy_2jlEOFxXSjyN5KEdBROna3-Dyec0feShIbUOY\n1p9lEXdNaMmR5euiINi2RXDayX9Kr47CuSTsvq1zHFvZs1YgkFr1iH6kDuX-t_-wfWpqu5oPjoPVKZ4Rj0Ms_dxAUTQFTXR0rlbLuO-KS\ngnaeLVb5iiv_qY3Ctq2XKdIRcFRQLFziFcP4yZJl-NZMlwzsiiwjakcpYpI5jSYAdU2hpZLHRzceseeZt5YfZOe5Px1kZXro9Nd0L2GPC\n-qzOXw_V1saMGFa2ov8qV6Dvk92iv2SDDdGhOdII_JOf8XkK4E3g2z0EEFdWhG9F4Iky4ukNsqBPgE8LRb31s0hg\nand can be obtained as described in the Authentication chapter.\n\nCatalog API Entry page\nCatalog API Entry page with link to other catalog API endpoints and available collections.\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/\"\nresponse = requests.get(url)\n\n\nList collections\nList all available collections. The list will include deployment specific collections and collections available to users through BYOC, Batch or Third Party Data Import functionalities.\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections\"\nresponse = requests.get(url)\n\n\nSentinel 2 L1C collection\nList single collection, in this case Sentinel 2 L1C collection.\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections/sentinel-2-l1c/\"\nresponse = requests.get(url)\n\n\nSimple GET search\nSimple version of search available via GET request is also available. The only query parameters that can be specified in this simpler version are: bbox, datetime, collections, limit and next.\nquery = {\n    \"bbox\": \"13,45,14,46\",\n    \"datetime\": \"2019-12-10T00:00:00Z/2019-12-11T00:00:00Z\",\n    \"collections\": \"sentinel-1-grd\",\n    \"limit\": 5,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/search\"\nresponse = requests.get(url, params=query)\n\n\nSimple POST search\nThe same parameters can also be specified a POST request, query parameters need to be specified as json formatted body and sent to server like:\ndata = {\n    \"bbox\": [13, 45, 14, 46],\n    \"datetime\": \"2019-12-10T00:00:00Z/2019-12-10T23:59:59Z\",\n    \"collections\": [\"sentinel-1-grd\"],\n    \"limit\": 5,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/search\"\nresponse = requests.post(url, json=data)\n\n\nSimple POST search with pagination\nnext token can be specified in the request to get back the next page of results.\ndata = {\n    \"bbox\": [13, 45, 14, 46],\n    \"datetime\": \"2019-12-10T00:00:00Z/2019-12-10T23:59:59Z\",\n    \"collections\": [\"sentinel-1-grd\"],\n    \"limit\": 5,\n    \"next\": 5,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/search\"\nresponse = requests.post(url, json=data)\n\n\nSearch with GeoJSON\nInstead of bbox it is possible to add intersects attribute, which can be any type of GeoJSON object (Point, LineString, Polygon, MultiPoint, MultiPolygon).\ndata = {\n    \"datetime\": \"2019-12-10T00:00:00Z/2019-12-11T00:00:00Z\",\n    \"collections\": [\"sentinel-1-grd\"],\n    \"limit\": 5,\n    \"intersects\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            13,\n            45,\n        ],\n    },\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/search\"\nresponse = requests.post(url, json=data)\n\n\nSearch with Filter\nfilter object can be used to instruct server to only return a specific subset of data.\ndata = {\n    \"bbox\": [13, 45, 14, 46],\n    \"datetime\": \"2019-12-10T00:00:00Z/2019-12-11T00:00:00Z\",\n    \"collections\": [\"sentinel-1-grd\"],\n    \"limit\": 5,\n    \"filter\": \"sat:orbit_state='ascending'\",\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/search\"\nresponse = requests.post(url, json=data)\n\n\nGet Filter parameters for collection\nList all available filter parameters represented as JSON Schema.\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/collections/sentinel-1-grd/queryables\"\nresponse = requests.get(url)\n\n\nSearch with Fields: No fields\nDefault outputs from the server can be quite verbose for some collections. By default, all available item properties are included in the response.\ndata = {\n    \"bbox\": [13, 45, 14, 46],\n    \"datetime\": \"2019-12-10T00:00:00Z/2019-12-11T00:00:00Z\",\n    \"collections\": [\"sentinel-2-l1c\"],\n    \"limit\": 1,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/search\"\nresponse = requests.post(url, json=data)\n\n\nSearch with Fields: Empty fields\nfields attribute can be specific to return less information. When fields object is empty only a default set of properties is included: id, type, geometry, bbox, links, assets.\ndata = {\n    \"bbox\": [13, 45, 14, 46],\n    \"datetime\": \"2019-12-10T00:00:00Z/2019-12-11T00:00:00Z\",\n    \"collections\": [\"sentinel-2-l1c\"],\n    \"limit\": 1,\n    \"fields\": {},\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/search\"\nresponse = requests.post(url, json=data)\n\n\nSearch with Fields: Include\nBy specifying additional attributes in the include list, those attributes are added to the output along with the default ones.\ndata = {\n    \"bbox\": [13, 45, 14, 46],\n    \"datetime\": \"2019-12-10T00:00:00Z/2019-12-11T00:00:00Z\",\n    \"collections\": [\"sentinel-2-l1c\"],\n    \"limit\": 1,\n    \"fields\": {\"include\": [\"properties.gsd\"]},\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/search\"\nresponse = requests.post(url, json=data)\n\n\nSearch with Fields: Exclude\nexlude list can be used to exclude even the default ones from the output.\ndata = {\n    \"bbox\": [13, 45, 14, 46],\n    \"datetime\": \"2019-12-10T00:00:00Z/2019-12-11T00:00:00Z\",\n    \"collections\": [\"sentinel-2-l1c\"],\n    \"limit\": 1,\n    \"fields\": {\"exclude\": [\"properties.datetime\"]},\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/search\"\nresponse = requests.post(url, json=data)\n\n\nSearch with distinct\nUsing distinct it is possible to get some overview of the data available inside the specified query. For example specifying date as an option will return a list of dates where data is available.\ndata = {\n    \"bbox\": [13, 45, 14, 46],\n    \"datetime\": \"2019-12-01T00:00:00Z/2020-01-01T00:00:00Z\",\n    \"collections\": [\"sentinel-1-grd\"],\n    \"limit\": 100,\n    \"distinct\": \"date\",\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/search\"\nresponse = requests.post(url, json=data)\nOr see different Sentinel 1 instrument modes used.\ndata = {\n    \"bbox\": [13, 45, 14, 46],\n    \"datetime\": \"2019-12-01T00:00:00Z/2020-01-01T00:00:00Z\",\n    \"collections\": [\"sentinel-1-grd\"],\n    \"limit\": 100,\n    \"distinct\": \"sar:instrument_mode\",\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/search\"\nresponse = requests.post(url, json=data)\n\n\nSearch on BYOC/BATCH collections\nYou can search for features on your own BYOC or Batch collections. The functionality described above regarding GET and POST search is the same. The only difference is that you have to specify the collection id with the appropriate prefix on collections parameter (e.g: byoc-<your-collection-id> for byoc or batch-<your-collection-id> for batch). Remember that you will have to use the appropriate deployment endpoint depending on where your collection is hosted.\ndata = {\n    \"bbox\": [13, 45, 14, 46],\n    \"datetime\": \"2019-12-10T00:00:00Z/2019-12-10T23:59:59Z\",\n    \"collections\": [\"byoc-<byoc-collection-id>\"],\n    \"limit\": 5,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/search\"\nresponse = requests.post(url, json=data)\nOr using GET simple search endpoint:\nquery = {\n    \"bbox\": \"13,45,14,46\",\n    \"datetime\": \"2019-12-10T00:00:00Z/2019-12-11T00:00:00Z\",\n    \"collections\": \"batch-<batch-collection-id>\",\n    \"limit\": 5,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/search\"\nresponse = requests.get(url, params=query)"
  },
  {
    "objectID": "APIs/SentinelHub/Overview/Authentication.html",
    "href": "APIs/SentinelHub/Overview/Authentication.html",
    "title": "Authentication",
    "section": "",
    "text": "The Sentinel Hub API uses OAuth2 Authentication and requires that you have an access token. In essence, this is a piece of information you add to your requests so the server knows it's you. These tokens do not last forever for a multitude of reasons, but you can get new ones and when they expire from the Sentinel-Hub OAuth2 server at the token endpoint listed below. But first, if you do not have one already, you need to register an OAuth Client in your account settings. This is so the server can expect you to make such token requests. If you do not have a Sentinel-Hub account, you can sign up for a free trial account.\n\nHow to use tokens\nOnce you have a token, do use it for authenticating all your requests within its validity period. While tokens do not last forever, they do last a reasonable amount of time, and sufficiently long that they can be reused. The information of how long each token lasts is embedded in the token itself in the exp claim, and can be read from there.\nDo not fetch a new token for each API request you make. Token requests are rate limited, so if you are getting an HTTP 429 error, that means you are requesting too many tokens.\nTokens are JSON Web Tokens (JWT), more information about them here or here.\n\n\nRegistering OAuth client\nTo register an OAuth client, open the \"User Settings\" tab in your dashboard, then click the Create new button (1) in the \"OAuth client\" section. Give your OAuth client a name (2), set the Client grant type to Client Credentials, and click the Create client button (3). Your client secret will be displayed. Copy the secret value (4) and paste it locally, as it will not be visible after the pop-up window closes! When you are finished, click Close (5). You should now see the newly created OAuth client name and ID (6) in the list of your OAuth clients. With client ID and client secret, you are now ready to request tokens.\n\nTo request tokens the easiest way is to have some software which understands OAuth2 and can make the proper request. For example, REST clients like Postman and Insomnia have support for OAuth2 Client credentials already included. See the Token Request Examples section below.\n\n\nOAuth2 Endpoints\nToken Endpoint - for requesting tokens\nhttps://sh.dataspace.copernicus.eu/oauth/token\nToken info endpoint\nhttps://sh.dataspace.copernicus.eu/oauth/tokeninfo\n\n\nToken Request Examples\n\ncURL\nThe following cURL request will return an access token, just make sure to replace <your client id> with your client ID and <your client secret> with your client secret:\ncurl --request POST --url https://sh.dataspace.copernicus.eu/oauth/token --header \"content-type: application/x-www-form-urlencoded\" --data \"grant_type=client_credentials&client_id=<your client id>\" --data-urlencode \"client_secret=<your client secret>\"\n\n\nPostman\nIn the Postman request Authorization tab set the Type to OAuth 2.0 and Add the authorization data to Request Headers. Then click the Get New Access Token button. Set the Grant Type to Client Credentials, the access token URL to the token endpoint, then set the Client ID and Client Secret to the values of your OAuth Client. Scope can be blank. Keep Client Authentication as Send As Basic Auth Header. Click Request Token. You should get a new one immediately. To use this token to authorize your request, click Use Token. For more information see the Postman authorization documentation\n\n\nPython\nIn python the requests-oauthlib library can handle the retrieval of access tokens using your OAuth Client configuration.\nfrom oauthlib.oauth2 import BackendApplicationClient\nfrom requests_oauthlib import OAuth2Session\n\n# Your client credentials\nclient_id = '<client_id>'\nclient_secret = '<secret>'\n\n# Create a session\nclient = BackendApplicationClient(client_id=client_id)\noauth = OAuth2Session(client=client)\n\n# Get token for the session\ntoken = oauth.fetch_token(token_url='https://sh.dataspace.copernicus.eu/oauth/token',\n                          client_secret=client_secret)\n\n# All requests using this session will have an access token automatically added\nresp = oauth.get(\"https://sh.dataspace.copernicus.eu/oauth/tokeninfo\")\nprint(resp.content)\nrequests-oauthlib doesn't check for status before checking if the response is ok. In case there's a server error, the user can receive an incorrect error, which falsely makes it seem as if the issue is on client side. Library's compliance hooks will prevent the invalid status response from being ignored, returning the correct error. To use them, add the following code:\ndef sentinelhub_compliance_hook(response):\n    response.raise_for_status()\n    return response\n\noauth.register_compliance_hook(\"access_token_response\", sentinelhub_compliance_hook)\n\n\nJavascript\nExample using axios.\nimport axios from \"axios\"\nimport qs from \"qs\"\n\nconst client_id = \"<client_id>\"\nconst client_secret = \"<secret>\"\n\nconst instance = axios.create({\n  baseURL: \"https://sh.dataspace.copernicus.eu\"\n})\n\nconst config = {\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'\n  }\n}\n\nconst body = qs.stringify({\n  client_id,\n  client_secret,\n  grant_type: \"client_credentials\"\n})\n\n\n// All requests using this instance will have an access token automatically added\ninstance.post(\"/oauth/token\", body, config).then(resp => {\n  Object.assign(instance.defaults, {headers: {authorization: `Bearer ${resp.data.access_token}`}})\n})"
  },
  {
    "objectID": "APIs/SentinelHub/Catalog.html",
    "href": "APIs/SentinelHub/Catalog.html",
    "title": "Catalog API",
    "section": "",
    "text": "Sentinel Hub Catalog API (or shortly \"Catalog\") is an API implementing the STAC Specification, describing geospatial information about different data used with Sentinel Hub."
  },
  {
    "objectID": "APIs/SentinelHub/Catalog.html#api-reference",
    "href": "APIs/SentinelHub/Catalog.html#api-reference",
    "title": "Catalog API",
    "section": "API Reference",
    "text": "API Reference\nAPI Reference for Sentinel Hub Catalog is available as an OpenAPI description.\nSimple search request for Sentinel-1 GRD with a bounding box (the coordinate reference system of the values is WGS84 longitude/latitude), available on 10th December 2019.\ndata = {\n    \"bbox\": [13, 45, 14, 46],\n    \"datetime\": \"2019-12-10T00:00:00Z/2019-12-10T23:59:59Z\",\n    \"collections\": [\"sentinel-1-grd\"],\n    \"limit\": 5,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/search\"\nresponse = requests.post(url, json=data)"
  },
  {
    "objectID": "APIs/SentinelHub/Catalog.html#authentication",
    "href": "APIs/SentinelHub/Catalog.html#authentication",
    "title": "Catalog API",
    "section": "Authentication",
    "text": "Authentication\nAuthentication for the Catalog API works completely the same as authentication for other Sentinel Hub services, see Authentication chapter."
  },
  {
    "objectID": "APIs/SentinelHub/Catalog.html#pagination",
    "href": "APIs/SentinelHub/Catalog.html#pagination",
    "title": "Catalog API",
    "section": "Pagination",
    "text": "Pagination\nExecuting the request specified above returns search context fields at the end of the response, looking like this:\n{\n  \"context\": {\n    \"next\": 5,\n    \"limit\": 5,\n    \"returned\": 5\n  }\n}\nThe presence of the next attribute indicates there is more data available for this query, but the server chose to only return 5 results, because the limit specified was 5 (if limit is not specified, default value is 10). To query the next page of items, our request needs to include the next attribute with its value in the query, like so:\ndata = {\n    \"bbox\": [13, 45, 14, 46],\n    \"datetime\": \"2019-12-10T00:00:00Z/2019-12-10T23:59:59Z\",\n    \"collections\": [\"sentinel-1-grd\"],\n    \"limit\": 5,\n    \"next\": 5,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/catalog/1.0.0/search\"\nresponse = requests.post(url, json=data)\nThe response now includes the next page of items; in this case there is no next token in context, meaning no more items exist for this query."
  },
  {
    "objectID": "APIs/SentinelHub/Catalog.html#extensions",
    "href": "APIs/SentinelHub/Catalog.html#extensions",
    "title": "Catalog API",
    "section": "Extensions",
    "text": "Extensions\n\nFilter\nThe search endpoint by default only accepts the parameters described in OpenAPI. The Filter extension enables users to specify an additional parameter to filter on, while searching through data.\nThe syntax for filter is CQL2:\n{\n  \"filter\": {\n    \"op\": \"<operator>\",\n    \"args\": [\n      {\n        \"property\": \"<property_name>\"\n      },\n      \"<value>\"\n    ]\n  },\n  \"filter-lang\": \"cql2-json\"\n}\nIt is also possible to use simple cql2-text:\n{\n  \"filter\": \"eo:cloud_cover > 90\"\n}\nThe available operators are eq, neq, lt, lte, gt, gte, between and not. Only and is currently supported as a logical operator. Be careful - different collections have different properties for the query filter available. The information describing this is available inside the documentation for each specific collection (ex. Sentinel-1 GRD).\n\n\nFields\nBy default, the search endpoint returns all the available attributes of each item. The fields extension provides a way for the client to specify which attributes should not be part of the output, making it easy for the client to not have to deal with unnecessary data.\nSyntax for the fields is:\n{\n  \"fields\": {\n    \"include\": [\n      \"<property_name_1>\",\n      \"<property_name_2>\"\n    ],\n    \"exclude\": [\n      \"<property_name_3>\",\n      \"<property_name_4>\",\n      \"<property_name_5>\"\n    ]\n  }\n}\n\nInclude/Exclude behaviour\n\nWhen no fields attribute is specified in the request, all the available attributes will be included in the response.\nIf the fields attribute is specified with an empty object, or both include and exclude are set to null or an empty array is returned, the attributes for each item will be as if include was set to a default set of [\"id\", \"type\", \"geometry\", \"bbox\", \"links\", \"assets\", \"properties.datetime\"].\nIf only include is specified, the attributes in include will be merged with the default set above.\nIf only exclude is specified, the attributes in exclude will be removed from the default set above.\nIf both include and exclude are specified, the rule is that an attribute must be included in and not excluded from the response.\n\n\n\n\nDistinct\nSometimes we don't want to search for product metadata, but want some general information about the product, such as for example, which acquisition dates are available for Sentinel-1 inside the specified bbox and time interval. distinct attribute inside a search request makes this possible.\nSyntax for distinct attribute is:\n{\n  \"distinct\": \"<property_name>\"\n}\nAs with the filter attribute, distinct is also a collection limited to some specific properties. Information describing these properties can be found inside each collection's documentation (ex. Sentinel-1 GRD)."
  },
  {
    "objectID": "APIs/SentinelHub/Process.html",
    "href": "APIs/SentinelHub/Process.html",
    "title": "Processing API",
    "section": "",
    "text": "The Processing API (or shortly \"Process API\") is the most commonly used API in Sentinel Hub as it provides images based on satellite data. Users can request raw satellite data, simple band combinations such as false colour composites, calculations of simple remote sensing indices like NDVI, or more advanced processing such as calculation of Leaf area index (LAI).\nEven though satellite imagery data are often distributed in \"tiles\", we do not want users to be limited to these. Tiles are an artificially introduced entity to make data distribution easier to handle. However, users should not have to care about whether their AOI is on one tile or another, or perhaps on the border of two tiles. This is why Sentinel Hub API hides this complexity and simply makes the data available over chosen area of interest and temporal period of interest. Tiles are therefore automatically stitched together based on defined parameters (AOI, time period, cloud coverage, priority, etc., depending on the data type)."
  },
  {
    "objectID": "APIs/SentinelHub/Statistical.html",
    "href": "APIs/SentinelHub/Statistical.html",
    "title": "Statistical API",
    "section": "",
    "text": "The Statistical API (or shortly \"Stats API\") enables you to get statistics calculated based on satellite imagery without having to download images. In your Statistical API request, you can specify your area of interest, time period, evalscript and which statistical measures should be calculated. The requested statistics are returned in the API response. Using Statistical API you can calculate the percentage of cloudy pixels for a given area of interest and time period, or calculate mean, standard deviation, and histogram of band values for a parcel in a given time period. Find more examples here.\nTo familiarise yourself with the Statistical API, we recommend checking the Requests builder, our API reference and our Statistical API webinar.\nThe Statistical API fully replaces the FIS service and brings additional functionality described below."
  },
  {
    "objectID": "APIs/SentinelHub/Statistical.html#general-approach",
    "href": "APIs/SentinelHub/Statistical.html#general-approach",
    "title": "Statistical API",
    "section": "General approach",
    "text": "General approach\nBased on parameters specified by users in requests (e.g. area of interest, time range, evalscript) the Statistical API processes satellite data in a similar way as Processing API. Instead of returning images, it calculates requested statistics and returns the results in a json format."
  },
  {
    "objectID": "APIs/SentinelHub/Statistical.html#statistical-api-and-evalscript",
    "href": "APIs/SentinelHub/Statistical.html#statistical-api-and-evalscript",
    "title": "Statistical API",
    "section": "Statistical API and evalscript",
    "text": "Statistical API and evalscript\nAll general rules for building evalscripts apply. However, there are some specifics when using evalscripts with the Statistical API:\n\nThe evaluatePixel() function must, in addition to other output, always return also dataMask output. This output defines which pixels are excluded from calculations. For more details and an example, see here.\nThe default value of sampleType is FLOAT32.\nThe output.bands parameter in the setup() function can be an array. This makes it possible to specify custom names for the output bands and different output dataMask for different outputs, see this example."
  },
  {
    "objectID": "APIs/SentinelHub/Statistical.html#apis-features",
    "href": "APIs/SentinelHub/Statistical.html#apis-features",
    "title": "Statistical API",
    "section": "API's features",
    "text": "API's features\n\nSplit requested timeRange into multiple time intervals\nThe Statistical API supports requesting statistics for multiple time intervals with only one request. For example, requesting the aggregationInterval and timeRange as:\n...\n\"timeRange\": {\n    \"from\": \"2020-06-01T00:00:00Z\",\n    \"to\": \"2020-07-31T00:00:00Z\"\n    },\n\"aggregationInterval\": {\n    \"of\": \"P10D\"\n}\n...\nreturns the requested statistics calculated for multiple 10-day intervals, see this example. The aggregation intervals should be at least one day long (e.g. \"P5D\", \"P30D\"). You can only use period OR time designator not both.\nIf a timeRange is not divisible by an aggregationInterval, the last (\"not full\") time interval will be dismissed by default (SKIP option). The user can instead set the lastIntervalBehavior to SHORTEN (shortens the last interval so that it ends at the end of the provided time range) or EXTEND (extends the last interval over the end of the provided time range so that all the intervals are of equal duration).\nNote that the data is mosaicked for each of the time intervals (as defined with the mosaicking parameter in an evalscript) before the statistics are calculated. To calculate statistics over time (for example, the maximum NDVI value in a month), you should set mosaicking to ORBIT or TILE and calculate the required value in an evalscript, see this example. If you use mosaicking SIMPLE, one mosaicked output for each time interval is a basis for calculating statistics.\n\n\nHistogram\nRequesting histograms is optional. A variety of histogram customisations are available. Users can specify:\n\nnumber of bins nBins or\nwidth of bins binWidthor\narbitrary bins.\n\nThis example demonstrates all three options.\n\n\nPercentile calculations\nIt is possible to get values for any percentile. For example, to get values for 33%, 75%, and 90% percentile, add the \"percentiles\" parameter to your requests as:\n...\n{\n  \"percentiles\": {\n    \"k\": [33, 75, 90]\n  }\n}\n...\nSee also this example.\n\n\nExclude pixels from calculations (dataMask output)\nIt is possible to exclude certain pixels from the calculation of the statistics. The most common use cases are excluding no data and cloudy pixels.\nWith the Statistical API, this is achieved by defining a special output called \"dataMask\". This output should have value \"0\" assigned for the pixels that should be excluded from the calculations, and a value of \"1\" elsewhere. The values of the \"dataMask\" output are defined by the user in an evalscript. An illustrative example is excluding water pixels from statistics of NDVI, see this example.\nNote that the Statistical API does not automatically exclude the no data pixels from calculating the statistics. We recommend that you always exclude those unless there is a good reason not to. This is especially important when you are requesting statistics for a polygon, as it will ensure that pixels outside of the polygon (and inside of the bounding box) are excluded. To exclude no data pixels you need to pass input dataMask band to the dataMask output, e.g.:\nfunction evaluatePixel(samples) {\n    return {\n        ...,\n        dataMask: [samples.dataMask]\n        }\n}\nAll evalscripts in the examples here exclude no data pixels.\n\n\nMultiple outputs and multi bands outputs\nStatistics can be requested for multiple outputs. This is useful when we need to use different dataMasks or different sampleTypes for each output. Additionally, each output can have multiple bands. It is possible to request different statistics for each band and for each output. This example demonstrates how to do all this.\n\n\nExamples\nExamples of Statistical API\n\n\nTutorials and Other Related Materials\n\nTo get you started, we created a detailed beginner webinar on statistical API, where you can learn how to get statistics for your data, how to manipulate the evalscript to return several outputs, each with its own statistical information, how to make use of powerful aggregations, exclude pixels from the calculation, make custom histograms and visualize your statistics in Python."
  },
  {
    "objectID": "APIs/SentinelHub/Process/Examples/S2L2A.html",
    "href": "APIs/SentinelHub/Process/Examples/S2L2A.html",
    "title": "Examples for S2L2A",
    "section": "",
    "text": "To request data using any of the request below, you will need to replace the string <your access token> with your Sentinel Hub access token. Sentinel Hub access token will look something like this:\nayJhbGciOiJSUzI1NiJ9.ayJzdWIiOiI0MmYwODZjCy1kMzI3LTRlOTMtYWMxNS00ODAwOGFiZjI0YjIiLCJhdWQiOiJlY2I1MGM1Zi1i\nMWM1LTQ3ZTgtYWE4NC0zZTU4NzJlM2I2MTEiLCJqdGkiOiI5MzYxMWE4ODEyNTM4Y2M0MmU0NDJjYjUyMTY0YmJlNyIsImV4cCI6MTU1N\nTQyMzk3MiwibmFtZSI6ImFuamEudnJlY2tvQHNpbmVyZ2lzZS5jb20iLCJlbWFpbCI6ImFuamEudnJlY2tvQHNpbmVyZ2lzZS5jb20iLC\nJzaWQiOiIzZjVjZDVkNS04MjRiLTQ3ZjYtODgwNy0wNDMyNWY4ODQxZmQifQ.U7FPOy_2jlEOFxXSjyN5KEdBROna3-Dyec0feShIbUOY\n1p9lEXdNaMmR5euiINi2RXDayX9Kr47CuSTsvq1zHFvZs1YgkFr1iH6kDuX-t_-wfWpqu5oPjoPVKZ4Rj0Ms_dxAUTQFTXR0rlbLuO-KS\ngnaeLVb5iiv_qY3Ctq2XKdIRcFRQLFziFcP4yZJl-NZMlwzsiiwjakcpYpI5jSYAdU2hpZLHRzceseeZt5YfZOe5Px1kZXro9Nd0L2GPC\n-qzOXw_V1saMGFa2ov8qV6Dvk92iv2SDDdGhOdII_JOf8XkK4E3g2z0EEFdWhG9F4Iky4ukNsqBPgE8LRb31s0hg\nand can be obtained as described in the Authentication chapter.\n\nTrue Color\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"B02\", \"B03\", \"B04\"],\n    output: {\n      bands: 3,\n      sampleType: \"AUTO\", // default value - scales the output values from [0,1] to [0,255].\n    },\n  }\n}\n\nfunction evaluatePixel(sample) {\n  return [2.5 * sample.B04, 2.5 * sample.B03, 2.5 * sample.B02]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"bbox\": [\n                13.822174072265625,\n                45.85080395917834,\n                14.55963134765625,\n                46.29191774991382,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-2-l2a\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-10-01T00:00:00Z\",\n                        \"to\": \"2018-12-31T00:00:00Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nTrue Color (EPSG 32633)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"B02\", \"B03\", \"B04\"],\n    output: { bands: 3 },\n  }\n}\n\nfunction evaluatePixel(sample) {\n  return [2.5 * sample.B04, 2.5 * sample.B03, 2.5 * sample.B02]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/EPSG/0/32633\"},\n            \"bbox\": [\n                408553.58,\n                5078145.48,\n                466081.02,\n                5126576.61,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-2-l2a\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-10-01T00:00:00Z\",\n                        \"to\": \"2018-12-31T00:00:00Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nTrue Color, resolution (EPSG 32633)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"B02\", \"B03\", \"B04\"],\n    output: { bands: 3 },\n  }\n}\n\nfunction evaluatePixel(sample) {\n  return [2.5 * sample.B04, 2.5 * sample.B03, 2.5 * sample.B02]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/EPSG/0/32633\"},\n            \"bbox\": [\n                408553.58,\n                5078145.48,\n                466081.02,\n                5126576.61,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-2-l2a\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-10-01T00:00:00Z\",\n                        \"to\": \"2018-12-31T00:00:00Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"resx\": 100,\n        \"resy\": 100,\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nTrue Color, multi-band GeoTIff\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"B02\", \"B03\", \"B04\"],\n    output: { bands: 3 },\n  }\n}\n\nfunction evaluatePixel(sample) {\n  return [2.5 * sample.B04, 2.5 * sample.B03, 2.5 * sample.B02]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"bbox\": [\n                13.822174072265625,\n                45.85080395917834,\n                14.55963134765625,\n                46.29191774991382,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-2-l2a\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-10-01T00:00:00Z\",\n                        \"to\": \"2018-12-31T00:00:00Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request, headers={\"Accept\": \"image/tiff\"})\n\n\nTrue Color, cloudy pixels masked out\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"B02\", \"B03\", \"B04\", \"SCL\"],\n    output: { bands: 3 },\n  }\n}\n\nfunction evaluatePixel(sample) {\n  if ([8, 9, 10].includes(sample.SCL)) {\n    return [1, 0, 0]\n  } else {\n    return [2.5 * sample.B04, 2.5 * sample.B03, 2.5 * sample.B02]\n  }\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"bbox\": [\n                13.822174072265625,\n                45.85080395917834,\n                14.55963134765625,\n                46.29191774991382,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-2-l2a\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-10-11T00:00:00Z\",\n                        \"to\": \"2018-11-18T00:00:00Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [\n            {\n                \"identifier\": \"default\",\n                \"format\": {\"type\": \"image/png\"},\n            }\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nTrue color and metadata (multi-part response GeoTIFF and json)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"B02\", \"B03\", \"B04\"],\n    mosaicking: Mosaicking.ORBIT,\n    output: { id: \"default\", bands: 3 },\n  }\n}\n\nfunction updateOutputMetadata(scenes, inputMetadata, outputMetadata) {\n  outputMetadata.userData = { scenes: scenes.orbits }\n}\n\nfunction evaluatePixel(samples) {\n  return [2.5 * samples[0].B04, 2.5 * samples[0].B03, 2.5 * samples[0].B02]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"bbox\": [\n                13.822174072265625,\n                45.85080395917834,\n                14.55963134765625,\n                46.29191774991382,\n            ]\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-2-l2a\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-12-27T00:00:00Z\",\n                        \"to\": \"2018-12-27T23:59:59Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 200,\n        \"height\": 100,\n        \"responses\": [\n            {\n                \"identifier\": \"default\",\n                \"format\": {\"type\": \"image/png\"},\n            },\n            {\n                \"identifier\": \"userdata\",\n                \"format\": {\"type\": \"application/json\"},\n            },\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request, headers={\"Accept\": \"application/tar\"})\n\n\nTrue color multi-part-reponse (different formats and SampleType)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\n      {\n        bands: [\"B04\", \"B03\", \"B02\"],\n        units: \"REFLECTANCE\", // default units\n      },\n    ],\n    output: [\n      {\n        id: \"default\",\n        bands: 3,\n        sampleType: \"AUTO\", // default  - scales the output values from input values [0,1] to [0,255].\n      },\n      {\n        id: \"true_color_8bit\",\n        bands: 3,\n        sampleType: \"UINT8\", //floating point values are automatically rounded to the nearest integer by the service.\n      },\n      {\n        id: \"true_color_16bit\",\n        bands: 3,\n        sampleType: \"UINT16\", //floating point values are automatically rounded to the nearest integer by the service.\n      },\n      {\n        id: \"true_color_32float\",\n        bands: 3,\n        sampleType: \"FLOAT32\",\n      },\n    ],\n  }\n}\n\nfunction evaluatePixel(sample) {\n  return {\n    // output band values are scaled from [0,1] to [0,255]. Multiply by 2.5 to increase brightness\n    default: [2.5 * sample.B04, 2.5 * sample.B03, 2.5 * sample.B02],\n\n    // Multiply input reflectance values by 2.5 to increase brighness and by 255 to return the band values clamped to [0, 255] unsigned 8 bit range.\n    true_color_8bit: [\n      2.5 * sample.B04 * 255,\n      2.5 * sample.B03 * 255,\n      2.5 * sample.B02 * 255,\n    ],\n\n    // Multiply input reflectance values by 2.5 to increase brightness and by 65535 to return the band values clamped to [0, 65535] unsigned 16 bit range.\n    true_color_16bit: [\n      2.5 * sample.B04 * 65535,\n      2.5 * sample.B03 * 65535,\n      2.5 * sample.B02 * 65535,\n    ],\n\n    // Returns band reflectance.\n    true_color_32float: [sample.B04, sample.B03, sample.B02],\n  }\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"bbox\": [\n                12.206251,\n                41.627351,\n                12.594042,\n                41.856879,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-2-l2a\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-06-01T00:00:00Z\",\n                        \"to\": \"2018-08-31T00:00:00Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [\n            {\n                \"identifier\": \"default\",\n                \"format\": {\"type\": \"image/jpeg\"},\n            },\n            {\n                \"identifier\": \"true_color_8bit\",\n                \"format\": {\"type\": \"image/png\"},\n            },\n            {\n                \"identifier\": \"true_color_16bit\",\n                \"format\": {\"type\": \"image/tiff\"},\n            },\n            {\n                \"identifier\": \"true_color_32float\",\n                \"format\": {\"type\": \"image/tiff\"},\n            },\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request, headers={\"Accept\": \"application/tar\"})\n\n\nNDVI as jpeg image with bounds given as polygon\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\n      {\n        bands: [\"B04\", \"B08\"],\n      },\n    ],\n    output: {\n      id: \"default\",\n      bands: 3,\n    },\n  }\n}\n\nfunction evaluatePixel(sample) {\n  let ndvi = (sample.B08 - sample.B04) / (sample.B08 + sample.B04)\n\n  if (ndvi < -0.5) return [0.05, 0.05, 0.05]\n  else if (ndvi < -0.2) return [0.75, 0.75, 0.75]\n  else if (ndvi < -0.1) return [0.86, 0.86, 0.86]\n  else if (ndvi < 0) return [0.92, 0.92, 0.92]\n  else if (ndvi < 0.025) return [1, 0.98, 0.8]\n  else if (ndvi < 0.05) return [0.93, 0.91, 0.71]\n  else if (ndvi < 0.075) return [0.87, 0.85, 0.61]\n  else if (ndvi < 0.1) return [0.8, 0.78, 0.51]\n  else if (ndvi < 0.125) return [0.74, 0.72, 0.42]\n  else if (ndvi < 0.15) return [0.69, 0.76, 0.38]\n  else if (ndvi < 0.175) return [0.64, 0.8, 0.35]\n  else if (ndvi < 0.2) return [0.57, 0.75, 0.32]\n  else if (ndvi < 0.25) return [0.5, 0.7, 0.28]\n  else if (ndvi < 0.3) return [0.44, 0.64, 0.25]\n  else if (ndvi < 0.35) return [0.38, 0.59, 0.21]\n  else if (ndvi < 0.4) return [0.31, 0.54, 0.18]\n  else if (ndvi < 0.45) return [0.25, 0.49, 0.14]\n  else if (ndvi < 0.5) return [0.19, 0.43, 0.11]\n  else if (ndvi < 0.55) return [0.13, 0.38, 0.07]\n  else if (ndvi < 0.6) return [0.06, 0.33, 0.04]\n  else return [0, 0.27, 0]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"geometry\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [\n                    [\n                        [\n                            -94.04798984527588,\n                            41.7930725281021,\n                        ],\n                        [\n                            -94.04803276062012,\n                            41.805773608962866,\n                        ],\n                        [\n                            -94.06738758087158,\n                            41.805901566741305,\n                        ],\n                        [\n                            -94.06734466552734,\n                            41.7967199475024,\n                        ],\n                        [\n                            -94.06223773956299,\n                            41.79144072064381,\n                        ],\n                        [\n                            -94.0504789352417,\n                            41.791376727347966,\n                        ],\n                        [\n                            -94.05039310455322,\n                            41.7930725281021,\n                        ],\n                        [\n                            -94.04798984527588,\n                            41.7930725281021,\n                        ],\n                    ]\n                ],\n            },\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-2-l2a\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-10-01T00:00:00Z\",\n                        \"to\": \"2018-12-20T00:00:00Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [\n            {\n                \"identifier\": \"default\",\n                \"format\": {\n                    \"type\": \"image/jpeg\",\n                    \"quality\": 80,\n                },\n            }\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nExact NDVI values using a floating point GeoTIFF\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\n      {\n        bands: [\"B04\", \"B08\"],\n        units: \"REFLECTANCE\",\n      },\n    ],\n    output: {\n      id: \"default\",\n      bands: 1,\n      sampleType: SampleType.FLOAT32,\n    },\n  }\n}\n\nfunction evaluatePixel(sample) {\n  let ndvi = (sample.B08 - sample.B04) / (sample.B08 + sample.B04)\n  return [ndvi]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"geometry\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [\n                    [\n                        [\n                            -94.04798984527588,\n                            41.7930725281021,\n                        ],\n                        [\n                            -94.04803276062012,\n                            41.805773608962866,\n                        ],\n                        [\n                            -94.06738758087158,\n                            41.805901566741305,\n                        ],\n                        [\n                            -94.06734466552734,\n                            41.7967199475024,\n                        ],\n                        [\n                            -94.06223773956299,\n                            41.79144072064381,\n                        ],\n                        [\n                            -94.0504789352417,\n                            41.791376727347966,\n                        ],\n                        [\n                            -94.05039310455322,\n                            41.7930725281021,\n                        ],\n                        [\n                            -94.04798984527588,\n                            41.7930725281021,\n                        ],\n                    ]\n                ],\n            },\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-2-l2a\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-10-01T00:00:00Z\",\n                        \"to\": \"2018-12-20T00:00:00Z\",\n                    }\n                },\n                \"processing\": {\"harmonizeValues\": \"true\"},\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [\n            {\n                \"identifier\": \"default\",\n                \"format\": {\"type\": \"image/tiff\"},\n            }\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nNDVI values as INT16 raster\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\n      {\n        bands: [\"B04\", \"B08\"],\n        units: \"REFLECTANCE\",\n      },\n    ],\n    output: {\n      id: \"default\",\n      bands: 1,\n      sampleType: SampleType.INT16, //floating point values are automatically rounded to the nearest integer by the service.\n    },\n  }\n}\n\nfunction evaluatePixel(sample) {\n  let ndvi = (sample.B08 - sample.B04) / (sample.B08 + sample.B04)\n  // Return NDVI multiplied by 10000 as integers to save processing units. To obtain NDVI values, simply divide the resulting pixel values by 10000.\n  return [ndvi * 10000]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"geometry\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [\n                    [\n                        [\n                            -94.04798984527588,\n                            41.7930725281021,\n                        ],\n                        [\n                            -94.04803276062012,\n                            41.805773608962866,\n                        ],\n                        [\n                            -94.06738758087158,\n                            41.805901566741305,\n                        ],\n                        [\n                            -94.06734466552734,\n                            41.7967199475024,\n                        ],\n                        [\n                            -94.06223773956299,\n                            41.79144072064381,\n                        ],\n                        [\n                            -94.0504789352417,\n                            41.791376727347966,\n                        ],\n                        [\n                            -94.05039310455322,\n                            41.7930725281021,\n                        ],\n                        [\n                            -94.04798984527588,\n                            41.7930725281021,\n                        ],\n                    ]\n                ],\n            },\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-2-l2a\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-10-01T00:00:00Z\",\n                        \"to\": \"2018-12-20T00:00:00Z\",\n                    }\n                },\n                \"processing\": {\"harmonizeValues\": \"true\"},\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [\n            {\n                \"identifier\": \"default\",\n                \"format\": {\"type\": \"image/tiff\"},\n            }\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nNDVI image and value (multi-part response png and GeoTIFF)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\n      {\n        bands: [\"B04\", \"B08\"],\n      },\n    ],\n    output: [\n      {\n        id: \"default\",\n        bands: 1,\n        sampleType: SampleType.FLOAT32,\n      },\n      {\n        id: \"ndvi_image\",\n        bands: 3,\n        sampleType: SampleType.AUTO,\n      },\n    ],\n  }\n}\n\nfunction evaluatePixel(sample) {\n  let ndvi = (sample.B08 - sample.B04) / (sample.B08 + sample.B04)\n\n  if (ndvi < -0.5) image = [0.05, 0.05, 0.05]\n  else if (ndvi < -0.2) image = [0.75, 0.75, 0.75]\n  else if (ndvi < -0.1) image = [0.86, 0.86, 0.86]\n  else if (ndvi < 0) image = [0.92, 0.92, 0.92]\n  else if (ndvi < 0.025) image = [1, 0.98, 0.8]\n  else if (ndvi < 0.05) image = [0.93, 0.91, 0.71]\n  else if (ndvi < 0.075) image = [0.87, 0.85, 0.61]\n  else if (ndvi < 0.1) image = [0.8, 0.78, 0.51]\n  else if (ndvi < 0.125) image = [0.74, 0.72, 0.42]\n  else if (ndvi < 0.15) image = [0.69, 0.76, 0.38]\n  else if (ndvi < 0.175) image = [0.64, 0.8, 0.35]\n  else if (ndvi < 0.2) image = [0.57, 0.75, 0.32]\n  else if (ndvi < 0.25) image = [0.5, 0.7, 0.28]\n  else if (ndvi < 0.3) image = [0.44, 0.64, 0.25]\n  else if (ndvi < 0.35) image = [0.38, 0.59, 0.21]\n  else if (ndvi < 0.4) image = [0.31, 0.54, 0.18]\n  else if (ndvi < 0.45) image = [0.25, 0.49, 0.14]\n  else if (ndvi < 0.5) image = [0.19, 0.43, 0.11]\n  else if (ndvi < 0.55) image = [0.13, 0.38, 0.07]\n  else if (ndvi < 0.6) image = [0.06, 0.33, 0.04]\n  else image = [0, 0.27, 0]\n\n  return {\n    default: [ndvi],\n    ndvi_image: image,\n  }\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"geometry\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [\n                    [\n                        [\n                            -94.04798984527588,\n                            41.7930725281021,\n                        ],\n                        [\n                            -94.04803276062012,\n                            41.805773608962866,\n                        ],\n                        [\n                            -94.06738758087158,\n                            41.805901566741305,\n                        ],\n                        [\n                            -94.06734466552734,\n                            41.7967199475024,\n                        ],\n                        [\n                            -94.06223773956299,\n                            41.79144072064381,\n                        ],\n                        [\n                            -94.0504789352417,\n                            41.791376727347966,\n                        ],\n                        [\n                            -94.05039310455322,\n                            41.7930725281021,\n                        ],\n                        [\n                            -94.04798984527588,\n                            41.7930725281021,\n                        ],\n                    ]\n                ],\n            },\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-2-l2a\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-10-01T00:00:00Z\",\n                        \"to\": \"2018-12-20T00:00:00Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [\n            {\n                \"identifier\": \"ndvi_image\",\n                \"format\": {\"type\": \"image/png\"},\n            },\n            {\n                \"identifier\": \"default\",\n                \"format\": {\"type\": \"image/tiff\"},\n            },\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request, headers={\"Accept\": \"application/tar\"})\n\n\nAll S2L2A raw bands, original data (no harmonization)\nLearn about harmonization here.\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\n      {\n        bands: [\n          \"B01\",\n          \"B02\",\n          \"B03\",\n          \"B04\",\n          \"B05\",\n          \"B06\",\n          \"B07\",\n          \"B08\",\n          \"B8A\",\n          \"B09\",\n          \"B11\",\n          \"B12\",\n        ],\n        units: \"DN\",\n      },\n    ],\n    output: {\n      id: \"default\",\n      bands: 12,\n      sampleType: SampleType.UINT16,\n    },\n  }\n}\n\nfunction evaluatePixel(sample) {\n  return [\n    sample.B01,\n    sample.B02,\n    sample.B03,\n    sample.B04,\n    sample.B05,\n    sample.B06,\n    sample.B07,\n    sample.B08,\n    sample.B8A,\n    sample.B09,\n    sample.B11,\n    sample.B12,\n  ]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"geometry\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [\n                    [\n                        [\n                            -94.04798984527588,\n                            41.7930725281021,\n                        ],\n                        [\n                            -94.04803276062012,\n                            41.805773608962866,\n                        ],\n                        [\n                            -94.06738758087158,\n                            41.805901566741305,\n                        ],\n                        [\n                            -94.06734466552734,\n                            41.7967199475024,\n                        ],\n                        [\n                            -94.06223773956299,\n                            41.79144072064381,\n                        ],\n                        [\n                            -94.0504789352417,\n                            41.791376727347966,\n                        ],\n                        [\n                            -94.05039310455322,\n                            41.7930725281021,\n                        ],\n                        [\n                            -94.04798984527588,\n                            41.7930725281021,\n                        ],\n                    ]\n                ],\n            },\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-2-l2a\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-10-01T00:00:00Z\",\n                        \"to\": \"2018-12-20T00:00:00Z\",\n                    }\n                },\n                \"processing\": {\"harmonizeValues\": \"false\"},\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [\n            {\n                \"identifier\": \"default\",\n                \"format\": {\"type\": \"image/tiff\"},\n            }\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nOther S2L2A specific data (Aerosol Optical Thickness, Scene Classification, Snow and Cloud probabilities, Sun and View angles)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\n      {\n        bands: [\n          \"B02\",\n          \"B03\",\n          \"B04\",\n          \"AOT\",\n          \"SCL\",\n          \"SNW\",\n          \"CLD\",\n          \"sunAzimuthAngles\",\n          \"sunZenithAngles\",\n          \"viewAzimuthMean\",\n          \"viewZenithMean\",\n        ],\n      },\n    ],\n    output: [\n      { id: \"TrueColor\", bands: 3, sampleType: SampleType.FLOAT32 },\n      { id: \"AOT\", bands: 1, sampleType: SampleType.UINT16 },\n      { id: \"SCL\", bands: 1, sampleType: SampleType.UINT8 },\n      { id: \"SNW\", bands: 1, sampleType: SampleType.UINT8 },\n      { id: \"CLD\", bands: 1, sampleType: SampleType.UINT8 },\n      { id: \"SAA\", bands: 1, sampleType: SampleType.FLOAT32 },\n      { id: \"SZA\", bands: 1, sampleType: SampleType.FLOAT32 },\n      { id: \"VAM\", bands: 1, sampleType: SampleType.FLOAT32 },\n      { id: \"VZM\", bands: 1, sampleType: SampleType.FLOAT32 },\n    ],\n  }\n}\n\nfunction evaluatePixel(sample) {\n  var truecolor = [sample.B04, sample.B03, sample.B02]\n  var aot = [sample.AOT]\n  var scl = [sample.SCL]\n  var snw = [sample.SNW]\n  var cld = [sample.CLD]\n  var saa = [sample.sunAzimuthAngles]\n  var sza = [sample.sunZenithAngles]\n  var vam = [sample.viewAzimuthMean]\n  var vzm = [sample.viewZenithMean]\n\n  return {\n    TrueColor: truecolor,\n    AOT: aot,\n    SCL: scl,\n    SNW: snw,\n    CLD: cld,\n    SAA: saa,\n    SZA: sza,\n    VAM: vam,\n    VZM: vzm,\n  }\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"bbox\": [\n                13.822174072265625,\n                45.85080395917834,\n                14.55963134765625,\n                46.29191774991382,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-2-l2a\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2019-02-01T00:00:00Z\",\n                        \"to\": \"2019-03-22T00:00:00Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [\n            {\n                \"identifier\": \"TrueColor\",\n                \"format\": {\"type\": \"image/tiff\"},\n            },\n            {\n                \"identifier\": \"AOT\",\n                \"format\": {\"type\": \"image/tiff\"},\n            },\n            {\n                \"identifier\": \"SCL\",\n                \"format\": {\"type\": \"image/tiff\"},\n            },\n            {\n                \"identifier\": \"SNW\",\n                \"format\": {\"type\": \"image/tiff\"},\n            },\n            {\n                \"identifier\": \"CLD\",\n                \"format\": {\"type\": \"image/tiff\"},\n            },\n            {\n                \"identifier\": \"SAA\",\n                \"format\": {\"type\": \"image/tiff\"},\n            },\n            {\n                \"identifier\": \"SZA\",\n                \"format\": {\"type\": \"image/tiff\"},\n            },\n            {\n                \"identifier\": \"VAM\",\n                \"format\": {\"type\": \"image/tiff\"},\n            },\n            {\n                \"identifier\": \"VZM\",\n                \"format\": {\"type\": \"image/tiff\"},\n            },\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request, headers={\"Accept\": \"application/tar\"})"
  },
  {
    "objectID": "APIs/SentinelHub/Process/Examples/S2L1C.html",
    "href": "APIs/SentinelHub/Process/Examples/S2L1C.html",
    "title": "Examples for S2L1C",
    "section": "",
    "text": "To request data using any of the request below, you will need to replace the string <your access token> with your Sentinel Hub access token. Sentinel Hub access token will look something like this:\nayJhbGciOiJSUzI1NiJ9.ayJzdWIiOiI0MmYwODZjCy1kMzI3LTRlOTMtYWMxNS00ODAwOGFiZjI0YjIiLCJhdWQiOiJlY2I1MGM1Zi1i\nMWM1LTQ3ZTgtYWE4NC0zZTU4NzJlM2I2MTEiLCJqdGkiOiI5MzYxMWE4ODEyNTM4Y2M0MmU0NDJjYjUyMTY0YmJlNyIsImV4cCI6MTU1N\nTQyMzk3MiwibmFtZSI6ImFuamEudnJlY2tvQHNpbmVyZ2lzZS5jb20iLCJlbWFpbCI6ImFuamEudnJlY2tvQHNpbmVyZ2lzZS5jb20iLC\nJzaWQiOiIzZjVjZDVkNS04MjRiLTQ3ZjYtODgwNy0wNDMyNWY4ODQxZmQifQ.U7FPOy_2jlEOFxXSjyN5KEdBROna3-Dyec0feShIbUOY\n1p9lEXdNaMmR5euiINi2RXDayX9Kr47CuSTsvq1zHFvZs1YgkFr1iH6kDuX-t_-wfWpqu5oPjoPVKZ4Rj0Ms_dxAUTQFTXR0rlbLuO-KS\ngnaeLVb5iiv_qY3Ctq2XKdIRcFRQLFziFcP4yZJl-NZMlwzsiiwjakcpYpI5jSYAdU2hpZLHRzceseeZt5YfZOe5Px1kZXro9Nd0L2GPC\n-qzOXw_V1saMGFa2ov8qV6Dvk92iv2SDDdGhOdII_JOf8XkK4E3g2z0EEFdWhG9F4Iky4ukNsqBPgE8LRb31s0hg\nand can be obtained as described in the Authentication chapter.\n\nTrue Color\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"B02\", \"B03\", \"B04\"],\n    output: {\n      bands: 3,\n      sampleType: \"AUTO\", // default value - scales the output values from [0,1] to [0,255].\n    },\n  }\n}\n\nfunction evaluatePixel(sample) {\n  return [2.5 * sample.B04, 2.5 * sample.B03, 2.5 * sample.B02]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"bbox\": [\n                13.822174072265625,\n                45.85080395917834,\n                14.55963134765625,\n                46.29191774991382,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-2-l1c\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-10-01T00:00:00Z\",\n                        \"to\": \"2018-12-31T00:00:00Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nTrue Color (EPSG 32633)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"B02\", \"B03\", \"B04\"],\n    output: { bands: 3 },\n  }\n}\n\nfunction evaluatePixel(sample) {\n  return [2.5 * sample.B04, 2.5 * sample.B03, 2.5 * sample.B02]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/EPSG/0/32633\"},\n            \"bbox\": [\n                408553.58,\n                5078145.48,\n                466081.02,\n                5126576.61,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-2-l1c\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-10-01T00:00:00Z\",\n                        \"to\": \"2018-12-31T00:00:00Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nTrue Color, resolution (EPSG 32633)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"B02\", \"B03\", \"B04\"],\n    output: { bands: 3 },\n  }\n}\n\nfunction evaluatePixel(sample) {\n  return [2.5 * sample.B04, 2.5 * sample.B03, 2.5 * sample.B02]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/EPSG/0/32633\"},\n            \"bbox\": [\n                408553.58,\n                5078145.48,\n                466081.02,\n                5126576.61,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-2-l1c\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-10-01T00:00:00Z\",\n                        \"to\": \"2018-12-31T00:00:00Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"resx\": 100,\n        \"resy\": 100,\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nTrue Color, multi-band GeoTIff\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"B02\", \"B03\", \"B04\"],\n    output: { bands: 3 },\n  }\n}\n\nfunction evaluatePixel(sample) {\n  return [2.5 * sample.B04, 2.5 * sample.B03, 2.5 * sample.B02]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"bbox\": [\n                13.822174072265625,\n                45.85080395917834,\n                14.55963134765625,\n                46.29191774991382,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-2-l1c\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-10-01T00:00:00Z\",\n                        \"to\": \"2018-12-31T00:00:00Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request, headers={\"Accept\": \"image/tiff\"})\n\n\nTrue Color, preview mode\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"B02\", \"B03\", \"B04\"],\n    output: { bands: 3 },\n  }\n}\n\nfunction evaluatePixel(sample) {\n  return [2.5 * sample.B04, 2.5 * sample.B03, 2.5 * sample.B02]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"bbox\": [\n                13.822174072265625,\n                45.85080395917834,\n                18.55963134765625,\n                48.29191774991382,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-2-l1c\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-10-11T00:00:00Z\",\n                        \"to\": \"2018-11-18T00:00:00Z\",\n                    },\n                    \"previewMode\": \"PREVIEW\",\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [\n            {\n                \"identifier\": \"default\",\n                \"format\": {\"type\": \"image/png\"},\n            }\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nTrue Color, mosaicking with leastRecent\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"B02\", \"B03\", \"B04\"],\n    output: { bands: 3 },\n  }\n}\n\nfunction evaluatePixel(sample) {\n  return [2.5 * sample.B04, 2.5 * sample.B03, 2.5 * sample.B02]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"bbox\": [\n                13.822174072265625,\n                45.85080395917834,\n                14.55963134765625,\n                46.29191774991382,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-2-l1c\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-10-11T00:00:00Z\",\n                        \"to\": \"2018-11-18T00:00:00Z\",\n                    },\n                    \"mosaickingOrder\": \"leastRecent\",\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [\n            {\n                \"identifier\": \"default\",\n                \"format\": {\"type\": \"image/png\"},\n            }\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nTrue color and metadata (multi-part response GeoTIFF and json)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"B02\", \"B03\", \"B04\"],\n    mosaicking: Mosaicking.ORBIT,\n    output: { id: \"default\", bands: 3 },\n  }\n}\n\nfunction updateOutputMetadata(scenes, inputMetadata, outputMetadata) {\n  outputMetadata.userData = { scenes: scenes.orbits }\n}\n\nfunction evaluatePixel(samples) {\n  return [2.5 * samples[0].B04, 2.5 * samples[0].B03, 2.5 * samples[0].B02]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"bbox\": [\n                13.822174072265625,\n                45.85080395917834,\n                14.55963134765625,\n                46.29191774991382,\n            ]\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-2-l1c\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-12-27T00:00:00Z\",\n                        \"to\": \"2018-12-27T23:59:59Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [\n            {\n                \"identifier\": \"default\",\n                \"format\": {\"type\": \"image/tiff\"},\n            },\n            {\n                \"identifier\": \"userdata\",\n                \"format\": {\"type\": \"application/json\"},\n            },\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request, headers={\"Accept\": \"application/tar\"})\n\n\nTrue color multi-part-reponse (different formats and SampleType)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\n      {\n        bands: [\"B04\", \"B03\", \"B02\"],\n        units: \"REFLECTANCE\", // default units\n      },\n    ],\n    output: [\n      {\n        id: \"default\",\n        bands: 3,\n        sampleType: \"AUTO\", // default  - scales the output values from input values [0,1] to [0,255].\n      },\n      {\n        id: \"true_color_8bit\",\n        bands: 3,\n        sampleType: \"UINT8\", //floating point values are automatically rounded to the nearest integer by the service.\n      },\n      {\n        id: \"true_color_16bit\",\n        bands: 3,\n        sampleType: \"UINT16\", //floating point values are automatically rounded to the nearest integer by the service.\n      },\n      {\n        id: \"true_color_32float\",\n        bands: 3,\n        sampleType: \"FLOAT32\",\n      },\n    ],\n  }\n}\n\nfunction evaluatePixel(sample) {\n  return {\n    // output band values are scaled from [0,1] to [0,255]. Multiply by 2.5 to increase brightness\n    default: [2.5 * sample.B04, 2.5 * sample.B03, 2.5 * sample.B02],\n\n    // Multiply input reflectance values by 2.5 to increase brighness and by 255 to return the band values clamped to [0, 255] unsigned 8 bit range.\n    true_color_8bit: [\n      2.5 * sample.B04 * 255,\n      2.5 * sample.B03 * 255,\n      2.5 * sample.B02 * 255,\n    ],\n\n    // Multiply input reflectance values by 2.5 to increase brightness and by 65535 to return the band values clamped to [0, 65535] unsigned 16 bit range.\n    true_color_16bit: [\n      2.5 * sample.B04 * 65535,\n      2.5 * sample.B03 * 65535,\n      2.5 * sample.B02 * 65535,\n    ],\n\n    // Returns band reflectance.\n    true_color_32float: [sample.B04, sample.B03, sample.B02],\n  }\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"bbox\": [\n                12.206251,\n                41.627351,\n                12.594042,\n                41.856879,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-2-l1c\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-06-01T00:00:00Z\",\n                        \"to\": \"2018-08-31T00:00:00Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [\n            {\n                \"identifier\": \"default\",\n                \"format\": {\"type\": \"image/jpeg\"},\n            },\n            {\n                \"identifier\": \"true_color_8bit\",\n                \"format\": {\"type\": \"image/png\"},\n            },\n            {\n                \"identifier\": \"true_color_16bit\",\n                \"format\": {\"type\": \"image/tiff\"},\n            },\n            {\n                \"identifier\": \"true_color_32float\",\n                \"format\": {\"type\": \"image/tiff\"},\n            },\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request, headers={\"Accept\": \"application/tar\"})\n\n\nNDVI as jpeg image with bounds given as polygon\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\n      {\n        bands: [\"B04\", \"B08\"],\n      },\n    ],\n    output: {\n      id: \"default\",\n      bands: 3,\n    },\n  }\n}\n\nfunction evaluatePixel(sample) {\n  let ndvi = (sample.B08 - sample.B04) / (sample.B08 + sample.B04)\n\n  if (ndvi < -0.5) return [0.05, 0.05, 0.05]\n  else if (ndvi < -0.2) return [0.75, 0.75, 0.75]\n  else if (ndvi < -0.1) return [0.86, 0.86, 0.86]\n  else if (ndvi < 0) return [0.92, 0.92, 0.92]\n  else if (ndvi < 0.025) return [1, 0.98, 0.8]\n  else if (ndvi < 0.05) return [0.93, 0.91, 0.71]\n  else if (ndvi < 0.075) return [0.87, 0.85, 0.61]\n  else if (ndvi < 0.1) return [0.8, 0.78, 0.51]\n  else if (ndvi < 0.125) return [0.74, 0.72, 0.42]\n  else if (ndvi < 0.15) return [0.69, 0.76, 0.38]\n  else if (ndvi < 0.175) return [0.64, 0.8, 0.35]\n  else if (ndvi < 0.2) return [0.57, 0.75, 0.32]\n  else if (ndvi < 0.25) return [0.5, 0.7, 0.28]\n  else if (ndvi < 0.3) return [0.44, 0.64, 0.25]\n  else if (ndvi < 0.35) return [0.38, 0.59, 0.21]\n  else if (ndvi < 0.4) return [0.31, 0.54, 0.18]\n  else if (ndvi < 0.45) return [0.25, 0.49, 0.14]\n  else if (ndvi < 0.5) return [0.19, 0.43, 0.11]\n  else if (ndvi < 0.55) return [0.13, 0.38, 0.07]\n  else if (ndvi < 0.6) return [0.06, 0.33, 0.04]\n  else return [0, 0.27, 0]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"geometry\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [\n                    [\n                        [\n                            -94.04798984527588,\n                            41.7930725281021,\n                        ],\n                        [\n                            -94.04803276062012,\n                            41.805773608962866,\n                        ],\n                        [\n                            -94.06738758087158,\n                            41.805901566741305,\n                        ],\n                        [\n                            -94.06734466552734,\n                            41.7967199475024,\n                        ],\n                        [\n                            -94.06223773956299,\n                            41.79144072064381,\n                        ],\n                        [\n                            -94.0504789352417,\n                            41.791376727347966,\n                        ],\n                        [\n                            -94.05039310455322,\n                            41.7930725281021,\n                        ],\n                        [\n                            -94.04798984527588,\n                            41.7930725281021,\n                        ],\n                    ]\n                ],\n            },\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-2-l1c\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-10-01T00:00:00Z\",\n                        \"to\": \"2018-12-20T00:00:00Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [\n            {\n                \"identifier\": \"default\",\n                \"format\": {\n                    \"type\": \"image/jpeg\",\n                    \"quality\": 80,\n                },\n            }\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nExact NDVI values using a floating point GeoTIFF\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\n      {\n        bands: [\"B04\", \"B08\"],\n        units: \"REFLECTANCE\",\n      },\n    ],\n    output: {\n      id: \"default\",\n      bands: 1,\n      sampleType: SampleType.FLOAT32,\n    },\n  }\n}\n\nfunction evaluatePixel(sample) {\n  let ndvi = (sample.B08 - sample.B04) / (sample.B08 + sample.B04)\n  return [ndvi]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"geometry\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [\n                    [\n                        [\n                            -94.04798984527588,\n                            41.7930725281021,\n                        ],\n                        [\n                            -94.04803276062012,\n                            41.805773608962866,\n                        ],\n                        [\n                            -94.06738758087158,\n                            41.805901566741305,\n                        ],\n                        [\n                            -94.06734466552734,\n                            41.7967199475024,\n                        ],\n                        [\n                            -94.06223773956299,\n                            41.79144072064381,\n                        ],\n                        [\n                            -94.0504789352417,\n                            41.791376727347966,\n                        ],\n                        [\n                            -94.05039310455322,\n                            41.7930725281021,\n                        ],\n                        [\n                            -94.04798984527588,\n                            41.7930725281021,\n                        ],\n                    ]\n                ],\n            },\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-2-l1c\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-10-01T00:00:00Z\",\n                        \"to\": \"2018-12-20T00:00:00Z\",\n                    }\n                },\n                \"processing\": {\"harmonizeValues\": \"true\"},\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [\n            {\n                \"identifier\": \"default\",\n                \"format\": {\"type\": \"image/tiff\"},\n            }\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nNDVI values as INT16 raster\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\n      {\n        bands: [\"B04\", \"B08\"],\n        units: \"REFLECTANCE\",\n      },\n    ],\n    output: {\n      id: \"default\",\n      bands: 1,\n      sampleType: SampleType.INT16, //floating point values are automatically rounded to the nearest integer by the service.\n    },\n  }\n}\n\nfunction evaluatePixel(sample) {\n  let ndvi = (sample.B08 - sample.B04) / (sample.B08 + sample.B04)\n  // Return NDVI multiplied by 10000 as integers to save processing units. To obtain NDVI values, simply divide the resulting pixel values by 10000.\n  return [ndvi * 10000]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"geometry\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [\n                    [\n                        [\n                            -94.04798984527588,\n                            41.7930725281021,\n                        ],\n                        [\n                            -94.04803276062012,\n                            41.805773608962866,\n                        ],\n                        [\n                            -94.06738758087158,\n                            41.805901566741305,\n                        ],\n                        [\n                            -94.06734466552734,\n                            41.7967199475024,\n                        ],\n                        [\n                            -94.06223773956299,\n                            41.79144072064381,\n                        ],\n                        [\n                            -94.0504789352417,\n                            41.791376727347966,\n                        ],\n                        [\n                            -94.05039310455322,\n                            41.7930725281021,\n                        ],\n                        [\n                            -94.04798984527588,\n                            41.7930725281021,\n                        ],\n                    ]\n                ],\n            },\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-2-l1c\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-10-01T00:00:00Z\",\n                        \"to\": \"2018-12-20T00:00:00Z\",\n                    }\n                },\n                \"processing\": {\"harmonizeValues\": \"true\"},\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [\n            {\n                \"identifier\": \"default\",\n                \"format\": {\"type\": \"image/tiff\"},\n            }\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nNDVI image and value (multi-part response png and GeoTIFF)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\n      {\n        bands: [\"B04\", \"B08\"],\n      },\n    ],\n    output: [\n      {\n        id: \"default\",\n        bands: 1,\n        sampleType: SampleType.FLOAT32,\n      },\n      {\n        id: \"ndvi_image\",\n        bands: 3,\n        sampleType: SampleType.AUTO,\n      },\n    ],\n  }\n}\n\nfunction evaluatePixel(sample) {\n  let ndvi = (sample.B08 - sample.B04) / (sample.B08 + sample.B04)\n\n  if (ndvi < -0.5) image = [0.05, 0.05, 0.05]\n  else if (ndvi < -0.2) image = [0.75, 0.75, 0.75]\n  else if (ndvi < -0.1) image = [0.86, 0.86, 0.86]\n  else if (ndvi < 0) image = [0.92, 0.92, 0.92]\n  else if (ndvi < 0.025) image = [1, 0.98, 0.8]\n  else if (ndvi < 0.05) image = [0.93, 0.91, 0.71]\n  else if (ndvi < 0.075) image = [0.87, 0.85, 0.61]\n  else if (ndvi < 0.1) image = [0.8, 0.78, 0.51]\n  else if (ndvi < 0.125) image = [0.74, 0.72, 0.42]\n  else if (ndvi < 0.15) image = [0.69, 0.76, 0.38]\n  else if (ndvi < 0.175) image = [0.64, 0.8, 0.35]\n  else if (ndvi < 0.2) image = [0.57, 0.75, 0.32]\n  else if (ndvi < 0.25) image = [0.5, 0.7, 0.28]\n  else if (ndvi < 0.3) image = [0.44, 0.64, 0.25]\n  else if (ndvi < 0.35) image = [0.38, 0.59, 0.21]\n  else if (ndvi < 0.4) image = [0.31, 0.54, 0.18]\n  else if (ndvi < 0.45) image = [0.25, 0.49, 0.14]\n  else if (ndvi < 0.5) image = [0.19, 0.43, 0.11]\n  else if (ndvi < 0.55) image = [0.13, 0.38, 0.07]\n  else if (ndvi < 0.6) image = [0.06, 0.33, 0.04]\n  else image = [0, 0.27, 0]\n\n  return {\n    default: [ndvi],\n    ndvi_image: image,\n  }\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"geometry\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [\n                    [\n                        [\n                            -94.04798984527588,\n                            41.7930725281021,\n                        ],\n                        [\n                            -94.04803276062012,\n                            41.805773608962866,\n                        ],\n                        [\n                            -94.06738758087158,\n                            41.805901566741305,\n                        ],\n                        [\n                            -94.06734466552734,\n                            41.7967199475024,\n                        ],\n                        [\n                            -94.06223773956299,\n                            41.79144072064381,\n                        ],\n                        [\n                            -94.0504789352417,\n                            41.791376727347966,\n                        ],\n                        [\n                            -94.05039310455322,\n                            41.7930725281021,\n                        ],\n                        [\n                            -94.04798984527588,\n                            41.7930725281021,\n                        ],\n                    ]\n                ],\n            },\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-2-l1c\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-10-01T00:00:00Z\",\n                        \"to\": \"2018-12-20T00:00:00Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [\n            {\n                \"identifier\": \"ndvi_image\",\n                \"format\": {\"type\": \"image/png\"},\n            },\n            {\n                \"identifier\": \"default\",\n                \"format\": {\"type\": \"image/tiff\"},\n            },\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request, headers={\"Accept\": \"application/tar\"})\n\n\nAll S2L1C raw bands, original data (no harmonization)\nLearn about harmonization here.\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\n      {\n        bands: [\n          \"B01\",\n          \"B02\",\n          \"B03\",\n          \"B04\",\n          \"B05\",\n          \"B06\",\n          \"B07\",\n          \"B08\",\n          \"B8A\",\n          \"B09\",\n          \"B10\",\n          \"B11\",\n          \"B12\",\n        ],\n        units: \"DN\",\n      },\n    ],\n    output: {\n      id: \"default\",\n      bands: 13,\n      sampleType: SampleType.UINT16,\n    },\n  }\n}\n\nfunction evaluatePixel(sample) {\n  return [\n    sample.B01,\n    sample.B02,\n    sample.B03,\n    sample.B04,\n    sample.B05,\n    sample.B06,\n    sample.B07,\n    sample.B08,\n    sample.B8A,\n    sample.B09,\n    sample.B10,\n    sample.B11,\n    sample.B12,\n  ]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"geometry\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [\n                    [\n                        [\n                            -94.04798984527588,\n                            41.7930725281021,\n                        ],\n                        [\n                            -94.04803276062012,\n                            41.805773608962866,\n                        ],\n                        [\n                            -94.06738758087158,\n                            41.805901566741305,\n                        ],\n                        [\n                            -94.06734466552734,\n                            41.7967199475024,\n                        ],\n                        [\n                            -94.06223773956299,\n                            41.79144072064381,\n                        ],\n                        [\n                            -94.0504789352417,\n                            41.791376727347966,\n                        ],\n                        [\n                            -94.05039310455322,\n                            41.7930725281021,\n                        ],\n                        [\n                            -94.04798984527588,\n                            41.7930725281021,\n                        ],\n                    ]\n                ],\n            },\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-2-l1c\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-10-01T00:00:00Z\",\n                        \"to\": \"2018-12-20T00:00:00Z\",\n                    }\n                },\n                \"processing\": {\"harmonizeValues\": \"false\"},\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [\n            {\n                \"identifier\": \"default\",\n                \"format\": {\"type\": \"image/tiff\"},\n            }\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)"
  },
  {
    "objectID": "APIs/SentinelHub/Process/Examples/S5PL2.html",
    "href": "APIs/SentinelHub/Process/Examples/S5PL2.html",
    "title": "Examples for S5PL2",
    "section": "",
    "text": "To request data using any of the request below, you will need to replace the string <your access token> with your Sentinel Hub access token. Sentinel Hub access token will look something like this:\nayJhbGciOiJSUzI1NiJ9.ayJzdWIiOiI0MmYwODZjCy1kMzI3LTRlOTMtYWMxNS00ODAwOGFiZjI0YjIiLCJhdWQiOiJlY2I1MGM1Zi1i\nMWM1LTQ3ZTgtYWE4NC0zZTU4NzJlM2I2MTEiLCJqdGkiOiI5MzYxMWE4ODEyNTM4Y2M0MmU0NDJjYjUyMTY0YmJlNyIsImV4cCI6MTU1N\nTQyMzk3MiwibmFtZSI6ImFuamEudnJlY2tvQHNpbmVyZ2lzZS5jb20iLCJlbWFpbCI6ImFuamEudnJlY2tvQHNpbmVyZ2lzZS5jb20iLC\nJzaWQiOiIzZjVjZDVkNS04MjRiLTQ3ZjYtODgwNy0wNDMyNWY4ODQxZmQifQ.U7FPOy_2jlEOFxXSjyN5KEdBROna3-Dyec0feShIbUOY\n1p9lEXdNaMmR5euiINi2RXDayX9Kr47CuSTsvq1zHFvZs1YgkFr1iH6kDuX-t_-wfWpqu5oPjoPVKZ4Rj0Ms_dxAUTQFTXR0rlbLuO-KS\ngnaeLVb5iiv_qY3Ctq2XKdIRcFRQLFziFcP4yZJl-NZMlwzsiiwjakcpYpI5jSYAdU2hpZLHRzceseeZt5YfZOe5Px1kZXro9Nd0L2GPC\n-qzOXw_V1saMGFa2ov8qV6Dvk92iv2SDDdGhOdII_JOf8XkK4E3g2z0EEFdWhG9F4Iky4ukNsqBPgE8LRb31s0hg\nand can be obtained as described in the Authentication chapter.\n\nCarbon Monoxide, CO (RGB visualization and transparency with dataMask)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"CO\", \"dataMask\"],\n    output: { bands: 4 },\n  }\n}\n\nconst minVal = 0.0\nconst maxVal = 0.1\nconst diff = maxVal - minVal\n\nconst rainbowColors = [\n  [minVal, [0, 0, 0.5]],\n  [minVal + 0.125 * diff, [0, 0, 1]],\n  [minVal + 0.375 * diff, [0, 1, 1]],\n  [minVal + 0.625 * diff, [1, 1, 0]],\n  [minVal + 0.875 * diff, [1, 0, 0]],\n  [maxVal, [0.5, 0, 0]],\n]\n\nconst viz = new ColorRampVisualizer(rainbowColors)\n\nfunction evaluatePixel(sample) {\n  var rgba = viz.process(sample.CO)\n  rgba.push(sample.dataMask)\n  return rgba\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"bbox\": [\n                13,\n                45,\n                15,\n                47,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-5p-l2\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-12-28T00:00:00Z\",\n                        \"to\": \"2018-12-31T00:00:00Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nNitrogen Dioxide, NO2 (NRTI timeliness, RGB visualization and transparency with dataMask)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"NO2\", \"dataMask\"],\n    output: { bands: 4 },\n  }\n}\n\nconst minVal = 0.0\nconst maxVal = 0.0001\nconst diff = maxVal - minVal\n\nconst rainbowColors = [\n  [minVal, [0, 0, 0.5]],\n  [minVal + 0.125 * diff, [0, 0, 1]],\n  [minVal + 0.375 * diff, [0, 1, 1]],\n  [minVal + 0.625 * diff, [1, 1, 0]],\n  [minVal + 0.875 * diff, [1, 0, 0]],\n  [maxVal, [0.5, 0, 0]],\n]\n\nconst viz = new ColorRampVisualizer(rainbowColors)\n\nfunction evaluatePixel(sample) {\n  var rgba = viz.process(sample.NO2)\n  rgba.push(sample.dataMask)\n  return rgba\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"bbox\": [\n                13,\n                45,\n                15,\n                47,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-5p-l2\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-12-30T00:00:00Z\",\n                        \"to\": \"2018-12-31T00:00:00Z\",\n                    },\n                    \"timeliness\": \"NRTI\",\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nFormaldehyde, HCHO (float32 format, specific value for no data, GeoTIFF)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"HCHO\", \"dataMask\"],\n    output: { bands: 1, sampleType: \"FLOAT32\" },\n  }\n}\n\nfunction evaluatePixel(sample) {\n  if (sample.dataMask == 1) {\n    return [sample.HCHO]\n  } else {\n    return [-9999]\n  }\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"bbox\": [\n                13,\n                45,\n                15,\n                47,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-5p-l2\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-12-30T00:00:00Z\",\n                        \"to\": \"2018-12-31T00:00:00Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request, headers={\"Accept\": \"image/tiff\"})\n\n\nOzone, O3 (RPRO timeliness, streched values and dataMask)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"O3\", \"dataMask\"],\n    output: { bands: 2 },\n  }\n}\n\nfunction evaluatePixel(sample, scene) {\n  var maxVal = 0.36\n  return [sample.O3 / maxVal, sample.dataMask]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"bbox\": [\n                13,\n                45,\n                15,\n                47,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-5p-l2\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2019-04-22T00:00:00Z\",\n                        \"to\": \"2019-04-23T00:00:00Z\",\n                    },\n                    \"timeliness\": \"RPRO\",\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nSulfur Dioxide, SO2 (minQa=20 applied, streched values)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"SO2\", \"dataMask\"],\n    output: { bands: 2 },\n  }\n}\n\nfunction evaluatePixel(sample, scene) {\n  var maxVal = 0.01\n  return [sample.SO2 / maxVal, sample.dataMask]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"bbox\": [\n                13,\n                45,\n                15,\n                47,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-5p-l2\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-12-30T00:00:00Z\",\n                        \"to\": \"2018-12-31T00:00:00Z\",\n                    }\n                },\n                \"processing\": {\"minQa\": 20},\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nMethane, CH4\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"CH4\", \"dataMask\"],\n    output: { bands: 4 },\n  }\n}\n\nconst minVal = 1600.0\nconst maxVal = 2000.0\nconst diff = maxVal - minVal\n\nconst rainbowColors = [\n  [minVal, [0, 0, 0.5]],\n  [minVal + 0.125 * diff, [0, 0, 1]],\n  [minVal + 0.375 * diff, [0, 1, 1]],\n  [minVal + 0.625 * diff, [1, 1, 0]],\n  [minVal + 0.875 * diff, [1, 0, 0]],\n  [maxVal, [0.5, 0, 0]],\n]\n\nconst viz = new ColorRampVisualizer(rainbowColors)\n\nfunction evaluatePixel(sample) {\n  var rgba = viz.process(sample.CH4)\n  rgba.push(sample.dataMask)\n  return rgba\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"bbox\": [\n                10,\n                20,\n                15,\n                25,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-5p-l2\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-12-28T00:00:00Z\",\n                        \"to\": \"2018-12-31T00:00:00Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nAER AI 340 and 380\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"AER_AI_340_380\", \"dataMask\"],\n    output: { bands: 4 },\n  }\n}\n\nconst minVal = -1.0\nconst maxVal = 5.0\nconst diff = maxVal - minVal\n\nconst rainbowColors = [\n  [minVal, [0, 0, 0.5]],\n  [minVal + 0.125 * diff, [0, 0, 1]],\n  [minVal + 0.375 * diff, [0, 1, 1]],\n  [minVal + 0.625 * diff, [1, 1, 0]],\n  [minVal + 0.875 * diff, [1, 0, 0]],\n  [maxVal, [0.5, 0, 0]],\n]\n\nconst viz = new ColorRampVisualizer(rainbowColors)\n\nfunction evaluatePixel(sample) {\n  var rgba = viz.process(sample.AER_AI_340_380)\n  rgba.push(sample.dataMask)\n  return rgba\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"bbox\": [\n                13,\n                45,\n                15,\n                47,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-5p-l2\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-12-28T00:00:00Z\",\n                        \"to\": \"2018-12-31T00:00:00Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nAER AI 354 and 388\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"AER_AI_354_388\", \"dataMask\"],\n    output: { bands: 4 },\n  }\n}\n\nconst minVal = -1.0\nconst maxVal = 5.0\nconst diff = maxVal - minVal\n\nconst rainbowColors = [\n  [minVal, [0, 0, 0.5]],\n  [minVal + 0.125 * diff, [0, 0, 1]],\n  [minVal + 0.375 * diff, [0, 1, 1]],\n  [minVal + 0.625 * diff, [1, 1, 0]],\n  [minVal + 0.875 * diff, [1, 0, 0]],\n  [maxVal, [0.5, 0, 0]],\n]\n\nconst viz = new ColorRampVisualizer(rainbowColors)\n\nfunction evaluatePixel(sample) {\n  var rgba = viz.process(sample.AER_AI_354_388)\n  rgba.push(sample.dataMask)\n  return rgba\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"bbox\": [\n                13,\n                45,\n                15,\n                47,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-5p-l2\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-12-28T00:00:00Z\",\n                        \"to\": \"2018-12-31T00:00:00Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nCloud base height\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"CLOUD_BASE_HEIGHT\", \"dataMask\"],\n    output: { bands: 4 },\n  }\n}\n\nconst minVal = 0\nconst maxVal = 20000.0\nconst diff = maxVal - minVal\n\nconst rainbowColors = [\n  [minVal, [0, 0, 0.5]],\n  [minVal + 0.125 * diff, [0, 0, 1]],\n  [minVal + 0.375 * diff, [0, 1, 1]],\n  [minVal + 0.625 * diff, [1, 1, 0]],\n  [minVal + 0.875 * diff, [1, 0, 0]],\n  [maxVal, [0.5, 0, 0]],\n]\n\nconst viz = new ColorRampVisualizer(rainbowColors)\n\nfunction evaluatePixel(sample) {\n  var rgba = viz.process(sample.CLOUD_BASE_HEIGHT)\n  rgba.push(sample.dataMask)\n  return rgba\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"bbox\": [\n                13,\n                45,\n                15,\n                47,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-5p-l2\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-12-28T00:00:00Z\",\n                        \"to\": \"2018-12-31T00:00:00Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nCloud base pressure\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"CLOUD_BASE_PRESSURE\", \"dataMask\"],\n    output: { bands: 4 },\n  }\n}\n\nconst minVal = 10000.0\nconst maxVal = 110000.0\nconst diff = maxVal - minVal\n\nconst rainbowColors = [\n  [minVal, [0, 0, 0.5]],\n  [minVal + 0.125 * diff, [0, 0, 1]],\n  [minVal + 0.375 * diff, [0, 1, 1]],\n  [minVal + 0.625 * diff, [1, 1, 0]],\n  [minVal + 0.875 * diff, [1, 0, 0]],\n  [maxVal, [0.5, 0, 0]],\n]\n\nconst viz = new ColorRampVisualizer(rainbowColors)\n\nfunction evaluatePixel(sample) {\n  var rgba = viz.process(sample.CLOUD_BASE_PRESSURE)\n  rgba.push(sample.dataMask)\n  return rgba\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"bbox\": [\n                13,\n                45,\n                15,\n                47,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-5p-l2\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-12-28T00:00:00Z\",\n                        \"to\": \"2018-12-31T00:00:00Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nEffective radiometric cloud fraction\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"CLOUD_FRACTION\", \"dataMask\"],\n    output: { bands: 4 },\n  }\n}\n\nconst minVal = 0.0\nconst maxVal = 1.0\nconst diff = maxVal - minVal\n\nconst rainbowColors = [\n  [minVal, [0, 0, 0.5]],\n  [minVal + 0.125 * diff, [0, 0, 1]],\n  [minVal + 0.375 * diff, [0, 1, 1]],\n  [minVal + 0.625 * diff, [1, 1, 0]],\n  [minVal + 0.875 * diff, [1, 0, 0]],\n  [maxVal, [0.5, 0, 0]],\n]\n\nconst viz = new ColorRampVisualizer(rainbowColors)\n\nfunction evaluatePixel(sample) {\n  var rgba = viz.process(sample.CLOUD_FRACTION)\n  rgba.push(sample.dataMask)\n  return rgba\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"bbox\": [\n                13,\n                45,\n                15,\n                47,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-5p-l2\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-12-28T00:00:00Z\",\n                        \"to\": \"2018-12-31T00:00:00Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nCloud optical thickness\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"CLOUD_OPTICAL_THICKNESS\", \"dataMask\"],\n    output: { bands: 4 },\n  }\n}\n\nconst minVal = 0.0\nconst maxVal = 250.0\nconst diff = maxVal - minVal\n\nconst rainbowColors = [\n  [minVal, [0, 0, 0.5]],\n  [minVal + 0.125 * diff, [0, 0, 1]],\n  [minVal + 0.375 * diff, [0, 1, 1]],\n  [minVal + 0.625 * diff, [1, 1, 0]],\n  [minVal + 0.875 * diff, [1, 0, 0]],\n  [maxVal, [0.5, 0, 0]],\n]\n\nconst viz = new ColorRampVisualizer(rainbowColors)\n\nfunction evaluatePixel(sample) {\n  var rgba = viz.process(sample.CLOUD_OPTICAL_THICKNESS)\n  rgba.push(sample.dataMask)\n  return rgba\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"bbox\": [\n                13,\n                45,\n                15,\n                47,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-5p-l2\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-12-28T00:00:00Z\",\n                        \"to\": \"2018-12-31T00:00:00Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nCloud top height\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"CLOUD_TOP_HEIGHT\", \"dataMask\"],\n    output: { bands: 4 },\n  }\n}\n\nconst minVal = 0.0\nconst maxVal = 20000.0\nconst diff = maxVal - minVal\n\nconst rainbowColors = [\n  [minVal, [0, 0, 0.5]],\n  [minVal + 0.125 * diff, [0, 0, 1]],\n  [minVal + 0.375 * diff, [0, 1, 1]],\n  [minVal + 0.625 * diff, [1, 1, 0]],\n  [minVal + 0.875 * diff, [1, 0, 0]],\n  [maxVal, [0.5, 0, 0]],\n]\n\nconst viz = new ColorRampVisualizer(rainbowColors)\n\nfunction evaluatePixel(sample) {\n  var rgba = viz.process(sample.CLOUD_TOP_HEIGHT)\n  rgba.push(sample.dataMask)\n  return rgba\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"bbox\": [\n                13,\n                45,\n                15,\n                47,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-5p-l2\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-12-28T00:00:00Z\",\n                        \"to\": \"2018-12-31T00:00:00Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nCloud top pressure\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"CLOUD_TOP_PRESSURE\", \"dataMask\"],\n    output: { bands: 4 },\n  }\n}\n\nconst minVal = 10000.0\nconst maxVal = 110000.0\nconst diff = maxVal - minVal\n\nconst rainbowColors = [\n  [minVal, [0, 0, 0.5]],\n  [minVal + 0.125 * diff, [0, 0, 1]],\n  [minVal + 0.375 * diff, [0, 1, 1]],\n  [minVal + 0.625 * diff, [1, 1, 0]],\n  [minVal + 0.875 * diff, [1, 0, 0]],\n  [maxVal, [0.5, 0, 0]],\n]\n\nconst viz = new ColorRampVisualizer(rainbowColors)\n\nfunction evaluatePixel(sample) {\n  var rgba = viz.process(sample.CLOUD_TOP_PRESSURE)\n  rgba.push(sample.dataMask)\n  return rgba\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"bbox\": [\n                13,\n                45,\n                15,\n                47,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-5p-l2\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-12-28T00:00:00Z\",\n                        \"to\": \"2018-12-31T00:00:00Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)"
  },
  {
    "objectID": "APIs/SentinelHub/Process/Examples/S3SLSTR.html",
    "href": "APIs/SentinelHub/Process/Examples/S3SLSTR.html",
    "title": "Examples for S3SLSTR",
    "section": "",
    "text": "To request data using any of the request below, you will need to replace the string <your access token> with your Sentinel Hub access token. Sentinel Hub access token will look something like this:\nayJhbGciOiJSUzI1NiJ9.ayJzdWIiOiI0MmYwODZjCy1kMzI3LTRlOTMtYWMxNS00ODAwOGFiZjI0YjIiLCJhdWQiOiJlY2I1MGM1Zi1i\nMWM1LTQ3ZTgtYWE4NC0zZTU4NzJlM2I2MTEiLCJqdGkiOiI5MzYxMWE4ODEyNTM4Y2M0MmU0NDJjYjUyMTY0YmJlNyIsImV4cCI6MTU1N\nTQyMzk3MiwibmFtZSI6ImFuamEudnJlY2tvQHNpbmVyZ2lzZS5jb20iLCJlbWFpbCI6ImFuamEudnJlY2tvQHNpbmVyZ2lzZS5jb20iLC\nJzaWQiOiIzZjVjZDVkNS04MjRiLTQ3ZjYtODgwNy0wNDMyNWY4ODQxZmQifQ.U7FPOy_2jlEOFxXSjyN5KEdBROna3-Dyec0feShIbUOY\n1p9lEXdNaMmR5euiINi2RXDayX9Kr47CuSTsvq1zHFvZs1YgkFr1iH6kDuX-t_-wfWpqu5oPjoPVKZ4Rj0Ms_dxAUTQFTXR0rlbLuO-KS\ngnaeLVb5iiv_qY3Ctq2XKdIRcFRQLFziFcP4yZJl-NZMlwzsiiwjakcpYpI5jSYAdU2hpZLHRzceseeZt5YfZOe5Px1kZXro9Nd0L2GPC\n-qzOXw_V1saMGFa2ov8qV6Dvk92iv2SDDdGhOdII_JOf8XkK4E3g2z0EEFdWhG9F4Iky4ukNsqBPgE8LRb31s0hg\nand can be obtained as described in the Authentication chapter.\n\nFalse Color\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"S3\", \"S2\", \"S1\"],\n    output: {\n      bands: 3,\n      sampleType: \"AUTO\",\n    },\n  }\n}\n\nfunction evaluatePixel(sample) {\n  return [2 * sample.S3, 2 * sample.S2, 2 * sample.S1]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"bbox\": [\n                8.558382,\n                41.359678,\n                9.579525,\n                43.055688,\n            ],\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/EPSG/0/4326\"},\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-3-slstr\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2020-06-20T00:00:00Z\",\n                        \"to\": \"2020-06-20T23:59:59Z\",\n                    },\n                    \"orbitDirection\": \"DESCENDING\",\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [{\"format\": {\"type\": \"image/png\"}}],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nFalse Color (EPSG 32632)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"S3\", \"S2\", \"S1\"],\n    output: {\n      bands: 3,\n      sampleType: \"AUTO\",\n    },\n  }\n}\n\nfunction evaluatePixel(sample) {\n  return [2 * sample.S3, 2 * sample.S2, 2 * sample.S1]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"bbox\": [\n                444170,\n                4574059,\n                557052,\n                4767386,\n            ],\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/EPSG/0/32632\"},\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-3-slstr\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2020-06-20T00:00:00Z\",\n                        \"to\": \"2020-06-20T23:59:59Z\",\n                    },\n                    \"orbitDirection\": \"DESCENDING\",\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [{\"format\": {\"type\": \"image/png\"}}],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nFalse Color, resolution (EPSG 32632)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"S3\", \"S2\", \"S1\"],\n    output: {\n      bands: 3,\n      sampleType: \"AUTO\",\n    },\n  }\n}\n\nfunction evaluatePixel(sample) {\n  return [2 * sample.S3, 2 * sample.S2, 2 * sample.S1]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/EPSG/0/32632\"},\n            \"bbox\": [\n                444170,\n                4574059,\n                557052,\n                4767386,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-3-slstr\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2020-06-20T00:00:00Z\",\n                        \"to\": \"2020-06-20T23:59:59Z\",\n                    },\n                    \"orbitDirection\": \"DESCENDING\",\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"resx\": 250,\n        \"resy\": 250,\n        \"responses\": [{\"format\": {\"type\": \"image/png\"}}],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nThermal IR fire emission band, gradient visualizer (K)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"F1\"],\n    output: {\n      bands: 3,\n    },\n  }\n}\n\n// Create a Red gradient visualiser from 274-450 K\nvar viz = ColorGradientVisualizer.createRedTemperature(274, 450)\n\nfunction evaluatePixel(sample) {\n  return viz.process(sample.F1)\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"bbox\": [\n                -120.141,\n                37.5282,\n                -119.4131,\n                37.8716,\n            ],\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/EPSG/0/4326\"},\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-3-slstr\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2018-08-06T00:00:00Z\",\n                        \"to\": \"2018-08-06T23:59:59Z\",\n                    },\n                    \"orbitDirection\": \"DESCENDING\",\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [{\"format\": {\"type\": \"image/png\"}}],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nFalse Color and metadata (multi-part GeoTIFF and json)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"S3\", \"S2\", \"S1\"],\n    output: {\n      id: \"default\",\n      bands: 3,\n      sampleType: \"INT16\", //floating point values are automatically rounded to the nearest integer by the service.\n    },\n    mosaicking: \"TILE\",\n  }\n}\n\nfunction updateOutputMetadata(scenes, inputMetadata, outputMetadata) {\n  outputMetadata.userData = { scenes: scenes.tiles }\n}\n\nfunction evaluatePixel(sample) {\n  // Return reflectance multiplied by 10000 as integers to save processing units.\n  // To obtain reflectance values, simply divide the result pixel values by 10000.\n  return [sample[0].S3 * 10000, sample[0].S2 * 10000, sample[0].S1 * 10000] //the values are multiplied by 10000 because output sampleType is UINT16\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"bbox\": [\n                8.558382,\n                41.359678,\n                9.579525,\n                43.055688,\n            ],\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/EPSG/0/4326\"},\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-3-slstr\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2020-06-20T00:00:00Z\",\n                        \"to\": \"2020-06-20T23:59:59Z\",\n                    },\n                    \"orbitDirection\": \"DESCENDING\",\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [\n            {\n                \"identifier\": \"default\",\n                \"format\": {\"type\": \"image/tiff\"},\n            },\n            {\n                \"identifier\": \"userdata\",\n                \"format\": {\"type\": \"application/json\"},\n            },\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request, headers={\"Accept\": \"application/tar\"})\n\n\nNDVI as jpeg image with bouds given as polygon\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"S2\", \"S3\"],\n    output: {\n      bands: 3,\n    },\n  }\n}\n\nfunction evaluatePixel(sample) {\n  let NDVI = index(sample.S3, sample.S2)\n  const viz = ColorGradientVisualizer.createWhiteGreen(-0.1, 1.0)\n  return viz.process(NDVI)\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/EPSG/0/32632\"},\n            \"geometry\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [\n                    [\n                        [\n                            535547.7290897672,\n                            4767538.771691742,\n                        ],\n                        [\n                            542559.6872296461,\n                            4744749.907737136,\n                        ],\n                        [\n                            550448.1401370098,\n                            4660606.41005859,\n                        ],\n                        [\n                            521523.8128100095,\n                            4570327.449007649,\n                        ],\n                        [\n                            474193.0953658272,\n                            4600128.271102134,\n                        ],\n                        [\n                            461045.67385355436,\n                            4630805.5879641045,\n                        ],\n                        [\n                            453157.22094619065,\n                            4698295.685060439,\n                        ],\n                        [\n                            497858.45408791833,\n                            4741243.928667196,\n                        ],\n                        [\n                            520647.3180425246,\n                            4744749.907737136,\n                        ],\n                        [\n                            525906.2866474338,\n                            4771044.750761681,\n                        ],\n                        [\n                            525906.2866474338,\n                            4771044.750761681,\n                        ],\n                        [\n                            525906.2866474338,\n                            4771044.750761681,\n                        ],\n                        [\n                            535547.7290897672,\n                            4767538.771691742,\n                        ],\n                    ]\n                ],\n            },\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-3-slstr\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2020-06-20T00:00:00Z\",\n                        \"to\": \"2020-06-20T23:59:59Z\",\n                    },\n                    \"orbitDirection\": \"DESCENDING\",\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [{\"format\": {\"type\": \"image/jpeg\"}}],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nNDVI image and value (multi-part response png and GeoTIFF)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\n      {\n        bands: [\"S2\", \"S3\"],\n      },\n    ],\n    output: [\n      {\n        id: \"default\",\n        bands: 1,\n        sampleType: \"INT16\",\n      },\n      {\n        id: \"ndvi_image\",\n        bands: 3,\n        sampleType: \"AUTO\",\n      },\n    ],\n  }\n}\n\nfunction evaluatePixel(sample) {\n  let NDVI = index(sample.S3, sample.S2)\n  const viz = ColorGradientVisualizer.createWhiteGreen(-0.1, 1.0)\n  return {\n    default: [NDVI * 10000],\n    ndvi_image: viz.process(NDVI),\n  }\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/EPSG/0/32632\"},\n            \"geometry\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [\n                    [\n                        [\n                            535547.7290897672,\n                            4767538.771691742,\n                        ],\n                        [\n                            542559.6872296461,\n                            4744749.907737136,\n                        ],\n                        [\n                            550448.1401370098,\n                            4660606.41005859,\n                        ],\n                        [\n                            521523.8128100095,\n                            4570327.449007649,\n                        ],\n                        [\n                            474193.0953658272,\n                            4600128.271102134,\n                        ],\n                        [\n                            461045.67385355436,\n                            4630805.5879641045,\n                        ],\n                        [\n                            453157.22094619065,\n                            4698295.685060439,\n                        ],\n                        [\n                            497858.45408791833,\n                            4741243.928667196,\n                        ],\n                        [\n                            520647.3180425246,\n                            4744749.907737136,\n                        ],\n                        [\n                            525906.2866474338,\n                            4771044.750761681,\n                        ],\n                        [\n                            525906.2866474338,\n                            4771044.750761681,\n                        ],\n                        [\n                            525906.2866474338,\n                            4771044.750761681,\n                        ],\n                        [\n                            535547.7290897672,\n                            4767538.771691742,\n                        ],\n                    ]\n                ],\n            },\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-3-slstr\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2020-06-20T00:00:00Z\",\n                        \"to\": \"2020-06-20T23:59:59Z\",\n                    },\n                    \"orbitDirection\": \"DESCENDING\",\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [\n            {\n                \"identifier\": \"ndvi_image\",\n                \"format\": {\"type\": \"image/png\"},\n            },\n            {\n                \"identifier\": \"default\",\n                \"format\": {\"type\": \"image/tiff\"},\n            },\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request, headers={\"Accept\": \"application/tar\"})\n\n\nVNIR and SWIR bands as a GeoTIFF (EPSG 32632)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\n      {\n        bands: [\"S1\", \"S2\", \"S3\", \"S4\", \"S5\", \"S6\"],\n        units: \"REFLECTANCE\",\n      },\n    ],\n    output: {\n      bands: 6,\n      sampleType: \"UINT16\", //floating point values are automatically rounded to the nearest integer by the service.\n    },\n  }\n}\n\nfunction evaluatePixel(sample) {\n  // Return reflectance multiplied by 10000 as integers to save processing units.\n  // To obtain reflectance or BT values, simply divide the resulting pixel values by 10000.\n  return [\n    10000 * sample.S1,\n    10000 * sample.S2,\n    10000 * sample.S3,\n    10000 * sample.S4,\n    10000 * sample.S5,\n    10000 * sample.S6,\n  ]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/EPSG/0/32632\"},\n            \"bbox\": [\n                444170,\n                4574059,\n                557052,\n                4767386,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-3-slstr\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2020-06-20T00:00:00Z\",\n                        \"to\": \"2020-06-20T23:59:59Z\",\n                    },\n                    \"orbitDirection\": \"DESCENDING\",\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"resx\": 500,\n        \"resy\": 500,\n        \"responses\": [{\"format\": {\"type\": \"image/tiff\"}}],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nTIR bands as a GeoTIFF (EPSG 32632)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\n      {\n        bands: [\"S7\", \"S8\", \"S9\", \"F1\", \"F2\"],\n      },\n    ],\n    output: {\n      bands: 5,\n      sampleType: \"UINT16\",\n    },\n  }\n}\n\nfunction multiplyband(sample) {\n  // Multiply by 100\n  return 100 * sample\n}\n\nfunction evaluatePixel(sample) {\n  // Return the bands multiplied by 100 as integers to save processing units.\n  // To obtain reflectance or BT values, simply divide the resulting pixel values by 100.\n  return [\n    multiplyband(sample.S7),\n    multiplyband(sample.S8),\n    multiplyband(sample.S9),\n    multiplyband(sample.F1),\n    multiplyband(sample.F2),\n  ]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/EPSG/0/32632\"},\n            \"bbox\": [\n                444170,\n                4574059,\n                557052,\n                4767386,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-3-slstr\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2020-06-20T00:00:00Z\",\n                        \"to\": \"2020-06-20T23:59:59Z\",\n                    },\n                    \"orbitDirection\": \"DESCENDING\",\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"resx\": 500,\n        \"resy\": 500,\n        \"responses\": [{\"format\": {\"type\": \"image/tiff\"}}],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)"
  },
  {
    "objectID": "APIs/SentinelHub/Process/Examples/S3OLCI.html",
    "href": "APIs/SentinelHub/Process/Examples/S3OLCI.html",
    "title": "Examples for S3OLCI",
    "section": "",
    "text": "To request data using any of the request below, you will need to replace the string <your access token> with your Sentinel Hub access token. Sentinel Hub access token will look something like this:\nayJhbGciOiJSUzI1NiJ9.ayJzdWIiOiI0MmYwODZjCy1kMzI3LTRlOTMtYWMxNS00ODAwOGFiZjI0YjIiLCJhdWQiOiJlY2I1MGM1Zi1i\nMWM1LTQ3ZTgtYWE4NC0zZTU4NzJlM2I2MTEiLCJqdGkiOiI5MzYxMWE4ODEyNTM4Y2M0MmU0NDJjYjUyMTY0YmJlNyIsImV4cCI6MTU1N\nTQyMzk3MiwibmFtZSI6ImFuamEudnJlY2tvQHNpbmVyZ2lzZS5jb20iLCJlbWFpbCI6ImFuamEudnJlY2tvQHNpbmVyZ2lzZS5jb20iLC\nJzaWQiOiIzZjVjZDVkNS04MjRiLTQ3ZjYtODgwNy0wNDMyNWY4ODQxZmQifQ.U7FPOy_2jlEOFxXSjyN5KEdBROna3-Dyec0feShIbUOY\n1p9lEXdNaMmR5euiINi2RXDayX9Kr47CuSTsvq1zHFvZs1YgkFr1iH6kDuX-t_-wfWpqu5oPjoPVKZ4Rj0Ms_dxAUTQFTXR0rlbLuO-KS\ngnaeLVb5iiv_qY3Ctq2XKdIRcFRQLFziFcP4yZJl-NZMlwzsiiwjakcpYpI5jSYAdU2hpZLHRzceseeZt5YfZOe5Px1kZXro9Nd0L2GPC\n-qzOXw_V1saMGFa2ov8qV6Dvk92iv2SDDdGhOdII_JOf8XkK4E3g2z0EEFdWhG9F4Iky4ukNsqBPgE8LRb31s0hg\nand can be obtained as described in the Authentication chapter.\n\nTrue Color\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"B08\", \"B06\", \"B04\"],\n    output: {\n      bands: 3,\n      sampleType: \"AUTO\", // default value - scales the output values from [0,1] to [0,255].\n    },\n  }\n}\n\nfunction evaluatePixel(sample) {\n  return [2.5 * sample.B08, 2.5 * sample.B06, 2.5 * sample.B04]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"bbox\": [\n                8.3333,\n                41.3149,\n                9.7009,\n                43.0568,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-3-olci\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2020-04-04T00:00:00Z\",\n                        \"to\": \"2020-04-05T00:00:00Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [{\"format\": {\"type\": \"image/png\"}}],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nTrue Color (EPSG 32632)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"B08\", \"B06\", \"B04\"],\n    output: {\n      bands: 3,\n      sampleType: \"AUTO\", // default value - scales the data from 0-255.\n    },\n  }\n}\n\nfunction evaluatePixel(sample) {\n  return [2.5 * sample.B08, 2.5 * sample.B06, 2.5 * sample.B04]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/EPSG/0/32632\"},\n            \"bbox\": [\n                444170,\n                4574059,\n                557052,\n                4767386,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-3-olci\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2020-04-04T00:00:00Z\",\n                        \"to\": \"2020-04-05T00:00:00Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [{\"format\": {\"type\": \"image/png\"}}],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nTrue Color, resolution (EPSG 32632)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"B08\", \"B06\", \"B04\"],\n    output: {\n      bands: 3,\n      sampleType: \"AUTO\", // default value - scales the output values from [0,1] to [0,255].\n    },\n  }\n}\n\nfunction evaluatePixel(sample) {\n  return [2.5 * sample.B08, 2.5 * sample.B06, 2.5 * sample.B04]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/EPSG/0/32632\"},\n            \"bbox\": [\n                444170,\n                4574059,\n                557052,\n                4767386,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-3-olci\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2020-04-04T00:00:00Z\",\n                        \"to\": \"2020-04-05T00:00:00Z\",\n                    },\n                    \"processing\": {\"upsampling\": \"BILINEAR\"},\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"resx\": 150,\n        \"resy\": 150,\n        \"responses\": [{\"format\": {\"type\": \"image/png\"}}],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nTrue Color, multi-band GeoTiff\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\n      {\n        bands: [\"B04\", \"B06\", \"B08\"],\n        units: \"REFLECTANCE\", // default value\n      },\n    ],\n    output: {\n      bands: 3,\n      sampleType: \"UINT16\", //floating point values are automatically rounded to the nearest integer by the service.\n    },\n  }\n}\n\nfunction evaluatePixel(sample) {\n  // Return reflectance multiplied by 10000 as integers to save processing units.\n  // To obtain reflectance values, simply divide the result pixel values by 10000.\n  return [10000 * sample.B08, 10000 * sample.B06, 10000 * sample.B04]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"bbox\": [\n                8.3333,\n                41.3149,\n                9.7009,\n                43.0568,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-3-olci\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2020-04-04T00:00:00Z\",\n                        \"to\": \"2020-04-05T00:00:00Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [{\"format\": {\"type\": \"image/tiff\"}}],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request, headers={\"Accept\": \"image/tiff\"})\n\n\nTrue color and metadata (multi-part response GeoTIFF and json)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\n      {\n        bands: [\"B04\", \"B06\", \"B08\"],\n        units: \"REFLECTANCE\",\n      },\n    ],\n    mosaicking: Mosaicking.SIMPLE,\n    output: {\n      id: \"default\",\n      bands: 3,\n      sampleType: \"UINT16\", //floating point values are automatically rounded to the nearest integer by the service.\n    },\n  }\n}\n\nfunction updateOutputMetadata(scenes, inputMetadata, outputMetadata) {\n  outputMetadata.userData = { scenes: scenes.tiles }\n}\n\nfunction evaluatePixel(samples) {\n  // Return reflectance multiplied by 10000 as integers to save processing units.\n  // To obtain reflectance values, simply divide the result pixel values by 10000.\n  return [10000 * samples.B08, 10000 * samples.B06, 10000 * samples.B04]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"bbox\": [\n                8.3333,\n                41.3149,\n                9.7009,\n                43.0568,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-3-olci\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2020-04-04T00:00:00Z\",\n                        \"to\": \"2020-04-05T00:00:00Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [\n            {\n                \"identifier\": \"default\",\n                \"format\": {\"type\": \"image/tiff\"},\n            },\n            {\n                \"identifier\": \"userdata\",\n                \"format\": {\"type\": \"application/json\"},\n            },\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request, headers={\"Accept\": \"application/tar\"})\n\n\nOTCI as jpeg image with bounds given as polygon\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\n      {\n        bands: [\"B10\", \"B11\", \"B12\"],\n      },\n    ],\n    output: {\n      id: \"default\",\n      bands: 3,\n      sampleType: \"AUTO\",\n    },\n  }\n}\n\n// Create a new visualiser to represent data\nvar cm = new ColorMapVisualizer([\n  [0, [0, 0, 0.5]],\n  [1, [0, 0.3, 0.8]],\n  [1.8, [1, 0.2, 0.2]],\n  [2.5, [1, 0.9, 0]],\n  [4, [0, 0.8, 0.1]],\n  [4.5, [0, 0.6, 0.2]],\n  [5, [1, 1, 1]],\n])\n\nfunction evaluatePixel(sample) {\n  let OTCI = (sample.B12 - sample.B11) / (sample.B11 - sample.B10)\n  return cm.process(OTCI)\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"geometry\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [\n                    [\n                        [\n                            8.80279541015625,\n                            42.494377798972465,\n                        ],\n                        [\n                            8.6956787109375,\n                            42.370720143531976,\n                        ],\n                        [\n                            8.7890625,\n                            42.238685347536496,\n                        ],\n                        [\n                            8.60504150390625,\n                            42.20614200929954,\n                        ],\n                        [\n                            8.70391845703125,\n                            42.15322331239858,\n                        ],\n                        [\n                            8.83575439453125,\n                            41.97991089691236,\n                        ],\n                        [\n                            8.81378173828125,\n                            41.797935707842974,\n                        ],\n                        [\n                            8.9208984375,\n                            41.777456667491066,\n                        ],\n                        [\n                            8.94012451171875,\n                            41.68316883525891,\n                        ],\n                        [\n                            9.0472412109375,\n                            41.52297326747377,\n                        ],\n                        [\n                            9.35760498046875,\n                            41.70777900286713,\n                        ],\n                        [\n                            9.33013916015625,\n                            42.06764572379527,\n                        ],\n                        [\n                            9.48394775390625,\n                            42.261049162113856,\n                        ],\n                        [\n                            9.47021484375,\n                            42.51462626746592,\n                        ],\n                        [\n                            9.33837890625,\n                            42.62385465855651,\n                        ],\n                        [\n                            9.1900634765625,\n                            42.6844544397102,\n                        ],\n                        [\n                            8.80279541015625,\n                            42.494377798972465,\n                        ],\n                    ]\n                ],\n            },\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-3-olci\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2020-04-04T00:00:00Z\",\n                        \"to\": \"2020-04-05T00:00:00Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [\n            {\n                \"identifier\": \"default\",\n                \"format\": {\n                    \"type\": \"image/jpeg\",\n                    \"quality\": 90,\n                },\n            }\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nOTCI image and value (multi-part response png and GeoTIFF containing floats)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\n      {\n        bands: [\"B10\", \"B11\", \"B12\"],\n      },\n    ],\n    output: [\n      {\n        id: \"default\",\n        bands: 1,\n        sampleType: \"FLOAT32\",\n      },\n      {\n        id: \"otci_image\",\n        bands: 3,\n        sampleType: \"AUTO\",\n      },\n    ],\n  }\n}\n\n// Create a new visualiser to represent data\nvar cm = new ColorMapVisualizer([\n  [0, [0, 0, 0.5]],\n  [1, [0, 0.3, 0.8]],\n  [1.8, [1, 0.2, 0.2]],\n  [2.5, [1, 0.9, 0]],\n  [4, [0, 0.8, 0.1]],\n  [4.5, [0, 0.6, 0.2]],\n  [5, [1, 1, 1]],\n])\n\nfunction evaluatePixel(sample) {\n  let OTCI = (sample.B12 - sample.B11) / (sample.B11 - sample.B10)\n  return {\n    default: [OTCI],\n    otci_image: cm.process(OTCI),\n  }\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"},\n            \"geometry\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [\n                    [\n                        [\n                            8.80279541015625,\n                            42.494377798972465,\n                        ],\n                        [\n                            8.6956787109375,\n                            42.370720143531976,\n                        ],\n                        [\n                            8.7890625,\n                            42.238685347536496,\n                        ],\n                        [\n                            8.60504150390625,\n                            42.20614200929954,\n                        ],\n                        [\n                            8.70391845703125,\n                            42.15322331239858,\n                        ],\n                        [\n                            8.83575439453125,\n                            41.97991089691236,\n                        ],\n                        [\n                            8.81378173828125,\n                            41.797935707842974,\n                        ],\n                        [\n                            8.9208984375,\n                            41.777456667491066,\n                        ],\n                        [\n                            8.94012451171875,\n                            41.68316883525891,\n                        ],\n                        [\n                            9.0472412109375,\n                            41.52297326747377,\n                        ],\n                        [\n                            9.35760498046875,\n                            41.70777900286713,\n                        ],\n                        [\n                            9.33013916015625,\n                            42.06764572379527,\n                        ],\n                        [\n                            9.48394775390625,\n                            42.261049162113856,\n                        ],\n                        [\n                            9.47021484375,\n                            42.51462626746592,\n                        ],\n                        [\n                            9.33837890625,\n                            42.62385465855651,\n                        ],\n                        [\n                            9.1900634765625,\n                            42.6844544397102,\n                        ],\n                        [\n                            8.80279541015625,\n                            42.494377798972465,\n                        ],\n                    ]\n                ],\n            },\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-3-olci\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2020-04-04T00:00:00Z\",\n                        \"to\": \"2020-04-05T00:00:00Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [\n            {\n                \"identifier\": \"otci_image\",\n                \"format\": {\"type\": \"image/png\"},\n            },\n            {\n                \"identifier\": \"default\",\n                \"format\": {\"type\": \"image/tiff\"},\n            },\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request, headers={\"Accept\": \"application/tar\"})\n\n\nAll S3OLCI reflectance bands as a GeoTIFF (EPSG 32632)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\n      {\n        bands: [\n          \"B01\",\n          \"B02\",\n          \"B03\",\n          \"B04\",\n          \"B05\",\n          \"B06\",\n          \"B07\",\n          \"B08\",\n          \"B09\",\n          \"B10\",\n          \"B11\",\n          \"B12\",\n          \"B13\",\n          \"B14\",\n          \"B15\",\n          \"B16\",\n          \"B17\",\n          \"B18\",\n          \"B19\",\n          \"B20\",\n          \"B21\",\n        ],\n        units: \"REFLECTANCE\",\n      },\n    ],\n    output: {\n      bands: 21,\n      sampleType: \"UINT16\", //floating point values are automatically rounded to the nearest integer by the service.\n    },\n  }\n}\n\nfunction evaluatePixel(sample) {\n  // Return reflectance multiplied by 10000 as integers to save processing units.\n  // To obtain reflectance values, simply divide the result pixel values by 10000.\n  return [\n    10000 * sample.B01,\n    10000 * sample.B02,\n    10000 * sample.B03,\n    10000 * sample.B04,\n    10000 * sample.B05,\n    10000 * sample.B06,\n    10000 * sample.B07,\n    10000 * sample.B08,\n    10000 * sample.B09,\n    10000 * sample.B10,\n    10000 * sample.B11,\n    10000 * sample.B12,\n    10000 * sample.B13,\n    10000 * sample.B14,\n    10000 * sample.B15,\n    10000 * sample.B16,\n    10000 * sample.B17,\n    10000 * sample.B18,\n    10000 * sample.B19,\n    10000 * sample.B20,\n    10000 * sample.B21,\n  ]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/EPSG/0/32632\"},\n            \"bbox\": [\n                444170,\n                4574059,\n                557052,\n                4767386,\n            ],\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-3-olci\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2020-04-04T00:00:00Z\",\n                        \"to\": \"2020-04-05T00:00:00Z\",\n                    }\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"resx\": 300,\n        \"resy\": 300,\n        \"responses\": [{\"format\": {\"type\": \"image/tiff\"}}],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request, headers={\"Accept\": \"image/tiff\"})"
  },
  {
    "objectID": "APIs/SentinelHub/Process/Examples/S1GRD.html",
    "href": "APIs/SentinelHub/Process/Examples/S1GRD.html",
    "title": "Examples for S1GRD",
    "section": "",
    "text": "To request data using any of the request below, you will need to replace the string <your access token> with your Sentinel Hub access token. Sentinel Hub access token will look something like this:\nayJhbGciOiJSUzI1NiJ9.ayJzdWIiOiI0MmYwODZjCy1kMzI3LTRlOTMtYWMxNS00ODAwOGFiZjI0YjIiLCJhdWQiOiJlY2I1MGM1Zi1i\nMWM1LTQ3ZTgtYWE4NC0zZTU4NzJlM2I2MTEiLCJqdGkiOiI5MzYxMWE4ODEyNTM4Y2M0MmU0NDJjYjUyMTY0YmJlNyIsImV4cCI6MTU1N\nTQyMzk3MiwibmFtZSI6ImFuamEudnJlY2tvQHNpbmVyZ2lzZS5jb20iLCJlbWFpbCI6ImFuamEudnJlY2tvQHNpbmVyZ2lzZS5jb20iLC\nJzaWQiOiIzZjVjZDVkNS04MjRiLTQ3ZjYtODgwNy0wNDMyNWY4ODQxZmQifQ.U7FPOy_2jlEOFxXSjyN5KEdBROna3-Dyec0feShIbUOY\n1p9lEXdNaMmR5euiINi2RXDayX9Kr47CuSTsvq1zHFvZs1YgkFr1iH6kDuX-t_-wfWpqu5oPjoPVKZ4Rj0Ms_dxAUTQFTXR0rlbLuO-KS\ngnaeLVb5iiv_qY3Ctq2XKdIRcFRQLFziFcP4yZJl-NZMlwzsiiwjakcpYpI5jSYAdU2hpZLHRzceseeZt5YfZOe5Px1kZXro9Nd0L2GPC\n-qzOXw_V1saMGFa2ov8qV6Dvk92iv2SDDdGhOdII_JOf8XkK4E3g2z0EEFdWhG9F4Iky4ukNsqBPgE8LRb31s0hg\nand can be obtained as described in the Authentication chapter.\n\nS1GRD orthorectified linear gamma0 VV between 0 and 0.5 (png)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"VV\"],\n    output: { id: \"default\", bands: 1 },\n  }\n}\n\nfunction evaluatePixel(samples) {\n  return [2 * samples.VV]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"bbox\": [\n                1360000,\n                5121900,\n                1370000,\n                5131900,\n            ],\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/EPSG/0/3857\"},\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-1-grd\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2019-02-02T00:00:00Z\",\n                        \"to\": \"2019-04-02T23:59:59Z\",\n                    }\n                },\n                \"processing\": {\"orthorectify\": \"true\"},\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [\n            {\n                \"identifier\": \"default\",\n                \"format\": {\"type\": \"image/png\"},\n            }\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nS1GRD orthorectified linear gamma0 VV between 0 and 0.5 in approximate real-world 10 m resolution (IW) (png)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"VV\"],\n    output: { id: \"default\", bands: 1 },\n  }\n}\n\nfunction evaluatePixel(samples) {\n  return [2 * samples.VV]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"bbox\": [\n                268574.43,\n                4624494.84,\n                276045.41,\n                4631696.16,\n            ],\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/EPSG/0/32633\"},\n        },\n        \"data\": [\n            {\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2019-02-02T00:00:00Z\",\n                        \"to\": \"2019-04-02T23:59:59Z\",\n                    },\n                    \"resolution\": \"HIGH\",\n                    \"acquisitionMode\": \"IW\",\n                },\n                \"processing\": {\n                    \"orthorectify\": \"true\",\n                    \"demInstance\": \"COPERNICUS_30\",\n                },\n                \"type\": \"sentinel-1-grd\",\n            }\n        ],\n    },\n    \"output\": {\n        \"resx\": 10,\n        \"resy\": 10,\n        \"responses\": [\n            {\n                \"identifier\": \"default\",\n                \"format\": {\"type\": \"image/png\"},\n            }\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nS1GRD orthorectified with Copernicus DEM 30 (png)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"VV\"],\n    output: { id: \"default\", bands: 1 },\n  }\n}\n\nfunction evaluatePixel(samples) {\n  return [2 * samples.VV]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"bbox\": [\n                1360000,\n                5121900,\n                1370000,\n                5131900,\n            ],\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/EPSG/0/3857\"},\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-1-grd\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2019-02-02T00:00:00Z\",\n                        \"to\": \"2019-04-02T23:59:59Z\",\n                    }\n                },\n                \"processing\": {\n                    \"orthorectify\": \"true\",\n                    \"demInstance\": \"COPERNICUS_30\",\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [\n            {\n                \"identifier\": \"default\",\n                \"format\": {\"type\": \"image/png\"},\n            }\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nS1GRD orthorectified linear gamma0 VV, ascending orbit direction, GeoTIFF in EPSG:32648 (UTM zone 48N)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"VV\"],\n    output: { id: \"default\", bands: 1, sampleType: SampleType.FLOAT32 },\n  }\n}\n\nfunction evaluatePixel(samples) {\n  return [samples.VV]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"bbox\": [\n                699800,\n                1190220,\n                709800,\n                1200220,\n            ],\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/EPSG/0/32648\"},\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-1-grd\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2017-11-15T00:00:00Z\",\n                        \"to\": \"2017-11-15T23:00:00Z\",\n                    },\n                    \"acquisitionMode\": \"IW\",\n                    \"polarization\": \"DV\",\n                    \"orbitDirection \": \"ASCENDING\",\n                },\n                \"processing\": {\n                    \"backCoeff\": \"GAMMA0_ELLIPSOID\",\n                    \"orthorectify\": \"true\",\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 1000,\n        \"height\": 1000,\n        \"responses\": [\n            {\n                \"identifier\": \"default\",\n                \"format\": {\"type\": \"image/tiff\"},\n            }\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request, headers={\"Accept\": \"image/tiff\"})\n\n\nS1GRD orthorectified decibel gamma0 VH between -20 dB and 0 dB (png)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"VH\"],\n    output: { id: \"default\", bands: 1 },\n  }\n}\n\nfunction evaluatePixel(samples) {\n  return [toDb(samples.VH)]\n}\n\n// visualizes decibels from -20 to 0\n\nfunction toDb(linear) {\n  // the following commented out lines are simplified below\n  // var log = 10 * Math.log(linear) / Math.LN10\n  // var val = Math.max(0, (log + 20) / 20)\n  return Math.max(0, Math.log(linear) * 0.21714724095 + 1)\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"bbox\": [\n                1360000,\n                5121900,\n                1370000,\n                5131900,\n            ],\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/EPSG/0/3857\"},\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-1-grd\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2019-02-02T00:00:00Z\",\n                        \"to\": \"2019-04-02T23:59:59Z\",\n                    }\n                },\n                \"processing\": {\"orthorectify\": \"true\"},\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [\n            {\n                \"identifier\": \"default\",\n                \"format\": {\"type\": \"image/png\"},\n            }\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nS1GRD orthorectified decibel gamma0 RGB composite of VV, VH, VV/VH/10 between -20 dB and 0 dB (png)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"VV\", \"VH\"],\n    output: { id: \"default\", bands: 3 },\n  }\n}\n\nfunction evaluatePixel(samples) {\n  var vvdB = toDb(samples.VV)\n  var vhdB = toDb(samples.VH)\n  return [vvdB, vhdB, vvdB / vhdB / 10]\n}\n\n// displays VV in decibels from -20 to 0\n\nfunction toDb(linear) {\n  // the following commented out lines are simplified below\n  // var log = 10 * Math.log(linear) / Math.LN10\n  // var val = Math.max(0, (log + 20) / 20)\n  return Math.max(0, Math.log(linear) * 0.21714724095 + 1)\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"bbox\": [\n                1360000,\n                5121900,\n                1370000,\n                5131900,\n            ],\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/EPSG/0/3857\"},\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-1-grd\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2019-02-02T00:00:00Z\",\n                        \"to\": \"2019-04-02T23:59:59Z\",\n                    }\n                },\n                \"processing\": {\"orthorectify\": \"true\"},\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [\n            {\n                \"identifier\": \"default\",\n                \"format\": {\"type\": \"image/png\"},\n            }\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nS1GRD non-orthorectified linear sigma0 VH between 0 and 0.5 (png)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"VH\"],\n    output: { id: \"default\", bands: 1 },\n  }\n}\n\nfunction evaluatePixel(samples) {\n  return [2 * samples.VH]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"bbox\": [\n                1360000,\n                5121900,\n                1370000,\n                5131900,\n            ],\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/EPSG/0/3857\"},\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-1-grd\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2019-02-02T00:00:00Z\",\n                        \"to\": \"2019-04-02T23:59:59Z\",\n                    }\n                },\n                \"processing\": {\n                    \"orthorectify\": \"false\",\n                    \"backCoeff\": \"SIGMA0_ELLIPSOID\",\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [\n            {\n                \"identifier\": \"default\",\n                \"format\": {\"type\": \"image/png\"},\n            }\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nS1GRD non-orthorectified Lee speckle filtered decibel gamma0 HH between -20 dB and +10 dB (png)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"HH\"],\n    output: { id: \"default\", bands: 1 },\n  }\n}\n\nfunction evaluatePixel(samples) {\n  return [toDb(samples.HH)]\n}\n\n// visualizes decibels from -20 to +10\n\nfunction toDb(linear) {\n  var log = (10 * Math.log(linear)) / Math.LN10\n  return Math.max(0, (log + 20) / 30)\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"bbox\": [\n                18400000,\n                -11330000,\n                18500000,\n                -11430000,\n            ],\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/EPSG/0/3857\"},\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-1-grd\",\n                \"dataFilter\": {\n                    \"acquisitionMode\": \"EW\",\n                    \"timeRange\": {\n                        \"from\": \"2020-09-29T00:00:00Z\",\n                        \"to\": \"2020-09-29T23:59:59Z\",\n                    },\n                },\n                \"processing\": {\n                    \"orthorectify\": \"false\",\n                    \"backCoeff\": \"GAMMA0_ELLIPSOID\",\n                    \"speckleFilter\": {\n                        \"type\": \"LEE\",\n                        \"windowSizeX\": 5,\n                        \"windowSizeY\": 5,\n                    },\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 1000,\n        \"height\": 1000,\n        \"responses\": [\n            {\n                \"identifier\": \"default\",\n                \"format\": {\"type\": \"image/png\"},\n            }\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nS1GRD orthorectified gamma0 two month temporal averaged decibel VV between -20 dB and 0 dB (png)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"VV\", \"dataMask\"],\n    output: { id: \"default\", bands: 1 },\n    mosaicking: Mosaicking.ORBIT,\n  }\n}\n\nfunction evaluatePixel(samples) {\n  return [calculateAverage(samples)]\n}\n\nfunction calculateAverage(samples) {\n  var sum = 0\n  var nValid = 0\n  for (let sample of samples) {\n    if (sample.dataMask != 0) {\n      nValid++\n      sum += toDb(sample.VV)\n    }\n  }\n  return sum / nValid\n}\n\n// visualizes decibels from -20 to 0\n\nfunction toDb(linear) {\n  // the following commented out lines are simplified below\n  // var log = 10 * Math.log(linear) / Math.LN10\n  // var val = Math.max(0, (log + 20) / 20)\n  return Math.max(0, Math.log(linear) * 0.21714724095 + 1)\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"bbox\": [\n                1360000,\n                5121900,\n                1370000,\n                5131900,\n            ],\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/EPSG/0/3857\"},\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-1-grd\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2019-02-01T00:00:00Z\",\n                        \"to\": \"2019-04-02T23:59:59Z\",\n                    },\n                    \"orbitDirection\": \"ASCENDING\",\n                },\n                \"processing\": {\"orthorectify\": \"true\"},\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [\n            {\n                \"identifier\": \"default\",\n                \"format\": {\"type\": \"image/png\"},\n            }\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nS1GRD radiometrically terrain corrected linear gamma0 VV between 0 and 0.5 (png)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"VV\"],\n    output: { id: \"default\", bands: 1 },\n  }\n}\n\nfunction evaluatePixel(samples) {\n  return [2 * samples.VV]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"bbox\": [\n                1095431,\n                5714610,\n                1146158,\n                5754129,\n            ],\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/EPSG/0/3857\"},\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-1-grd\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2019-02-02T00:00:00Z\",\n                        \"to\": \"2019-04-02T23:59:59Z\",\n                    }\n                },\n                \"processing\": {\n                    \"orthorectify\": \"true\",\n                    \"backCoeff\": \"GAMMA0_TERRAIN\",\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [\n            {\n                \"identifier\": \"default\",\n                \"format\": {\"type\": \"image/png\"},\n            }\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nS1GRD radiometrically terrain corrected using Copernicus DEM 30 (png)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"VV\"],\n    output: { id: \"default\", bands: 1 },\n  }\n}\n\nfunction evaluatePixel(samples) {\n  return [2 * samples.VV]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"bbox\": [\n                1095431,\n                5714610,\n                1146158,\n                5754129,\n            ],\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/EPSG/0/3857\"},\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-1-grd\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2019-02-02T00:00:00Z\",\n                        \"to\": \"2019-04-02T23:59:59Z\",\n                    }\n                },\n                \"processing\": {\n                    \"orthorectify\": \"true\",\n                    \"backCoeff\": \"GAMMA0_TERRAIN\",\n                    \"demInstance\": \"COPERNICUS_30\",\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [\n            {\n                \"identifier\": \"default\",\n                \"format\": {\"type\": \"image/png\"},\n            }\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nS1GRD radiometrically terrain corrected with custom DEM oversampling of 3 (png)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"VV\"],\n    output: { id: \"default\", bands: 1 },\n  }\n}\n\nfunction evaluatePixel(samples) {\n  return [2 * samples.VV]\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"bbox\": [\n                1095431,\n                5714610,\n                1146158,\n                5754129,\n            ],\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/EPSG/0/3857\"},\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-1-grd\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2019-02-02T00:00:00Z\",\n                        \"to\": \"2019-04-02T23:59:59Z\",\n                    }\n                },\n                \"processing\": {\n                    \"orthorectify\": \"true\",\n                    \"backCoeff\": \"GAMMA0_TERRAIN\",\n                    \"radiometricTerrainOversampling\": 3,\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 512,\n        \"height\": 512,\n        \"responses\": [\n            {\n                \"identifier\": \"default\",\n                \"format\": {\"type\": \"image/png\"},\n            }\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request)\n\n\nS1GRD radiometrically terrain corrected gamma0 VV and auxiliary data: local incidence angle, scattering area, and shadow mask\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\"VV\", \"localIncidenceAngle\", \"scatteringArea\", \"shadowMask\"],\n    output: [\n      { id: \"s1_rtc_VV_area\", bands: 2, sampleType: \"FLOAT32\" },\n      { id: \"s1_rtc_angle_mask\", bands: 2, sampleType: \"UINT8\" },\n    ],\n  }\n}\n\nfunction evaluatePixel(samples) {\n  return {\n    s1_rtc_VV_area: [samples.VV, samples.scatteringArea],\n    s1_rtc_angle_mask: [samples.localIncidenceAngle, samples.shadowMask],\n  }\n}\n\"\"\"\n\nrequest = {\n    \"input\": {\n        \"bounds\": {\n            \"bbox\": [\n                565556.94,\n                5048644.47,\n                600656.56,\n                5076658.33,\n            ],\n            \"properties\": {\"crs\": \"http://www.opengis.net/def/crs/EPSG/0/32632\"},\n        },\n        \"data\": [\n            {\n                \"type\": \"sentinel-1-grd\",\n                \"dataFilter\": {\n                    \"timeRange\": {\n                        \"from\": \"2019-02-02T00:00:00Z\",\n                        \"to\": \"2019-04-02T23:59:59Z\",\n                    }\n                },\n                \"processing\": {\n                    \"orthorectify\": \"true\",\n                    \"backCoeff\": \"GAMMA0_TERRAIN\",\n                },\n            }\n        ],\n    },\n    \"output\": {\n        \"width\": 1024,\n        \"height\": 796,\n        \"responses\": [\n            {\n                \"identifier\": \"s1_rtc_VV_area\",\n                \"format\": {\"type\": \"image/tiff\"},\n            },\n            {\n                \"identifier\": \"s1_rtc_angle_mask\",\n                \"format\": {\"type\": \"image/tiff\"},\n            },\n        ],\n    },\n    \"evalscript\": evalscript,\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/process\"\nresponse = requests.post(url, json=request, headers={\"Accept\": \"application/tar\"})"
  },
  {
    "objectID": "APIs/SentinelHub/Process/Crs.html",
    "href": "APIs/SentinelHub/Process/Crs.html",
    "title": "CRS support",
    "section": "",
    "text": "The list of coordinate reference systems supported by Sentinel Hub API is provided below. The coordinate reference system must be set with an URL starting with http://www.opengis.net/def/crs/ and it must be set under the field input.bounds.properties.crs, e.g. request in WGS 84 reference system, defined with the URL http://www.opengis.net/def/crs/EPSG/0/4326:"
  },
  {
    "objectID": "APIs/SentinelHub/Process/Crs.html#wgs-84",
    "href": "APIs/SentinelHub/Process/Crs.html#wgs-84",
    "title": "CRS support",
    "section": "WGS 84:",
    "text": "WGS 84:\n\nhttp://www.opengis.net/def/crs/OGC/1.3/CRS84\nhttp://www.opengis.net/def/crs/EPSG/0/4326"
  },
  {
    "objectID": "APIs/SentinelHub/Process/Crs.html#wgs-84--pseudo-mercator",
    "href": "APIs/SentinelHub/Process/Crs.html#wgs-84--pseudo-mercator",
    "title": "CRS support",
    "section": "WGS 84 / Pseudo-Mercator:",
    "text": "WGS 84 / Pseudo-Mercator:\n\nhttp://www.opengis.net/def/crs/EPSG/0/3857"
  },
  {
    "objectID": "APIs/SentinelHub/Process/Crs.html#utm-northern-hemisphere",
    "href": "APIs/SentinelHub/Process/Crs.html#utm-northern-hemisphere",
    "title": "CRS support",
    "section": "UTM northern hemisphere:",
    "text": "UTM northern hemisphere:\n\nhttp://www.opengis.net/def/crs/EPSG/0/32601\nhttp://www.opengis.net/def/crs/EPSG/0/32602\n...\nhttp://www.opengis.net/def/crs/EPSG/0/32660\n\nThe last two digits of EPSG codes above represent the number of corresponding UTM zone in northern hemisphere, e.g. use http://www.opengis.net/def/crs/EPSG/0/32612 for UTM zone 12N."
  },
  {
    "objectID": "APIs/SentinelHub/Process/Crs.html#utm-southern-hemisphere",
    "href": "APIs/SentinelHub/Process/Crs.html#utm-southern-hemisphere",
    "title": "CRS support",
    "section": "UTM southern hemisphere:",
    "text": "UTM southern hemisphere:\n\nhttp://www.opengis.net/def/crs/EPSG/0/32701\nhttp://www.opengis.net/def/crs/EPSG/0/32702\n...\nhttp://www.opengis.net/def/crs/EPSG/0/32760\n\nThe last two digits of EPSG codes above represent the number of corresponding UTM zone in southern hemisphere, e.g. use http://www.opengis.net/def/crs/EPSG/0/32712 for UTM zone 12S."
  },
  {
    "objectID": "APIs/SentinelHub/Process/Crs.html#others",
    "href": "APIs/SentinelHub/Process/Crs.html#others",
    "title": "CRS support",
    "section": "Others:",
    "text": "Others:\n\nhttp://www.opengis.net/def/crs/EPSG/0/2154\nhttp://www.opengis.net/def/crs/EPSG/0/2180\nhttp://www.opengis.net/def/crs/EPSG/0/2193\nhttp://www.opengis.net/def/crs/EPSG/0/3003\nhttp://www.opengis.net/def/crs/EPSG/0/3004\nhttp://www.opengis.net/def/crs/EPSG/0/3031\nhttp://www.opengis.net/def/crs/EPSG/0/3035\nhttp://www.opengis.net/def/crs/EPSG/0/3346\nhttp://www.opengis.net/def/crs/EPSG/0/3413\nhttp://www.opengis.net/def/crs/EPSG/0/3416\nhttp://www.opengis.net/def/crs/EPSG/0/3765\nhttp://www.opengis.net/def/crs/EPSG/0/3794\nhttp://www.opengis.net/def/crs/EPSG/0/3844\nhttp://www.opengis.net/def/crs/EPSG/0/3912\nhttp://www.opengis.net/def/crs/EPSG/0/3995\nhttp://www.opengis.net/def/crs/EPSG/0/4026\nhttp://www.opengis.net/def/crs/EPSG/0/5514\nhttp://www.opengis.net/def/crs/EPSG/0/28992"
  },
  {
    "objectID": "APIs/SentinelHub/Statistical/Examples.html",
    "href": "APIs/SentinelHub/Statistical/Examples.html",
    "title": "Examples of Statistical API",
    "section": "",
    "text": "The requests below are written in Python. To execute them you need to create an OAuth client as is explained here. It is named oauth in these examples. Jupyter notebook with all examples can be downloaded here.\n\nStatistics for one single-band output on a given day\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [{\n      bands: [\n        \"B04\",\n        \"dataMask\"\n      ]\n    }],\n    output: [\n      {\n        id: \"output_B04\",\n        bands: 1,\n        sampleType: \"FLOAT32\"\n      },\n      {\n        id: \"dataMask\",\n        bands: 1\n      }]\n  }\n}\nfunction evaluatePixel(samples) {\n    return {\n        output_B04: [samples.B04],\n        dataMask: [samples.dataMask]\n        }\n}\n\"\"\"\n\nstats_request = {\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [414315, 4958219, 414859, 4958819],\n    \"properties\": {\n        \"crs\": \"http://www.opengis.net/def/crs/EPSG/0/32633\"\n        }\n    },\n    \"data\": [\n      {\n        \"type\": \"sentinel-2-l2a\",\n        \"dataFilter\": {\n            \"mosaickingOrder\": \"leastRecent\"\n        },\n      }\n    ]\n  },\n  \"aggregation\": {\n    \"timeRange\": {\n            \"from\": \"2020-07-04T00:00:00Z\",\n            \"to\": \"2020-07-05T00:00:00Z\"\n      },\n    \"aggregationInterval\": {\n        \"of\": \"P1D\"\n    },\n    \"evalscript\": evalscript,\n    \"resx\": 10,\n    \"resy\": 10\n  }\n}\n\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/statistics\"\nresponse = oauth.request(\"POST\", url=url , headers=headers, json=stats_request)\nsh_statistics = response.json()\nsh_statistics\n{'data': [{'interval': {'from': '2020-07-04T00:00:00Z',\n    'to': '2020-07-05T00:00:00Z'},\n   'outputs': {'output_B04': {'bands': {'B0': {'stats': {'min': 0.07970000058412552,\n        'max': 0.30959999561309814,\n        'mean': 0.11471141986778864,\n        'stDev': 0.034298170449733226,\n        'sampleCount': 3240,\n        'noDataCount': 0}}}}}}],\n 'status': 'OK'}\n\n\nStatistics, histogram and percentiles for one single-band output\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [{\n      bands: [\n        \"B04\",\n        \"dataMask\"\n      ]\n    }],\n    output: [\n      {\n        id: \"output_B04\",\n        bands: 1,\n        sampleType: \"FLOAT32\"\n      },\n      {\n        id: \"dataMask\",\n        bands: 1\n      }]\n  }\n}\nfunction evaluatePixel(samples) {\n    return {\n        output_B04: [samples.B04],\n        dataMask: [samples.dataMask]\n        }\n}\n\"\"\"\n\nstats_request = {\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [414315, 4958219, 414859, 4958819],\n    \"properties\": {\n        \"crs\": \"http://www.opengis.net/def/crs/EPSG/0/32633\"\n        }\n    },\n    \"data\": [\n      {\n        \"type\": \"sentinel-2-l2a\",\n        \"dataFilter\": {\n            \"mosaickingOrder\": \"leastRecent\"\n        },\n      }\n    ]\n  },\n  \"aggregation\": {\n    \"timeRange\": {\n            \"from\": \"2020-07-04T00:00:00Z\",\n            \"to\": \"2020-07-05T00:00:00Z\"\n      },\n    \"aggregationInterval\": {\n        \"of\": \"P1D\"\n    },\n    \"evalscript\": evalscript,\n    \"resx\": 10,\n    \"resy\": 10\n  },\n  \"calculations\": {\n    \"default\": {\n      \"histograms\": {\n        \"default\": {\n          \"nBins\": 5,\n          \"lowEdge\": 0.0,\n          \"highEdge\": 0.3\n        }\n      },\n      \"statistics\": {\n        \"default\": {\n          \"percentiles\": {\n            \"k\": [ 33, 50, 75, 90 ]\n          }\n        }\n      }\n    }\n  }\n}\n\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/statistics\"\n\nresponse = oauth.request(\"POST\", url=url , headers=headers, json=stats_request)\nsh_statistics = response.json()\nsh_statistics\n{'data': [{'interval': {'from': '2020-07-04T00:00:00Z',\n    'to': '2020-07-05T00:00:00Z'},\n   'outputs': {'output_B04': {'bands': {'B0': {'stats': {'min': 0.07970000058412552,\n        'max': 0.30959999561309814,\n        'mean': 0.11471141986778864,\n        'stDev': 0.034298170449733226,\n        'sampleCount': 3240,\n        'noDataCount': 0,\n        'percentiles': {'33.0': 0.09709999710321426,\n         '50.0': 0.10360000282526016,\n         '75.0': 0.11940000206232071,\n         '90.0': 0.16040000319480896}},\n       'histogram': {'bins': [{'lowEdge': 0.0, 'highEdge': 0.06, 'count': 0},\n         {'lowEdge': 0.06, 'highEdge': 0.12, 'count': 2458},\n         {'lowEdge': 0.12, 'highEdge': 0.18, 'count': 558},\n         {'lowEdge': 0.18, 'highEdge': 0.24, 'count': 177},\n         {'lowEdge': 0.24, 'highEdge': 0.3, 'count': 44}],\n        'overflowCount': 3,\n        'underflowCount': 0}}}}}}],\n 'status': 'OK'}\n\n\nStatistics for one single-band output for two months with 10 days aggregation period\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [{\n      bands: [\n        \"B04\",\n        \"dataMask\"\n      ]\n    }],\n    output: [\n      {\n        id: \"output_B04\",\n        bands: 1,\n        sampleType: \"FLOAT32\"\n      },\n      {\n        id: \"dataMask\",\n        bands: 1\n      }]\n  }\n}\nfunction evaluatePixel(samples) {\n    return {\n        output_B04: [samples.B04],\n        dataMask: [samples.dataMask]\n        }\n}\n\"\"\"\n\nstats_request = {\n  \"input\": {\n   \"bounds\": {\n      \"bbox\": [414315, 4958219, 414859, 4958819],\n    \"properties\": {\n        \"crs\": \"http://www.opengis.net/def/crs/EPSG/0/32633\"\n        }\n    },\n    \"data\": [\n      {\n        \"type\": \"sentinel-2-l2a\",\n        \"dataFilter\": {\n            \"mosaickingOrder\": \"leastRecent\"\n        }\n      }\n    ]\n  },\n  \"aggregation\": {\n    \"timeRange\": {\n            \"from\": \"2020-06-01T00:00:00Z\",\n            \"to\": \"2020-07-31T00:00:00Z\"\n      },\n    \"aggregationInterval\": {\n        \"of\": \"P10D\"\n    },\n    \"evalscript\": evalscript,\n    \"resx\": 10,\n    \"resy\": 10\n  }\n}\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/statistics\"\n\nresponse = oauth.request(\"POST\", url=url , headers=headers, json=stats_request)\nsh_statistics = response.json()\nsh_statistics\n{'data': [{'interval': {'from': '2020-06-01T00:00:00Z',\n    'to': '2020-06-11T00:00:00Z'},\n   'outputs': {'output_B04': {'bands': {'B0': {'stats': {'min': 0.7892000079154968,\n        'max': 0.8303999900817871,\n        'mean': 0.804223583473102,\n        'stDev': 0.0067066009561434865,\n        'sampleCount': 3240,\n        'noDataCount': 0}}}}}},\n  {'interval': {'from': '2020-06-11T00:00:00Z', 'to': '2020-06-21T00:00:00Z'},\n   'outputs': {'output_B04': {'bands': {'B0': {'stats': {'min': 0.016300000250339508,\n        'max': 0.5956000089645386,\n        'mean': 0.06240126554233315,\n        'stDev': 0.06266500670629409,\n        'sampleCount': 3240,\n        'noDataCount': 0}}}}}},\n  {'interval': {'from': '2020-06-21T00:00:00Z', 'to': '2020-07-01T00:00:00Z'},\n   'outputs': {'output_B04': {'bands': {'B0': {'stats': {'min': 0.026000000536441803,\n        'max': 0.43799999356269836,\n        'mean': 0.06872379640174772,\n        'stDev': 0.056520330692016944,\n        'sampleCount': 3240,\n        'noDataCount': 0}}}}}},\n  {'interval': {'from': '2020-07-01T00:00:00Z', 'to': '2020-07-11T00:00:00Z'},\n   'outputs': {'output_B04': {'bands': {'B0': {'stats': {'min': 0.07970000058412552,\n        'max': 0.30959999561309814,\n        'mean': 0.11471141986778864,\n        'stDev': 0.034298170449733226,\n        'sampleCount': 3240,\n        'noDataCount': 0}}}}}},\n  {'interval': {'from': '2020-07-11T00:00:00Z', 'to': '2020-07-21T00:00:00Z'},\n   'outputs': {'output_B04': {'bands': {'B0': {'stats': {'min': 0.017400000244379044,\n        'max': 0.4187999963760376,\n        'mean': 0.062194598779473156,\n        'stDev': 0.06317700445712106,\n        'sampleCount': 3240,\n        'noDataCount': 0}}}}}},\n  {'interval': {'from': '2020-07-21T00:00:00Z', 'to': '2020-07-31T00:00:00Z'},\n   'outputs': {'output_B04': {'bands': {'B0': {'stats': {'min': 0.13920000195503235,\n        'max': 0.4927999973297119,\n        'mean': 0.3146395680115182,\n        'stDev': 0.054700527707146035,\n        'sampleCount': 3240,\n        'noDataCount': 0}}}}}}],\n 'status': 'OK'}\n\n\nPercentage of cloudy pixels for selected area of interest\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [{\n      bands: [\n        \"CLM\",\n        \"dataMask\"\n      ]\n    }],\n    output: [\n      {\n        id: \"data\",\n        bands: 1\n      },\n      {\n        id: \"dataMask\",\n        bands: 1\n      }]\n  }\n}\nfunction evaluatePixel(samples) {\n    return {\n        data: [samples.CLM],\n        dataMask: [samples.dataMask]\n        }\n}\n\"\"\"\n\nstats_request = {\n  \"input\": {\n   \"bounds\": {\n      \"bbox\": [\n          413307.629466,\n          4957434.513693,\n          415152.151806,\n          4958814.807431\n        ],\n    \"properties\": {\n        \"crs\": \"http://www.opengis.net/def/crs/EPSG/0/32633\"\n        }\n    },\n    \"data\": [\n      {\n        \"type\": \"sentinel-2-l2a\",\n        \"dataFilter\": {\n            \"mosaickingOrder\": \"leastRecent\"\n        }\n      }\n    ]\n  },\n  \"aggregation\": {\n    \"timeRange\": {\n            \"from\": \"2020-11-01T00:00:00Z\",\n            \"to\": \"2020-12-31T00:00:00Z\"\n      },\n    \"aggregationInterval\": {\n        \"of\": \"P1D\"\n    },\n    \"evalscript\": evalscript,\n    \"resx\": 10,\n    \"resy\": 10\n  }\n}\n\nheaders = {\n  'Content-Type': 'application/json',\n   'Accept': 'application/json'\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/statistics\"\nresponse = oauth.request(\"POST\", url=url, headers=headers, json=stats_request)\nsh_statistics = response.json()\nsh_statistics\n{'data': [{'interval': {'from': '2020-11-01T00:00:00Z',\n    'to': '2020-11-02T00:00:00Z'},\n   'outputs': {'data': {'bands': {'B0': {'stats': {'min': 1.0,\n        'max': 1.0,\n        'mean': 1.0,\n        'stDev': 0.0,\n        'sampleCount': 25392,\n        'noDataCount': 0}}}}}},\n  {'interval': {'from': '2020-11-06T00:00:00Z', 'to': '2020-11-07T00:00:00Z'},\n   'outputs': {'data': {'bands': {'B0': {'stats': {'min': 0.0,\n        'max': 0.0,\n        'mean': 0.0,\n        'stDev': 0.0,\n        'sampleCount': 25392,\n        'noDataCount': 0}}}}}},\n  {'interval': {'from': '2020-11-11T00:00:00Z', 'to': '2020-11-12T00:00:00Z'},\n   'outputs': {'data': {'bands': {'B0': {'stats': {'min': 0.0,\n        'max': 0.0,\n        'mean': 0.0,\n        'stDev': 0.0,\n        'sampleCount': 25392,\n        'noDataCount': 0}}}}}},\n  {'interval': {'from': '2020-11-21T00:00:00Z', 'to': '2020-11-22T00:00:00Z'},\n   'outputs': {'data': {'bands': {'B0': {'stats': {'min': 0.0,\n        'max': 0.0,\n        'mean': 0.0,\n        'stDev': 0.0,\n        'sampleCount': 25392,\n        'noDataCount': 0}}}}}},\n  {'interval': {'from': '2020-11-26T00:00:00Z', 'to': '2020-11-27T00:00:00Z'},\n   'outputs': {'data': {'bands': {'B0': {'stats': {'min': 0.0,\n        'max': 1.0,\n        'mean': 0.31253938248267044,\n        'stDev': 0.46352833449533853,\n        'sampleCount': 25392,\n        'noDataCount': 0}}}}}},\n  {'interval': {'from': '2020-12-01T00:00:00Z', 'to': '2020-12-02T00:00:00Z'},\n   'outputs': {'data': {'bands': {'B0': {'stats': {'min': 0.0,\n        'max': 1.0,\n        'mean': 0.2800882167611853,\n        'stDev': 0.44904210002261963,\n        'sampleCount': 25392,\n        'noDataCount': 0}}}}}},\n  {'interval': {'from': '2020-12-06T00:00:00Z', 'to': '2020-12-07T00:00:00Z'},\n   'outputs': {'data': {'bands': {'B0': {'stats': {'min': 1.0,\n        'max': 1.0,\n        'mean': 1.0,\n        'stDev': 0.0,\n        'sampleCount': 25392,\n        'noDataCount': 0}}}}}},\n  {'interval': {'from': '2020-12-11T00:00:00Z', 'to': '2020-12-12T00:00:00Z'},\n   'outputs': {'data': {'bands': {'B0': {'stats': {'min': 0.0,\n        'max': 1.0,\n        'mean': 0.9844439193446739,\n        'stDev': 0.12375010711094206,\n        'sampleCount': 25392,\n        'noDataCount': 0}}}}}},\n  {'interval': {'from': '2020-12-16T00:00:00Z', 'to': '2020-12-17T00:00:00Z'},\n   'outputs': {'data': {'bands': {'B0': {'stats': {'min': 1.0,\n        'max': 1.0,\n        'mean': 1.0,\n        'stDev': 0.0,\n        'sampleCount': 25392,\n        'noDataCount': 0}}}}}},\n  {'interval': {'from': '2020-12-21T00:00:00Z', 'to': '2020-12-22T00:00:00Z'},\n   'outputs': {'data': {'bands': {'B0': {'stats': {'min': 1.0,\n        'max': 1.0,\n        'mean': 1.0,\n        'stDev': 0.0,\n        'sampleCount': 25392,\n        'noDataCount': 0}}}}}},\n  {'interval': {'from': '2020-12-26T00:00:00Z', 'to': '2020-12-27T00:00:00Z'},\n   'outputs': {'data': {'bands': {'B0': {'stats': {'min': 0.0,\n        'max': 1.0,\n        'mean': 0.1512287334593577,\n        'stDev': 0.35827168969322143,\n        'sampleCount': 25392,\n        'noDataCount': 0}}}}}}],\n 'status': 'OK'}\ndates_without_clouds = [(data[\"interval\"], int(100 * data[\"outputs\"][\"data\"]['bands']['B0']['stats']['mean']) ) for data in sh_statistics[\"data\"]]\n\nfor item in dates_without_clouds:\n    print( item )\n({'from': '2020-11-01T00:00:00Z', 'to': '2020-11-02T00:00:00Z'}, 100)\n({'from': '2020-11-06T00:00:00Z', 'to': '2020-11-07T00:00:00Z'}, 0)\n({'from': '2020-11-11T00:00:00Z', 'to': '2020-11-12T00:00:00Z'}, 0)\n({'from': '2020-11-21T00:00:00Z', 'to': '2020-11-22T00:00:00Z'}, 0)\n({'from': '2020-11-26T00:00:00Z', 'to': '2020-11-27T00:00:00Z'}, 31)\n({'from': '2020-12-01T00:00:00Z', 'to': '2020-12-02T00:00:00Z'}, 28)\n({'from': '2020-12-06T00:00:00Z', 'to': '2020-12-07T00:00:00Z'}, 100)\n({'from': '2020-12-11T00:00:00Z', 'to': '2020-12-12T00:00:00Z'}, 98)\n({'from': '2020-12-16T00:00:00Z', 'to': '2020-12-17T00:00:00Z'}, 100)\n({'from': '2020-12-21T00:00:00Z', 'to': '2020-12-22T00:00:00Z'}, 100)\n({'from': '2020-12-26T00:00:00Z', 'to': '2020-12-27T00:00:00Z'}, 15)\n\n\nBasic statistics of NDVI with water pixels excluded (custom output dataMask)\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [{\n      bands: [\n        \"B04\",\n        \"B08\",\n        \"SCL\",\n        \"dataMask\"\n      ]\n    }],\n    output: [\n      {\n        id: \"data\",\n        bands: 1\n      },\n      {\n        id: \"dataMask\",\n        bands: 1\n      }]\n  }\n}\n\nfunction evaluatePixel(samples) {\n    let ndvi = (samples.B08 - samples.B04)/(samples.B08 + samples.B04)\n    \n    var validNDVIMask = 1\n    if (samples.B08 + samples.B04 == 0 ){\n        validNDVIMask = 0\n    }\n    \n    var noWaterMask = 1\n    if (samples.SCL == 6 ){\n        noWaterMask = 0\n    }\n\n    return {\n        data: [ndvi],\n        // Exclude nodata pixels, pixels where ndvi is not defined and water pixels from statistics:\n        dataMask: [samples.dataMask * validNDVIMask * noWaterMask]\n    }\n}\n\"\"\"\n\n\nstats_request = {\n  \"input\": {\n   \"bounds\": {\n      \"geometry\": {\n          \"type\": \"Polygon\",\n          \"coordinates\": [\n            [\n              [\n                458085.878866,\n                5097236.833044\n              ],\n              [\n                457813.834156,\n                5096808.351383\n              ],\n              [\n                457979.897062,\n                5096313.767184\n              ],\n              [\n                458146.639373,\n                5096405.411294\n              ],\n              [\n                458085.878866,\n                5097236.833044\n              ]\n            ]\n          ]\n        },\n    \"properties\": {\n        \"crs\": \"http://www.opengis.net/def/crs/EPSG/0/32633\"\n        }\n    },\n    \"data\": [\n      {\n        \"type\": \"sentinel-2-l2a\",\n        \"dataFilter\": {\n            \"mosaickingOrder\": \"leastCC\"\n        }\n      }\n    ]\n  },\n  \"aggregation\": {\n    \"timeRange\": {\n        \"from\": \"2020-01-01T00:00:00Z\",\n        \"to\": \"2020-12-31T00:00:00Z\"\n      },\n    \"aggregationInterval\": {\n        \"of\": \"P30D\"\n    },\n    \"evalscript\": evalscript,\n    \"resx\": 10,\n    \"resy\": 10\n  }\n}\n\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/statistics\"\n\nresponse = oauth.request(\"POST\", url=url, headers=headers, json=stats_request)\nsh_statistics = response.json()\nsh_statistics\n{'data': [{'interval': {'from': '2020-01-01T00:00:00Z',\n    'to': '2020-01-31T00:00:00Z'},\n   'outputs': {'data': {'bands': {'B0': {'stats': {'min': 0.24306687712669373,\n        'max': 0.6244725584983826,\n        'mean': 0.4123224201824293,\n        'stDev': 0.055874589607421886,\n        'sampleCount': 3036,\n        'noDataCount': 1192}}}}}},\n  {'interval': {'from': '2020-01-31T00:00:00Z', 'to': '2020-03-01T00:00:00Z'},\n   'outputs': {'data': {'bands': {'B0': {'stats': {'min': 0.2451941967010498,\n        'max': 0.4233206510543823,\n        'mean': 0.3160828609431641,\n        'stDev': 0.0280772593636271,\n        'sampleCount': 3036,\n        'noDataCount': 1192}}}}}},\n  {'interval': {'from': '2020-03-01T00:00:00Z', 'to': '2020-03-31T00:00:00Z'},\n   'outputs': {'data': {'bands': {'B0': {'stats': {'min': 0.4236144721508026,\n        'max': 0.8021259307861328,\n        'mean': 0.5844831434836089,\n        'stDev': 0.05766820795482124,\n        'sampleCount': 3036,\n        'noDataCount': 1192}}}}}},\n  {'interval': {'from': '2020-03-31T00:00:00Z', 'to': '2020-04-30T00:00:00Z'},\n   'outputs': {'data': {'bands': {'B0': {'stats': {'min': 0.4647541046142578,\n        'max': 0.8266128897666931,\n        'mean': 0.6615912824901472,\n        'stDev': 0.05539347152437238,\n        'sampleCount': 3036,\n        'noDataCount': 1192}}}}}},\n  {'interval': {'from': '2020-04-30T00:00:00Z', 'to': '2020-05-30T00:00:00Z'},\n   'outputs': {'data': {'bands': {'B0': {'stats': {'min': 0.1761743128299713,\n        'max': 0.870899498462677,\n        'mean': 0.6880682412526884,\n        'stDev': 0.18833356676740057,\n        'sampleCount': 3036,\n        'noDataCount': 1192}}}}}},\n  {'interval': {'from': '2020-05-30T00:00:00Z', 'to': '2020-06-29T00:00:00Z'},\n   'outputs': {'data': {'bands': {'B0': {'stats': {'min': 0.6883189082145691,\n        'max': 0.8775584697723389,\n        'mean': 0.8230951517303176,\n        'stDev': 0.026851310273968688,\n        'sampleCount': 3036,\n        'noDataCount': 1192}}}}}},\n  {'interval': {'from': '2020-06-29T00:00:00Z', 'to': '2020-07-29T00:00:00Z'},\n   'outputs': {'data': {'bands': {'B0': {'stats': {'min': 0.8124191164970398,\n        'max': 0.9270430207252502,\n        'mean': 0.8977047195274247,\n        'stDev': 0.01321883825220214,\n        'sampleCount': 3036,\n        'noDataCount': 1192}}}}}},\n  {'interval': {'from': '2020-07-29T00:00:00Z', 'to': '2020-08-28T00:00:00Z'},\n   'outputs': {'data': {'bands': {'B0': {'stats': {'min': 0.750795304775238,\n        'max': 0.8925060033798218,\n        'mean': 0.8437445996058478,\n        'stDev': 0.017705930134783242,\n        'sampleCount': 3036,\n        'noDataCount': 1192}}}}}},\n  {'interval': {'from': '2020-08-28T00:00:00Z', 'to': '2020-09-27T00:00:00Z'},\n   'outputs': {'data': {'bands': {'B0': {'stats': {'min': 0.7094070315361023,\n        'max': 0.8823529481887817,\n        'mean': 0.8138526516467535,\n        'stDev': 0.020639924263070358,\n        'sampleCount': 3036,\n        'noDataCount': 1192}}}}}},\n  {'interval': {'from': '2020-09-27T00:00:00Z', 'to': '2020-10-27T00:00:00Z'},\n   'outputs': {'data': {'bands': {'B0': {'stats': {'min': 0.6416097283363342,\n        'max': 0.8256189227104187,\n        'mean': 0.7368144742384923,\n        'stDev': 0.02884084473079313,\n        'sampleCount': 3036,\n        'noDataCount': 1192}}}}}},\n  {'interval': {'from': '2020-10-27T00:00:00Z', 'to': '2020-11-26T00:00:00Z'},\n   'outputs': {'data': {'bands': {'B0': {'stats': {'min': 0.5131579041481018,\n        'max': 0.9108409285545349,\n        'mean': 0.6912739742345253,\n        'stDev': 0.06273793790576106,\n        'sampleCount': 3036,\n        'noDataCount': 1192}}}}}},\n  {'interval': {'from': '2020-11-26T00:00:00Z', 'to': '2020-12-26T00:00:00Z'},\n   'outputs': {'data': {'bands': {'B0': {'stats': {'min': -0.01446416787803173,\n        'max': 0.015364916995167732,\n        'mean': 0.0018048733875211391,\n        'stDev': 0.004322122712106793,\n        'sampleCount': 3036,\n        'noDataCount': 1192}}}}}}],\n 'status': 'OK'}\n\n\nStatistics of maximum monthly NDVI for a parcel in 2020\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [{\n      bands: [\n        \"B04\",\n        \"B08\",\n        \"SCL\",\n        \"dataMask\"\n      ]\n    }],\n    mosaicking: \"ORBIT\",\n    output: [\n      {\n        id: \"data\",\n        bands: [\"monthly_max_ndvi\"]\n      },\n      {\n        id: \"dataMask\",\n        bands: 1\n      }]\n  }\n}\n\nfunction evaluatePixel(samples) {\n    var max = 0;\n    var hasData = 0;\n    for (var i=0;i<samples.length;i++) {\n      if (samples[i].dataMask == 1 && samples[i].SCL != 6 && samples[i].B04+samples[i].B08 != 0 ){\n        hasData = 1\n        var ndvi = (samples[i].B08 - samples[i].B04)/(samples[i].B08 + samples[i].B04);\n        max = ndvi > max ? ndvi:max;\n      }\n    }\n    \n    return {\n        data: [max],\n        dataMask: [hasData]\n    }\n}\n\"\"\"\n\nstats_request = {\n  \"input\": {\n   \"bounds\": {\n      \"geometry\": {\n          \"type\": \"Polygon\",\n          \"coordinates\": [\n            [\n              [\n                458085.878866,\n                5097236.833044\n              ],\n              [\n                457813.834156,\n                5096808.351383\n              ],\n              [\n                457979.897062,\n                5096313.767184\n              ],\n              [\n                458146.639373,\n                5096405.411294\n              ],\n              [\n                458085.878866,\n                5097236.833044\n              ]\n            ]\n          ]\n        },\n    \"properties\": {\n        \"crs\": \"http://www.opengis.net/def/crs/EPSG/0/32633\"\n        }\n    },\n    \"data\": [\n      {\n        \"type\": \"sentinel-2-l2a\",\n        \"dataFilter\": {\n            \"mosaickingOrder\": \"leastCC\"\n        }\n      }\n    ]\n  },\n  \"aggregation\": {\n    \"timeRange\": {\n            \"from\": \"2020-01-01T00:00:00Z\",\n            \"to\": \"2021-01-01T00:00:00Z\"\n      },\n    \"aggregationInterval\": {\n        \"of\": \"P1M\"\n    },\n    \"evalscript\": evalscript,\n    \"resx\": 10,\n    \"resy\": 10\n  }\n}\n\nheaders = {\n  'Content-Type': 'application/json',\n   'Accept': 'application/json'\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/statistics\"\n\nresponse = oauth.request(\"POST\", url=url, headers=headers, json=stats_request)\nsh_statistics = response.json()\nsh_statistics\n{'data': [{'interval': {'from': '2020-01-01T00:00:00Z',\n    'to': '2020-02-01T00:00:00Z'},\n   'outputs': {'data': {'bands': {'monthly_max_ndvi': {'stats': {'min': 0.4755639135837555,\n        'max': 0.881286084651947,\n        'mean': 0.6396090604381046,\n        'stDev': 0.06844923487502963,\n        'sampleCount': 3036,\n        'noDataCount': 1192}}}}}},\n  {'interval': {'from': '2020-02-01T00:00:00Z', 'to': '2020-03-01T00:00:00Z'},\n   'outputs': {'data': {'bands': {'monthly_max_ndvi': {'stats': {'min': 0.3580246865749359,\n        'max': 0.8721038103103638,\n        'mean': 0.5956351390500386,\n        'stDev': 0.07367438999713516,\n        'sampleCount': 3036,\n        'noDataCount': 1192}}}}}},\n  {'interval': {'from': '2020-03-01T00:00:00Z', 'to': '2020-04-01T00:00:00Z'},\n   'outputs': {'data': {'bands': {'monthly_max_ndvi': {'stats': {'min': 0.4486735761165619,\n        'max': 0.8021259307861328,\n        'mean': 0.5871563556072766,\n        'stDev': 0.057052289003643133,\n        'sampleCount': 3036,\n        'noDataCount': 1192}}}}}},\n  {'interval': {'from': '2020-04-01T00:00:00Z', 'to': '2020-05-01T00:00:00Z'},\n   'outputs': {'data': {'bands': {'monthly_max_ndvi': {'stats': {'min': 0.7103235721588135,\n        'max': 0.9151291251182556,\n        'mean': 0.8202670164519443,\n        'stDev': 0.029936259510749567,\n        'sampleCount': 3036,\n        'noDataCount': 1192}}}}}},\n  {'interval': {'from': '2020-05-01T00:00:00Z', 'to': '2020-06-01T00:00:00Z'},\n   'outputs': {'data': {'bands': {'monthly_max_ndvi': {'stats': {'min': 0.7955418825149536,\n        'max': 0.9187881350517273,\n        'mean': 0.8889340774162204,\n        'stDev': 0.013139359632348635,\n        'sampleCount': 3036,\n        'noDataCount': 1192}}}}}},\n  {'interval': {'from': '2020-06-01T00:00:00Z', 'to': '2020-07-01T00:00:00Z'},\n   'outputs': {'data': {'bands': {'monthly_max_ndvi': {'stats': {'min': 0.6883189082145691,\n        'max': 0.8775584697723389,\n        'mean': 0.8258738168990016,\n        'stDev': 0.025802682912912194,\n        'sampleCount': 3036,\n        'noDataCount': 1192}}}}}},\n  {'interval': {'from': '2020-07-01T00:00:00Z', 'to': '2020-08-01T00:00:00Z'},\n   'outputs': {'data': {'bands': {'monthly_max_ndvi': {'stats': {'min': 0.8329545259475708,\n        'max': 0.9370484948158264,\n        'mean': 0.9037947789513383,\n        'stDev': 0.01278601507445675,\n        'sampleCount': 3036,\n        'noDataCount': 1192}}}}}},\n  {'interval': {'from': '2020-08-01T00:00:00Z', 'to': '2020-09-01T00:00:00Z'},\n   'outputs': {'data': {'bands': {'monthly_max_ndvi': {'stats': {'min': 0.750795304775238,\n        'max': 0.8925060033798218,\n        'mean': 0.843880225772972,\n        'stDev': 0.017580399946741675,\n        'sampleCount': 3036,\n        'noDataCount': 1192}}}}}},\n  {'interval': {'from': '2020-09-01T00:00:00Z', 'to': '2020-10-01T00:00:00Z'},\n   'outputs': {'data': {'bands': {'monthly_max_ndvi': {'stats': {'min': 0.7121148109436035,\n        'max': 0.8823529481887817,\n        'mean': 0.8138710224835326,\n        'stDev': 0.02056652680651673,\n        'sampleCount': 3036,\n        'noDataCount': 1192}}}}}},\n  {'interval': {'from': '2020-10-01T00:00:00Z', 'to': '2020-11-01T00:00:00Z'},\n   'outputs': {'data': {'bands': {'monthly_max_ndvi': {'stats': {'min': 0.6416097283363342,\n        'max': 0.8256189227104187,\n        'mean': 0.7368144742384923,\n        'stDev': 0.02884084473079313,\n        'sampleCount': 3036,\n        'noDataCount': 1192}}}}}},\n  {'interval': {'from': '2020-11-01T00:00:00Z', 'to': '2020-12-01T00:00:00Z'},\n   'outputs': {'data': {'bands': {'monthly_max_ndvi': {'stats': {'min': 0.5424679517745972,\n        'max': 0.9108409285545349,\n        'mean': 0.7069293897671695,\n        'stDev': 0.05380689467103403,\n        'sampleCount': 3036,\n        'noDataCount': 1192}}}}}},\n  {'interval': {'from': '2020-12-01T00:00:00Z', 'to': '2021-01-01T00:00:00Z'},\n   'outputs': {'data': {'bands': {'monthly_max_ndvi': {'stats': {'min': 0.0683102235198021,\n        'max': 0.23551543056964874,\n        'mean': 0.1444664227123698,\n        'stDev': 0.027443079533455306,\n        'sampleCount': 3036,\n        'noDataCount': 1192}}}}}}],\n 'status': 'OK'}\n\n\nMultiple outputs with different dataMasks, multi-band output with custom bands' names and different histogram types\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [{\n      bands: [\n        \"B04\",\n        \"B08\",\n        \"SCL\",\n        \"dataMask\"\n      ]\n    }],\n    output: [\n      {\n        id: \"output_my_bands\",\n        bands: [\"only_band_B04\", \"only_band_B08\"],\n        sampleType: \"FLOAT32\"\n      },\n      {\n        id: \"output_my_indices\",\n        bands: 1,\n        sampleType: \"FLOAT32\"\n      },\n      {\n        id: \"output_scl\",\n        bands: 1,\n        sampleType: \"UINT8\"\n      },\n      {\n        id: \"dataMask\",\n        bands: [\"output_my_bands\", \"output_my_indices\"]\n      }]\n  }\n}\nfunction evaluatePixel(samples) {\n    let ndvi = (samples.B08 - samples.B04)/(samples.B08 + samples.B04)\n    \n    var validNDVIMask = 1\n    if (samples.B08 + samples.B04 == 0 ){\n        validNDVIMask = 0\n    }\n    \n    var noWaterMask = 1\n    if (samples.SCL == 6 ){\n        noWaterMask = 0\n    }\n    \n    return {\n        output_my_bands: [samples.B04, samples.B08],\n        output_my_indices: [ndvi],\n        output_scl: [samples.SCL],\n        dataMask: [samples.dataMask, samples.dataMask * noWaterMask * validNDVIMask]\n    }\n}\n\"\"\"\n\nstats_request = {\n  \"input\": {\n   \"bounds\": {\n      \"bbox\": [414315, 4958219, 414859, 4958819],\n      \"properties\": {\n        \"crs\": \"http://www.opengis.net/def/crs/EPSG/0/32633\"\n      }\n    },\n    \"data\": [\n      {\n        \"type\": \"sentinel-2-l2a\",\n        \"dataFilter\": {\n            \"mosaickingOrder\": \"leastRecent\"\n        }\n      }\n    ]\n  },\n  \"aggregation\": {\n    \"timeRange\": {\n            \"from\": \"2020-07-01T00:00:00Z\",\n            \"to\": \"2020-07-15T00:00:00Z\"\n      },\n    \"aggregationInterval\": {\n        \"of\": \"P5D\"\n    },\n    \"evalscript\": evalscript,\n    \"resx\": 20,\n    \"resy\": 20\n  },\n  \"calculations\": {\n    \"output_my_bands\": {\n      \"histograms\": {\n        \"only_band_B08\": {\n          \"nBins\": 3,\n          \"lowEdge\": 0.0,\n          \"highEdge\": 0.3\n        }\n      },\n      \"statistics\": {\n        \"only_band_B04\": {\n          \"percentiles\": {\n            \"k\": [33, 66,100],\n          }\n        }\n      }\n    },    \n    \"output_scl\": {\n      \"histograms\": {\n        \"default\": {\n          \"bins\": [0,1,2,3,4,5,6,7,8,9,10,11]\n        }\n      }\n    },\n    \"default\": {\n      \"histograms\": {\n        \"default\": {\n          \"binWidth\": 0.05,\n          \"lowEdge\": 0.0\n        }\n      }\n    }\n  }\n}\n\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/statistics\"\n\nresponse = oauth.request(\"POST\", url=url , headers=headers, json=stats_request)\nsh_statistics = response.json()\nsh_statistics\n{'data': [{'interval': {'from': '2020-07-01T00:00:00Z',\n    'to': '2020-07-06T00:00:00Z'},\n   'outputs': {'output_my_bands': {'bands': {'only_band_B04': {'stats': {'min': 0.0803999975323677,\n        'max': 0.2939999997615814,\n        'mean': 0.11451061716602186,\n        'stDev': 0.032769790113614555,\n        'sampleCount': 810,\n        'noDataCount': 0,\n        'percentiles': {'33.0': 0.09719999879598618,\n         '66.0': 0.11169999837875366,\n         '100.0': 0.2939999997615814}}},\n      'only_band_B08': {'stats': {'min': 0.0860000029206276,\n        'max': 0.34290000796318054,\n        'mean': 0.16518679009175594,\n        'stDev': 0.07128630441809644,\n        'sampleCount': 810,\n        'noDataCount': 0},\n       'histogram': {'bins': [{'lowEdge': 0.0,\n          'highEdge': 0.09999999999999999,\n          'count': 199},\n         {'lowEdge': 0.09999999999999999,\n          'highEdge': 0.19999999999999998,\n          'count': 270},\n         {'lowEdge': 0.19999999999999998, 'highEdge': 0.3, 'count': 332}],\n        'overflowCount': 9,\n        'underflowCount': 0}}}},\n    'output_scl': {'bands': {'B0': {'stats': {'min': 8.0,\n        'max': 10.0,\n        'mean': 9.75432098765432,\n        'stDev': 0.6555648554361158,\n        'sampleCount': 810,\n        'noDataCount': 0},\n       'histogram': {'bins': [{'lowEdge': 0, 'highEdge': 1, 'count': 0},\n         {'lowEdge': 1, 'highEdge': 2, 'count': 0},\n         {'lowEdge': 2, 'highEdge': 3, 'count': 0},\n         {'lowEdge': 3, 'highEdge': 4, 'count': 0},\n         {'lowEdge': 4, 'highEdge': 5, 'count': 0},\n         {'lowEdge': 5, 'highEdge': 6, 'count': 0},\n         {'lowEdge': 6, 'highEdge': 7, 'count': 0},\n         {'lowEdge': 7, 'highEdge': 8, 'count': 0},\n         {'lowEdge': 8, 'highEdge': 9, 'count': 99},\n         {'lowEdge': 9, 'highEdge': 10, 'count': 1},\n         {'lowEdge': 10, 'highEdge': 11, 'count': 710}],\n        'overflowCount': 0,\n        'underflowCount': 0}}}},\n    'output_my_indices': {'bands': {'B0': {'stats': {'min': -0.04050104320049286,\n        'max': 0.5338308215141296,\n        'mean': 0.14599402473584097,\n        'stDev': 0.15671216615792566,\n        'sampleCount': 810,\n        'noDataCount': 0},\n       'histogram': {'bins': [{'lowEdge': 0.0, 'highEdge': 0.05, 'count': 340},\n         {'lowEdge': 0.05, 'highEdge': 0.1, 'count': 71},\n         {'lowEdge': 0.1, 'highEdge': 0.15000000000000002, 'count': 50},\n         {'lowEdge': 0.15000000000000002, 'highEdge': 0.2, 'count': 26},\n         {'lowEdge': 0.2, 'highEdge': 0.25, 'count': 23},\n         {'lowEdge': 0.25, 'highEdge': 0.30000000000000004, 'count': 33},\n         {'lowEdge': 0.30000000000000004,\n          'highEdge': 0.35000000000000003,\n          'count': 64},\n         {'lowEdge': 0.35000000000000003, 'highEdge': 0.4, 'count': 81},\n         {'lowEdge': 0.4, 'highEdge': 0.45, 'count': 53},\n         {'lowEdge': 0.45, 'highEdge': 0.5, 'count': 6},\n         {'lowEdge': 0.5, 'highEdge': 0.55, 'count': 9}],\n        'overflowCount': 0,\n        'underflowCount': 54}}}}}},\n  {'interval': {'from': '2020-07-06T00:00:00Z', 'to': '2020-07-11T00:00:00Z'},\n   'outputs': {'output_my_bands': {'bands': {'only_band_B04': {'stats': {'min': 0.007499999832361937,\n        'max': 0.3788999915122986,\n        'mean': 0.05566148159990979,\n        'stDev': 0.060176196853468686,\n        'sampleCount': 810,\n        'noDataCount': 0,\n        'percentiles': {'33.0': 0.022700000554323196,\n         '66.0': 0.04439999908208847,\n         '100.0': 0.3788999915122986}}},\n      'only_band_B08': {'stats': {'min': 0.006500000134110451,\n        'max': 0.46369999647140503,\n        'mean': 0.12869839533864502,\n        'stDev': 0.1266643048401008,\n        'sampleCount': 810,\n        'noDataCount': 0},\n       'histogram': {'bins': [{'lowEdge': 0.0,\n          'highEdge': 0.09999999999999999,\n          'count': 450},\n         {'lowEdge': 0.09999999999999999,\n          'highEdge': 0.19999999999999998,\n          'count': 27},\n         {'lowEdge': 0.19999999999999998, 'highEdge': 0.3, 'count': 254}],\n        'overflowCount': 79,\n        'underflowCount': 0}}}},\n    'output_scl': {'bands': {'B0': {'stats': {'min': 2.0,\n        'max': 9.0,\n        'mean': 5.1716049382715985,\n        'stDev': 1.09834157450977,\n        'sampleCount': 810,\n        'noDataCount': 0},\n       'histogram': {'bins': [{'lowEdge': 0, 'highEdge': 1, 'count': 0},\n         {'lowEdge': 1, 'highEdge': 2, 'count': 0},\n         {'lowEdge': 2, 'highEdge': 3, 'count': 29},\n         {'lowEdge': 3, 'highEdge': 4, 'count': 0},\n         {'lowEdge': 4, 'highEdge': 5, 'count': 235},\n         {'lowEdge': 5, 'highEdge': 6, 'count': 103},\n         {'lowEdge': 6, 'highEdge': 7, 'count': 428},\n         {'lowEdge': 7, 'highEdge': 8, 'count': 13},\n         {'lowEdge': 8, 'highEdge': 9, 'count': 1},\n         {'lowEdge': 9, 'highEdge': 10, 'count': 1},\n         {'lowEdge': 10, 'highEdge': 11, 'count': 0}],\n        'overflowCount': 0,\n        'underflowCount': 0}}}},\n    'output_my_indices': {'bands': {'B0': {'stats': {'min': -0.18976545333862305,\n        'max': 0.858506441116333,\n        'mean': 0.47965881587323095,\n        'stDev': 0.25189343011256504,\n        'sampleCount': 810,\n        'noDataCount': 428},\n       'histogram': {'bins': [{'lowEdge': 0.0, 'highEdge': 0.05, 'count': 3},\n         {'lowEdge': 0.05, 'highEdge': 0.1, 'count': 3},\n         {'lowEdge': 0.1, 'highEdge': 0.15000000000000002, 'count': 15},\n         {'lowEdge': 0.15000000000000002, 'highEdge': 0.2, 'count': 36},\n         {'lowEdge': 0.2, 'highEdge': 0.25, 'count': 28},\n         {'lowEdge': 0.25, 'highEdge': 0.30000000000000004, 'count': 20},\n         {'lowEdge': 0.30000000000000004,\n          'highEdge': 0.35000000000000003,\n          'count': 17},\n         {'lowEdge': 0.35000000000000003, 'highEdge': 0.4, 'count': 6},\n         {'lowEdge': 0.4, 'highEdge': 0.45, 'count': 9},\n         {'lowEdge': 0.45, 'highEdge': 0.5, 'count': 24},\n         {'lowEdge': 0.5, 'highEdge': 0.55, 'count': 22},\n         {'lowEdge': 0.55, 'highEdge': 0.6000000000000001, 'count': 18},\n         {'lowEdge': 0.6000000000000001, 'highEdge': 0.65, 'count': 32},\n         {'lowEdge': 0.65, 'highEdge': 0.7000000000000001, 'count': 46},\n         {'lowEdge': 0.7000000000000001, 'highEdge': 0.75, 'count': 37},\n         {'lowEdge': 0.75, 'highEdge': 0.8, 'count': 29},\n         {'lowEdge': 0.8, 'highEdge': 0.8500000000000001, 'count': 21},\n         {'lowEdge': 0.8500000000000001, 'highEdge': 0.9, 'count': 2}],\n        'overflowCount': 0,\n        'underflowCount': 14}}}}}}],\n 'status': 'OK'}\n\n\nStatistics for Sentinel-1\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [{\n      bands: [\n        \"VV\",\n        \"dataMask\"\n      ]\n    }],\n    output: [\n      {\n        id: \"output_VV\",\n        bands: 1,\n        sampleType: \"FLOAT32\"\n      },\n      {\n        id: \"dataMask\",\n        bands: 1\n      }]\n  }\n}\nfunction evaluatePixel(samples) {\n    return {\n        output_VV: [samples.VV],\n        dataMask: [samples.dataMask]\n        }\n}\n\"\"\"\n\nstats_request = {\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [414315, 4958219, 414859, 4958819],\n    \"properties\": {\n        \"crs\": \"http://www.opengis.net/def/crs/EPSG/0/32633\"\n        }\n    },\n    \"data\": [\n      {\n        \"type\": \"sentinel-1-grd\",\n        \"dataFilter\": {\n        }\n      }\n    ]\n  },\n  \"aggregation\": {\n    \"timeRange\": {\n            \"from\": \"2020-07-01T00:00:00Z\",\n            \"to\": \"2020-07-10T00:00:00Z\"\n      },\n    \"aggregationInterval\": {\n        \"of\": \"P5D\"\n    },\n    \"evalscript\": evalscript,\n    \"resx\": 10,\n    \"resy\": 10\n  }\n}\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/statistics\"\nresponse = oauth.request(\"POST\", url=url , headers=headers, json=stats_request)\nsh_statistics = response.json()\nsh_statistics\n{'data': [{'interval': {'from': '2020-07-01T00:00:00Z',\n    'to': '2020-07-06T00:00:00Z'},\n   'outputs': {'output_VV': {'bands': {'B0': {'stats': {'min': 0.0,\n        'max': 0.4447733759880066,\n        'mean': 0.046840328479290934,\n        'stDev': 0.05487441687888816,\n        'sampleCount': 3240,\n        'noDataCount': 0}}}}}}],\n 'status': 'OK'}\n\n\nStatistics of NDVI using Sentinel-2 L2A as the source of NDVI and Sentinel-1 GRD VV channel as the mask of water bodies\nevalscript = \"\"\"\n//VERSION=3\nfunction setup() {\n  return {\n    input: [\n      // Specify input bands using the \"id\" of datasource set in the payload under data parameter\n      {datasource: \"s2\", bands: [\"B04\", \"B08\", \"dataMask\"]},\n      {datasource: \"s1\", bands: [\"VV\", \"dataMask\"]}\n    ],\n    output: [\n      {\n        id: \"ndvi\",\n        bands: 1\n      },\n      {\n        id: \"dataMask\",\n        bands: 1\n      }],\n    mosaicking: \"SIMPLE\"\n  };\n}\n\nfunction evaluatePixel(samples) {\n  let ndvi = (samples.s2[0].B08 - samples.s2[0].B04) / (samples.s2[0].B08+samples.s2[0].B04);\n  \n  // Create a mask for invalid ndvi value\n  let validNDVIMask = 1;\n  if (!isFinite(ndvi)) {\n    validNDVIMask = 0;\n  }\n  \n  // Create a mask for water\n  // The threshold comes from the result of exploring river flooding during the winter of 2020/21 on the River Severn in the United Kingdom \n  // (https://medium.com/euro-data-cube/exploring-time-and-space-a-guide-to-accessing-analysing-and-visualising-data-in-the-euro-data-e4a46f2bb55b)\n  let noWaterMask = 1;\n  if (toDB(samples.s1[0].VV) <= -20) {\n    noWaterMask = 0;\n  }\n  return {\n      ndvi: [ndvi],\n      // Combine all the masks\n      dataMask: [samples.s2[0].dataMask * samples.s1[0].dataMask * validNDVIMask * noWaterMask]\n  };\n}\n\nfunction toDB(input){\n  return 10 * Math.log(input)/Math.LN10;\n}\n\"\"\"\nstats_request = {\n  \"input\": {\n    \"bounds\": {\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n          [\n            [16.72617,47.713689],\n            [16.72617,47.655444],\n            [16.816292,47.655444],\n            [16.816292,47.713689],\n            [16.72617,47.713689]\n          ]\n        ]\n      }\n    },\n    \"data\": [\n      {\n        \"dataFilter\": {},\n        \"id\": \"s2\",\n        \"type\": \"sentinel-2-l2a\"\n      },\n      {\n        \"dataFilter\": {\n          \"resolution\": \"HIGH\",\n          \"acquisitionMode\": \"IW\",\n          \"polarization\": \"DV\"\n        },\n        \"processing\": {\n          \"backCoeff\": \"GAMMA0_TERRAIN\",\n          \"orthorectify\": \"true\",\n          \"demInstance\": \"MAPZEN\",\n          \"speckleFilter\": {\n            \"type\": \"LEE\",\n            \"windowSizeX\": 5,\n            \"windowSizeY\": 5\n          }\n        },\n        \"id\": \"s1\",\n        \"type\": \"sentinel-1-grd\"\n      }\n    ]\n  },\n  \"aggregation\": {\n    \"timeRange\": {\n      \"from\": \"2021-08-08T00:00:00Z\",\n      \"to\": \"2021-08-11T23:59:59Z\"\n    },\n    \"aggregationInterval\": {\n      \"of\": \"P1D\"\n    },\n    \"resx\": 0.00009,\n    \"resy\": 0.00009,\n    \"evalscript\": evalscript\n  },\n  \"calculations\": {\n    \"default\": {}\n  }\n}\n\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}\n\nurl = \"https://sh.dataspace.copernicus.eu/api/v1/statistics\"\nresponse = oauth.request(\"POST\", url=url, headers=headers, json=stats_request)\nsh_statistics = response.json()\nsh_statistics\n{'data': [{'interval': {'from': '2021-08-08T00:00:00Z',\n    'to': '2021-08-09T00:00:00Z'},\n   'outputs': {'ndvi': {'bands': {'B0': {'stats': {'min': -0.6206604838371277,\n        'max': 0.8291770815849304,\n        'mean': 0.22080027097811286,\n        'stDev': 0.22071344421516914,\n        'sampleCount': 647647,\n        'noDataCount': 144372}}}}}},\n  {'interval': {'from': '2021-08-10T00:00:00Z', 'to': '2021-08-11T00:00:00Z'},\n   'outputs': {'ndvi': {'bands': {'B0': {'stats': {'min': -0.6909090876579285,\n        'max': 0.8982226252555847,\n        'mean': 0.6302106131139007,\n        'stDev': 0.28749024291873476,\n        'sampleCount': 647647,\n        'noDataCount': 220350}}}}}}],\n 'status': 'OK'}"
  },
  {
    "objectID": "APIs/SentinelHub.html",
    "href": "APIs/SentinelHub.html",
    "title": "COPERNICUS DATA SPACE ECOSYSTEM DOCUMENTATION PORTAL",
    "section": "",
    "text": "Sentinel Hub is a multi-spectral and multi-temporal big data satellite imagery service, capable of fully automated archiving, real-time processing and distribution of remote sensing data and related EO products. Users can use APIs to retrieve satellite data over their AOI and specific time range from full archives in a matter of seconds."
  },
  {
    "objectID": "APIs/OpenSearch.html",
    "href": "APIs/OpenSearch.html",
    "title": "COPERNICUS DATA SPACE ECOSYSTEM DOCUMENTATION PORTAL",
    "section": "",
    "text": "OpenSearch\nOpenSearch is an open-source software suite for search, analytics, and observability applications. It can be employed as a complete solution or integrated with open-source tools. ## Using OpenSearch interface to query Data Catalogue\nDue to the fact that offset is not a recommended form of searching repository pages, we had to implement limit to a maximum of 200k. The requests over the limit will be rejected with the code 400. We encourage you to limit your inquiries by geographic or temporal area.\nAll queries may be executed as simple HTTP-Get calls, by typing the query in web browser address line, by using any HTTP client, e.g. curl or wget, or from inside of users’ program. The database is accessible free and anonymously (open for anonymous access for everyone, no authorization is used) It may be accessed both from the internal network (virtual machines in Creodias) and from outside, e.g. your home computer. Note, that the actual EO data themselves are restricted to authorized users, only the Data Catalogue is open.\n\nGeneral Rules\nThe queries produce results in JSON format. Base url:\nhttp://catalogue.dataspace.copernicus.eu/resto/api/collections/search.json?\nMost queries are case-sensitive.\n\n\nCollections\nThe data are organized in so-called collections, corresponding to various satellites. A query may search for data in all collections, or in one particular collection only. If only one satellite is in the field of interest, the second approach is faster and more efficient, than filtering the general query. For example, to find 10 most recent Sentinel-2 products with cloud cover below 10%, the query should look like:\n$ wget -O - \"http://catalogue.dataspace.copernicus.eu/resto/api/collections/Sentinel2/search.json?cloudCover=[0,10]&startDate=2022-06-11&completionDate=2022-06-22&maxRecords=10\"\nwhile if the collection field is missing in the URL, the products from all the satellites are returned:\n$ wget -O - \"https://catalogue.dataspace.copernicus.eu/resto/api/collections/search.json?cloudCover=[0,10]&startDate=2022-06-11&completionDate=2022-06-22&maxRecords=10\"\nAs for today the following collections are defined and may be used:\nSentinel1 or SENTINEL-1\nSentinel2 or SENTINEL-2\nSentinel3 or SENTINEL-3\nSentinel5P or SENTINEL-5P\nNote, that collection names vary a bit from satellite names, as they are used in EO Data repository. For example, the collection is named Sentinel2, while in the repository its data are located within /eodata/Sentinel-2/…. branch of the repository tree.\n\n\nOutput sorting and limiting\nBy default, maximum 20 products are returned only. You may change the limit (beware of long execution time for queries about thousands of products) using the phrase\nmaxRecords=nnn\nIf the query is very general and the number of matching products is large, the next pages of products may be retrieved\npage=nnn\nYou may also change the order of how the products are presented, using the phrase like\nsortParam=startDate\nwill sort the output by observation date. The following orderings are implemented:\nstartDate - the date when the observation was made (start)\ncompletionDate - the date when the observation was made (end)\npublished  - the date when the product got published in our repository\neach of them may be accompanied by\nsortOrder=ascending or sortOrder=descending\nFor example the query\nhttp://catalogue.dataspace.copernicus.eu/resto/api/collections/Sentinel2/search.json?startDate=2021-07-01&completionDate=2021-07-31&sortParam=startDate&maxRecords=20\nwill return 20 products from July 2021, while the next query would return the next 20:\nhttp://catalogue.dataspace.copernicus.eu/resto/api/collections/Sentinel2/search.json?startDate=2021-07-01&completionDate=2021-07-31&sortParam=startDate&maxRecords=20&page=2\n\n\nFormal queries\nThe formal query is invoked as a sequence of sub phrases, separated by &. The result is a conjunction of all sub phrases. It is impossible to use an alternative in the question. The query must be specified as a formal query.\nThe example of formal query - about cloudless (cloud cover lower or equal to 10%) products for a specific location:\nhttps://catalogue.dataspace.copernicus.eu/resto/api/collections/Sentinel2/search.json?cloudCover=[0,10]&startDate=2021-06-21&completionDate=2021-09-22&lon=21.01&lat=52.22\nThe queries are in form param=value or param=[minvalue,maxvalue**]. Most of the parameters are common for all collections, but some are specific for some them (e.g. cloudCover** applies to optical satellites, but polarisation applies to radar ones), or just single one.\n\n\nGeography and time-frame\nThe common set of parameters are:\nstartDate, completionDate - the date limits of the observation. The time may also be specified, e.g. 2021-10-01T021:30:00Z\npublishedAfter, publishedBefore - the date limits when the product was published in our repository\nlon, lat - geographical position, expressed in military style (EPSG:4326, as decimal fraction of degrees, positive for eastern latitude and northern longitude) radius - region of interest, defined as a circle with centre in point determined by the longitude and latitude with radius expressed in meters (it won’t work with point manually selected in EOFinder/Data Explorer)\ngeometry - region of interest, defined as WKT string (POINT, POLYGON, etc.)\nbox - region of interest, defined as the rectangle with given (west,south,east,north) values\nbox is defined this way: &box=west,south,east,north\nFor example the query\nhttps://catalogue.dataspace.copernicus.eu/resto/api/collections/Sentinel2/search.json?cloudCover=[0,10]&startDate=2022-06-11&completionDate=2022-06-22&maxRecords=10&box=-1,1,-1,1\nor\nhttps://catalogue.dataspace.copernicus.eu/resto/api/collections/Sentinel2/search.json?cloudCover=[0,10]&startDate=2022-06-11&completionDate=2022-06-22&maxRecords=10&box=-21,23,-24,15\n\n\nVolatile features\nSome terrain-like feature masks are not permanent but describing a single scene only. The most commonly used such feature is cloudiness, or cloudCover, which is defined for most of the products coming from optical sensors. For example:\ncloudCover=[0,10]\nselects only those scenes, which are covered by clouds by no more than 10%.\nCaution: to be meaningful, the cloudiness must be provided with each product, while in many products is missing. If the cloudiness is unknown for the scene, it is marked by a value of 0 or -1. cloudCover=0 is therefore ambiguous: it may either mean totally cloudless sky or the cloudy scene for which cloud cover had not been estimated during original data processing.\n\n\nSatellite features\ninstrument - meaningful only for satellites equipped with multiple instruments. The possible values are satellite specific.\nproductType - the actual types possible are specific for every satellite.\nsensorMode - also satellite and sensor specific. E.g. (for Sentinel-1): sensorMode=EW\norbitDirection - ASCENDING or DESCENDING. For most heliosynchronous satellites descending orbits means the day scenes, while ascending means night ones. For many optical satellites (e.g. Sentinel-2) only day scenes are published.\nresolution - expected spatial resolution of the product defined in meters.\nstatus:\n\nONLINE\nOFFLINE\n\nSome additional parameters are strictly satellite-specific, e.g. polarisation, which is defined only for Sentinel-1\nFor every satellite (collection) its set of query-able parameters may be obtained by a query like:\nhttps://catalogue.dataspace.copernicus.eu/resto/api/collections/Sentinel1/describe.xml\nThe resulting XML file provides full list of the parameters for the collection, with their very brief descriptions."
  },
  {
    "objectID": "APIs/OData.html",
    "href": "APIs/OData.html",
    "title": "COPERNICUS DATA SPACE ECOSYSTEM DOCUMENTATION PORTAL",
    "section": "",
    "text": "OData (Open Data Protocol) is a standard that specifies a variety of best practices for creating and using REST APIs. OData makes it possible to build REST-based data services that let Web clients publish and edit resources that are recognized by Uniform Resource Locators (URLs) and described in a data model using straightforward HTTP messages. ## Query structure\nAs a general note, OData query consists of elements which in this documentation are called “options”. Interface supports the following search options:\n\nfilter\norderby\ntop\nskip\ncount\nexpand\n\nSearch options should always be preceded with $ and consecutive options should be separated with &.\nConsecutive filters within filter option should be separated with and or or. Not operator can also be used e.g.:\nhttps://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=not contains(Name,'S2') and ContentDate/Start gt 2022-05-03T00:00:00.000Z and ContentDate/Start lt 2022-05-03T00:10:00.000Z&$orderby=ContentDate/Start&$top=100\nPerformance note:\nTo accelerate the query performance it is recommended to limit the query by acquisition dates e.g.:\nContentDate/Start gt 2022-05-03T00:00:00.000Z and ContentDate/Start lt 2022-05-21T00:00:00.000Z\n\n\n\n\nTo search for a specific product by its exact name:\nhttps://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=Name eq 'S1A_IW_GRDH_1SDV_20141031T161924_20141031T161949_003076_003856_634E.SAFE'\nTo search for products containing “S1A” in their names:\n[https://catalogue.dataspace.copernicus.eu/odata/v1/Products?\\(filter=contains(Name,'S1A') and ContentDate/Start gt 2022-05-03T00:00:00.000Z and ContentDate/Start lt 2022-05-21T00:00:00.000Z](https://catalogue.dataspace.copernicus.eu/odata/v1/Products?\\)filter=contains(Name,%27S1A%27)%20and%20ContentDate/Start%20gt%202022-05-03T00:00:00.000Z%20and%20ContentDate/Start%20lt%202022-05-21T00:00:00.000Z)\nAlternatively to contains, endswith and startswith can be used, to search for products ending or starting with provided string.\n\n\n\nIn case a user desires to search for multiple products by name in one query, POST method can be used:\nPOST\nhttps://catalogue.dataspace.copernicus.eu/odata/v1/Products/OData.CSC.FilterList\nRequest body:\n{\n  \"FilterProducts\":\n    [\n     {\"Name\": \"S1A_IW_GRDH_1SDV_20141031T161924_20141031T161949_003076_003856_634E.SAFE\"},\n     {\"Name\": \"S3B_SL_1_RBT____20190116T050535_20190116T050835_20190117T125958_0179_021_048_0000_LN2_O_NT_003.SEN3\"},\n     {\"Name\": \"xxxxxxxx.06.tar\"}\n    ]\n }\nTwo results are returned, as there is no product named xxxxxxxx.06.tar.\n\n\n\nTo search for products within a specific collection:\nhttps://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=Collection/Name eq 'SENTINEL-2' and ContentDate/Start gt 2022-05-03T00:00:00.000Z and ContentDate/Start lt 2022-05-03T00:11:00.000Z\nThe following collections are currently available:\n\nSENTINEL-1\nSENTINEL-2\nSENTINEL-3\nSENTINEL-5P\n\n\n\n\nTo search for products published between two dates:\nhttps://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=PublicationDate gt 2019-05-15T00:00:00.000Z and PublicationDate lt 2019-05-16T00:00:00.000Z\nTo define inclusive interval ge and le parameters can be used:\nhttps://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=PublicationDate ge 2019-05-15T00:00:00.000Z and PublicationDate le 2019-05-16T00:00:00.000Z\n\n\n\nTo search for products acquired between two dates:\nhttps://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=ContentDate/Start gt 2019-05-15T00:00:00.000Z and ContentDate/Start lt 2019-05-16T00:00:00.000Z\nUsually, there are two parameters describing the ContentDate (Acquisition Dates) for a product - Start and End. Depending on what the user is looking for, these parameters can be mixed, e.g.:\n[https://catalogue.dataspace.copernicus.eu/odata/v1/Products?\\(filter=ContentDate/Start gt 2019-05-15T00:00:00.000Z and ContentDate/End lt 2019-05-15T00:05:00.000Z](https://catalogue.dataspace.copernicus.eu/odata/v1/Products?\\)filter=ContentDate/Start%20gt%202019-05-15T00:00:00.000Z%20and%20ContentDate/End%20lt%202019-05-15T00:05:00.000Z)\n\n\n\nTo search for products intersecting the specified polygon:\nhttps://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=OData.CSC.Intersects(area=geography'SRID=4326;POLYGON((12.655118166047592 47.44667197521409,21.39065656328509 48.347694733853245,28.334291357162826 41.877123516783655,17.47086198383573 40.35854475076158,12.655118166047592 47.44667197521409))') and ContentDate/Start gt 2022-05-20T00:00:00.000Z and ContentDate/Start lt 2022-05-21T00:00:00.000Z\nTo search for products intersecting the specified point:\nhttps://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=OData.CSC.Intersects(area=geography%27SRID=4326;POINT(-0.5319577002158441%2028.65487836189358)%27)\nDisclaimers:\n\nMULTIPOLYGON is currently not supported.\nPolygon must start and end with the same point.\nCoordinates must be given in EPSG 4326\n\n\n\n\nTo search for products by attributes it is necessary to build a filter with the following structure:\nAttributes/OData.CSC.ValueTypeAttribute/any(att:att/Name eq '[Attribute.Name]' and att/OData.CSC.ValueTypeAttribute/Value eq '[Attribute.Value]')\nwhere\n\nValueTypeAttribute can take the following values:\n\nStringAttribute\nDoubleAttribute\nIntegerAttribute\nDateTimeOffsetAttribute\n\n[Attribute.Name] is the attribute name which can take multiple values, depending on collection (Attachment 1 - Coming soon)\neq before [Attribute.Value] can be substituted with le, lt, ge, gt in case of Integer, Double or DateTimeOffset Attributes\n[Attribute.Value] is the specific value that the user is searching for\n\nTo get products with CloudCover<40% between two dates:\nhttps://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=Attributes/OData.CSC.DoubleAttribute/any(att:att/Name eq 'cloudCover' and att/OData.CSC.DoubleAttribute/Value le 40.00) and ContentDate/Start gt 2022-01-01T00:00:00.000Z and ContentDate/Start lt 2022-01-03T00:00:00.000Z&$top=10\nTo get products with cloudCover< 10% and productType=S2MSI2A and ASCENDING orbitDirection between two dates:\nhttps://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=Attributes/OData.CSC.DoubleAttribute/any(att:att/Name eq 'cloudCover' and att/OData.CSC.DoubleAttribute/Value lt 10.00) and Attributes/OData.CSC.StringAttribute/any(att:att/Name eq 'productType' and att/OData.CSC.StringAttribute/Value eq 'S2MSI2A') and Attributes/OData.CSC.StringAttribute/any(att:att/Name eq 'orbitDirection' and att/OData.CSC.StringAttribute/Value eq 'ASCENDING') and ContentDate/Start gt 2022-05-03T00:00:00.000Z and ContentDate/Start lt 2022-05-03T04:00:00.000Z&$top=10\n\n\n\nOrderby option can be used to order the products in an ascending (asc) or descending (desc) direction. If asc or desc not specified, then the resources will be ordered in ascending order.\nTo order products by ContentDate/Start in a descending direction:\nhttps://catalogue.dataspace.copernicus.eu/odata/v1/Products?\\(filter=contains(Name,'S1A_EW_GRD') and ContentDate/Start gt 2022-05-03T00:00:00.000Z and ContentDate/Start lt 2022-05-03T03:00:00.000Z&\\)orderby=ContentDate/Start desc\nBy default, if orderby option is not used, the results are not ordered. If orderby option is used, additional orderby by id is also used, so that the results are fully ordered and no products are lost while paginating through the results.\nThe acceptable arguments for this option: ContentDate/Start, ContentDate/End, PublicationDate, ModificationDate, in directions: asc, desc.\n\n\n\nTop option specifies the maximum number of items returned from a query.\nTo limit the number of results:\nhttps://catalogue.dataspace.copernicus.eu/odata/v1/Products?\\(filter=contains(Name,%27S1A_EW_GRD%27)%20and%20ContentDate/Start%20gt%202022-05-03T00:00:00.000Z%20and%20ContentDate/Start%20lt%202022-05-03T12:00:00.000Z&\\)top=100\nThe default value is set to 20.\nThe acceptable arguments for this option: Integer <0,1000>\n\n\n\n\nSkip option can be used to skip a specific number of results. Exemplary application of this option would be paginating through the results, however for performance reasons, we recommend limiting queries with small time intervals as a substitute of using skip in a more generic query.\nTo skip a specific number of results:\nhttps://catalogue.dataspace.copernicus.eu/odata/v1/Products?\\(filter=contains(Name,%27S1A_EW_GRD%27)%20and%20ContentDate/Start%20gt%202022-05-03T00:00:00.000Z%20and%20ContentDate/Start%20lt%202022-05-03T12:00:00.000Z&\\)skip=23\nThe default value is set to 0.\nWhenever a query results in more products than 20 (default top value), the API provides a nextLink at the bottom of the page:\n\"@OData.nextLink\":\nhttp://catalogue.dataspace.copernicus.eu/odata/v1/Products?\\(filter=contains(Name,'S1A_EW_GRD')+and+ContentDate/Start+gt+2022-05-03T00:00:00.000Z+and+ContentDate/Start+lt+2022-05-03T12:00:00.000Z&\\)skip=20\nThe acceptable arguments for this option: Integer <0,10000>\n\n\n\nCount option enables users to get the exact number of products matching the query. This option is disabled by default to accelerate the query performance.\nTo get the exact number of products for a given query:\nhttps://catalogue.dataspace.copernicus.eu/odata/v1/Products?\\(filter=contains(Name,%27S1A_EW_GRD%27)%20and%20ContentDate/Start%20gt%202022-05-03T00:00:00.000Z%20and%20ContentDate/Start%20lt%202022-05-03T12:00:00.000Z&\\)count=True\nThe acceptable arguments for this option: True, true, 1, False, false, 0.\n\n\n\nExpand option enables users to see full metadata of each returned result.\nTo see the metadata of the results:\nhttps://catalogue.dataspace.copernicus.eu/odata/v1/Products?\\(filter=contains(Name,%27S1A_EW_GRD%27)%20and%20ContentDate/Start%20gt%202022-05-03T00:00:00.000Z%20and%20ContentDate/Start%20lt%202022-05-03T12:00:00.000Z&\\)expand=Attributes\nThe acceptable arguments for this option: Attributes\n\n\n\nFor downloading products you need an authorization token as only authorized users are allowed to download data products.\nTo get the token you can use the following scripts:\ncurl --location --request POST 'https://identity.dataspace.copernicus.eu/auth/realms/CDSE/protocol/openid-connect/token' \\\n  --header 'Content-Type: application/x-www-form-urlencoded' \\\n  --data-urlencode 'grant_type=password' \\\n  --data-urlencode 'username=<LOGIN>' \\\n  --data-urlencode 'password=<PASSWORD>' \\\n  --data-urlencode 'client_id=cdse-public'\nor \ncurl -d 'client_id=cdse-public' -d 'username=<LOGIN>' -d 'password=<PASSWORD>' -d 'grant_type=password' 'https://identity.cloudferro.com/auth/realms/CDSE/protocol/openid-connect/token' | python -m json.tool | grep \"access_token\" | awk -F\\\" '{print $4}'\nAlong with the Access Token you will be returned a Refresh Token, the latter is used to generate a new Access Token without the need to specify Username or Password, this helps to make requests less vulnerable to your credentials being exposed.\nTo re-generate the Access Token from the Refresh Token it can be done with the following request:\ncurl --location --request POST 'https://identity.dataspace.copernicus.eu/auth/realms/CDSE/protocol/openid-connect/token' \\\n  --header 'Content-Type: application/x-www-form-urlencoded' \\\n  --data-urlencode 'grant_type=refresh_token' \\\n  --data-urlencode 'refresh_token=<REFRESH_TOKEN>' \\\n  --data-urlencode 'client_id=cdse-public'\n\n\nOnce you have your token, you require a product Id which can be found in the response of the products search: https://catalogue.dataspace.copernicus.eu/odata/v1/Products\nFinally, you can download the product using this script:\ncurl -H \"Authorization: Bearer $KEYCLOAK_TOKEN\" 'https://catalogue.dataspace.copernicus.eu/odata/v1/Products(060882f4-0a34-5f14-8e25-6876e4470b0d)/$value' --output /tmp/product.zip\nor\nwget  --header \"Authorization: Bearer $KEYCLOAK_TOKEN\" 'http://catalogue.dataspace.copernicus.eu/odata/v1/Products(db0c8ef3-8ec0-5185-a537-812dad3c58f8)/$value' -O example_odata.zip"
  },
  {
    "objectID": "cdse_doc.html",
    "href": "cdse_doc.html",
    "title": "COPERNICUS DATA SPACE ECOSYSTEM DOCUMENTATION PORTAL",
    "section": "",
    "text": "Welcome to the Copernicus Data Space Ecosystem documentation portal\n Here you can explore our detailed documentation and learn more about the available data, APIs and applications.\nThe ecosystem will be continuously upgraded over the upcoming months, see the timelines in the evolution roadmap. Our documentation will be updated accordingly.\n\nIn this documentation, you can find more information on:\n\nData providing you with details about the available Earth Observation data and products.\nAPIs helping you to find the right interfaces to access catalogs, list collections and process data.\nApplications reducing your efforts to search, visualize, modify and download images in an easy and user-friendly way. \n\nQuick answers can be found in our FAQ.\nIf you have questions that are not answered on this portal, please contact our Support."
  },
  {
    "objectID": "Roadmap.html",
    "href": "Roadmap.html",
    "title": "COPERNICUS DATA SPACE ECOSYSTEM DOCUMENTATION PORTAL",
    "section": "",
    "text": "The Service description and evolution document provides a comprehensive view of all data products and services available in the frame of the Copernicus Data Space Ecosystem, both the “Copernicus Free Services” as well as the services operated by third parties.\n\n\n\n\n\n\nRoadmap Summary\n\n\n\n\n\nMore detailed information on the timelines for Copernicus Data Space Ecosystem data, APIs and Application updates can be found here:\n\nData timeline overview\nAPIs timeline overview\nApplications timeline overview"
  },
  {
    "objectID": "Home.html",
    "href": "Home.html",
    "title": "COPERNICUS DATA SPACE ECOSYSTEM DOCUMENTATION PORTAL",
    "section": "",
    "text": "Welcome to the Copernicus Data Space Ecosystem documentation portal\n Here you can explore our detailed documentation and learn more about the available data, APIs and applications.\nThe ecosystem will be continuously upgraded over the upcoming months, see the timelines in the evolution roadmap. Our documentation will be updated accordingly.\n\nIn this documentation, you can find more information on:\n\nData providing you with details about the available Earth Observation data and products.\nAPIs helping you to find the right interfaces to access catalogs, list collections and process data.\nApplications reducing your efforts to search, visualize, modify and download images in an easy and user-friendly way. \n\nQuick answers can be found in our FAQ.\nIf you have questions that are not answered on this portal, please contact our Support."
  },
  {
    "objectID": "FAQ.html",
    "href": "FAQ.html",
    "title": "COPERNICUS DATA SPACE ECOSYSTEM DOCUMENTATION PORTAL",
    "section": "",
    "text": "What is the phase-out timing for the current Copernicus Data Hub distribution services?\n\n\nThe legacy Copernicus Data Hub distribution service will remain in operations until end of June 2023 to allow a smooth migration to the new Copernicus Data Access service by all user communities. The Copernicus Data Hub distribution service will continue offering access to Sentinel data  with a gradual ramp-down of the operations capacity and data offering until end of September 2023.\n</div>\n\n\n\nComparing with existing legacy Copernicus Data Hub, what will be the other free services other than stac/cog?\n\n\nCompared to existing Copernicus Data Hub, there will indeed be additional APIs - OGC interfaces (WMS, WMTS, WCS), OpenEO, Sentinel Hub API, S3, and others. Please refer to the <a href=\"#/Roadmap\">Roadmap</a> for more info on the timing of these interfaces.\n</div>\n\n\n\nIs there an end user document available online that describes the specific data products available and specific services?\n\n\nThe user level document describing the details for every service and dataset can be found <a href=\"#/Applications/Browser\">here</a>(LINK WILL LATER BE UPDATED).\n</div>\n\n\n\nHow long is the project timescale in total ?\n\n\nThe time scale of the project is 6 years (ie. to the end of 2028) with an optional extension up to 10 years (ie. 2032).\n\n\n\n\nCan anyone outside from Europe have free access to any data?\n\n\nYes, data and services will be available to users worldwide.\n\n\n\n\n\n\n\nWhat data will be offered online and what is the timeline for the following months?\n\n\nFor the details on the data offer and timing, we would like to refer to the <a href=\"#/Roadmap\">Roadmap</a>\n</div>\n\n\n\nIs there a page that indicates anomalies with the datasets?\n\n\nA dashboard where any user can find planned and unplanned anomalies per Sentinel satellite is under construction and should be availabe in a short timeframe.\n</div>\n\n\n\nWith regard to cloud native formats/interfaces, will the data also be available in the original data formats (e.g. for data downloading)?\n\n\nYes, data will also be available in original data formats (i.e. .SAFE).\n</div>\n\n\n\nAt the moment some of the data are delivered in Jpeg2000, is there any plan to abandon that format for the COG?\n\n\nThere is currently no plan to convert Sentinel-2 in COGs. However, there is a parallel activity happening within ESA to define format evolution for all Sentinels which will be followed, once decisions are taken. But this is not something that is happening on the short term.\n</div>\n\n\n\nWill data, such as Sentinel-2, be processed to a consistent version?\n\n\nThe Sentinel-2 data will be available at the latest processing baseline. And with the reprocessing of Sentinel-2 happening in parallel (out of scope of this project), these will become available on this service as well.\n</div>\n\n\n\nIs it possible to download a subset of data corresponding to an AOI, instead of the whole image?\n\n\nYes, you will be able to download a subset of data, either using S3 interface, or dedicated APIs, i.e. Sentinel Hub, OpenEO when they become available. See <a href=\"#/Roadmap\">Roadmap</a> section of the documentation.\n</div>\n\n\n\nAre the data offered via Cloud Optimized Geotiffs (also Level 1)?\n\n\nSentinel-1 GRD data will be available in COG format. Sentinel-2 will stay in JP2 for the moment, as it is a similarly performant cloud optimised format.\n</div>\n\n\n\nWhen “on-line data” is mentioned, does that mean the data are not on tape?\n\n\nThe “on-line data” or IAD we are referring to, are indeed not on the tapes.  Tapes will still be there for redundancy reasons.\n</div>\n\n\n\nFor the S3 access in the free tier, will there be no cost for network traffic?\n\n\nS3 access will be part of free services as well, within the same constraints as the rest of the services.\n</div>\n\n\n\nCan we download the data acquired by all Sentinel missions (1, 2, 3, 5P, 6) and the other satellites (e.g. Meteosat) via the new interface? Some missions are not managed by ESA, but by EUMETSAT for example.\n\n\nInitialy Sentinel 1, Sentinel 2, Sentinel 3 and Sentinel 5P data up to L2 products will be available. Sentinel 6 data and data from Meteosat are currently not in the roadmap of the project. However access to Copernicus Contributing Missions CORE Datasets, Digital Elevation Models, data from Copernicus Services and additional data sets such as Landsat and ENVISAT and Belgian Collaborative Ground Segment hosted data are planned in the future. The <a href=\"#/Roadmap/DataTable.html\">Data Roadmap</a> shows how the Copernicus Data Space Ecosystem will be continously upgraded and how more data will become available.\n</div>\n\n\n\nWill it still be the case that data is labelled as “on/offline” on the current legacy portal?\n\n\nThe vast majority of the data will be on-line : all Sentinel-2 L1C/L2A, Sentinel-1 SLC/GRD  and just about all other relevant data collections.\n</div>\n\n\n\nWill the new interface offer EO ready-to-use products or just L0 and L1 data?\n\n\nUp to L2 products will be available. The <a href=\"#/Roadmap\">Roadmap</a> shows how the Copernicus Data Space Ecosystem will be continously upgraded and how more data become available.\n</div>\n\n\n\n\n\n\nWill there be an integrated free and commercial offering to support/encourage the transfer of the users from “try basics for free towards paid subscriptions”?\n\n\nYes, there will be a common user identity, which will allow registered users to seamlessly transfer between systems. This will also extend to other systems that will be added to the free tier to the commerical tier ecosystem in the future, assuming they will integrate it.\n</div>\n\n\n\nWhen we develop an EO ready-to-use product, could we integrate it into the interface and ask the payment from clients?\n\n\nYes, commercial services can be built on top, similar to Copernicus open license.\n</div>\n\n\n\nCan the user come with wish-list to services data products?\n\n\nUser can come with suggestions to improve or expand the service portfolio. A user forum will be set up and released by July to accommodate this.\n</div>\n\n\n\nAre you going to develop new services on DAS after July 2023?\n\n\nYes, a marketplace will be available where new Third party services will be able to onboard from July onwards to expand the ecosystem.\n</div>\n\n\n\nIs there any limitation on the max number of downloads at one time?\n\n\nYes, there will be quotas and constraints for different services.\n</div>\n\n\n\n\n\n\nWill there be an integrated free and commercial offering to support/encourage the transfer of the users from “try basics for free towards paid subscriptions”?\n\n\nYes, there will be a common user identity, which will allow registered users to seamlessly transfer between systems. This will also extend to other systems that will be added to the free tier to the commerical tier ecosystem in the future, assuming they will integrate it.\n</div>\n\n\n\nIf I’m having troubles with registering, what can I do?\n\n\nPlease e-mail the help-cdse-login@dataspace.copernicus.eu address for direct support on this matter.\n</div>\n\n\n\n\n\n\nSNAP/gpt processing codes can be used in these on-line and cloud processing services?\n\n\nSNAP is integrated in cloud environment, and there will even be some dedicated on-demand services based on SNAP  (i.e. S1 processing to coherence, etc). \n</div>\n\n\n\nIs a STAC catalog planned ? Will the data be accessible on cloud object storage (S3)?\n\n\nSTAC Catalog API is indeed planned.  Note that the phase-in will take from end of January to July 2023.  So services will be added during this timeline, not everything will be available at the beginning. All the data will be available over S3 as well.\n</div>\n\n\n\nWill LTA process be discontinued when all archived data become online?\n\n\nThere will still be services available for so called “deferred data access” :  data collections that are not commonly used. That said, all most relevant collections will be available on-line.  The <a href=\"#/Roadmap\">Roadmap</a> shows how the Copernicus Data Space Ecosystem will be continously upgraded and how more data become available.\n</div>\n\n\n\nWill the platform use STAC standards?\n\n\nYes, there will be STAC compliant Catalog API, as well as STAC items for individual products.\n</div>\n\n\n\nAny plan to offer the Pangeo platform for a “pythonist”?\n\n\nThis is currently not in the offer or roadmap.\n</div>\n\n\n\n\n\n\nIs there any difference between EU users and non-EU users?\n\n\nThere is no difference between EU users and non-EU users. That said, there will be a continuity of the accounts with higher throughput, managed by ESA (i.e. Copernicus Services, International Hub, etc.).\n</div>\n\n\n\nWhich distribution channels will be available for high-throughput data access? I assume the public side (dataspase.copernicus.eu) has a bandwidth limitation. Or does the public side have user tiers, or is high-throughput data transfer (such as https://creodias.eu/remote-transfer-for-eodata) only a paid service?\n\n\nAll distribution options (i.e. OData, S3, Sentinel Hub,..) will be constrained with user quotas, which includes both bandwidth limitation, as well as monthly limits.\n</div>\n\n\n\nCan you give indictions about the cost of the “extra” services?\n\n\nPricing will be published soon.\n</div>\n\n\n\n This December advertisement of DAS says that “For those interested in processing, there will be scalable cloud resources available, optimized for EO tasks”. Does this refer to the current CreoDIAS resources, or something completely new that hasn’t been addressed yet? \n\n\nScalable cloud resources will be part of the commercial offering and can be obtained at <a href = \"https://creodias.eu/\">CREODIAS</a> in first instance. ICT-wise, there will be two options, including Open Telekom Cloud.\n</div>\n\n\n\nAre there tutorials (online & physical meetings) to use the new interface?\n\n\nTutorials will be added to the documentation in due time explaining the usage of the different interfaces. We will also be present on different conferences explaining the service & ecosystem.\n</div>"
  },
  {
    "objectID": "404-not-found.html",
    "href": "404-not-found.html",
    "title": "COPERNICUS DATA SPACE ECOSYSTEM DOCUMENTATION PORTAL",
    "section": "",
    "text": "Page not found"
  },
  {
    "objectID": "Registration.html",
    "href": "Registration.html",
    "title": "COPERNICUS DATA SPACE ECOSYSTEM DOCUMENTATION PORTAL",
    "section": "",
    "text": "This section provides information on how to register and authenticate on the Copernicus Data Space Ecosystem.\n\n\nGo to website and click “login” in the top right corner.\n\n\nYou will now get the Copernicus Data Space Ecosystems login form. Click “here” in the bottom.\n\n\nYou will now get the Copernicus Data Space Ecosystems registration form. Fill in all required fields (all except Thematic activity and Purpose of use), you can fill in optional fields, next you have to accept terms and conditions and you can accept other consents (they are optional) and then click “Register”.\n\n\n\n\n\nWhen you register, you will be asked to verify your email address. You should receive a verification email. If you don’t have it click “Click here” in the bottom.\n\n\nWhen you open an email you need to click “Verify email address”.\n\n\n\nEmail\n\n\nNow you can log in with your credentials (providing Email and Password).\nIf you have an issue with registering or you want to deregister, please contact us directly."
  },
  {
    "objectID": "logos.html",
    "href": "logos.html",
    "title": "COPERNICUS DATA SPACE ECOSYSTEM DOCUMENTATION PORTAL",
    "section": "",
    "text": "```{=html}\n<div class=\"logos\">\n    <a href=\"https://dataspace.copernicus.eu\" target=\"_blank\">\n        <img src=\"_images/logos/EU.svg\">\n    </a>\n    <a href=\"https://dataspace.copernicus.eu\" target=\"_blank\">\n        <img src=\"_images/logos/copernicus-white-BL.svg\">\n    </a>\n    <a href=\"https://dataspace.copernicus.eu\" target=\"_blank\">\n        <img src=\"_images/logos/ESA_White.svg\">\n    </a>\n    \n    ```"
  }
]